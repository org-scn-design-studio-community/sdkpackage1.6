// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BulletChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.BulletChartRenderer");

/**
 * @class BulletChart renderer. 
 * @static
 */
sap.suite.ui.commons.BulletChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.BulletChartRenderer.render = function (oRm, oControl) {
    var oChartData = oControl._calculateChartData();
    var fForecastValuePct = +oChartData.forecastValuePct;
    var sSize = oControl.getSize();
    var sScale = oControl.getScale();
    var bRtl = sap.ui.getCore().getConfiguration().getRTL();
    var sOrientation = bRtl ? "right" : "left";
    var sMode = oControl.getMode();
    var sDeltaValue = (sap.suite.ui.commons.BulletChartMode.Delta == sMode) ? oControl._calculateDeltaValue() : 0;
    var bIsActualSet = oControl.getActual()._isValueSet;
    var bShowActualValue = oControl.getShowActualValue() && (sap.suite.ui.commons.InfoTileSize.XS != sSize) && sap.suite.ui.commons.BulletChartMode.Actual == sMode;
    var bShowDeltaValue = oControl.getShowDeltaValue() && (sap.suite.ui.commons.InfoTileSize.XS != sSize) && sap.suite.ui.commons.BulletChartMode.Delta == sMode;
    var bShowTargetValue = oControl.getShowTargetValue() && (sap.suite.ui.commons.InfoTileSize.XS != sSize);
	var sActualValueLabel = oControl.getActualValueLabel();
	var sDeltaValueLabel = oControl.getDeltaValueLabel();
	var sTargetValueLabel = oControl.getTargetValueLabel();
	var aData = oControl.getThresholds();
    var sTooltip = oControl.getTooltip_AsString();

    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapSuiteBCContent");
    oRm.addClass(sSize);
	if (oControl.hasListeners("press")) {    
		oRm.addClass("sapSuiteUiCommonsPointer");
		oRm.writeAttribute("tabindex", "0");
    }
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + sTooltip ));
    
    oRm.writeClasses();
    
    if (oControl.getWidth()) {
    	oRm.addStyle("width", oControl.getWidth());
    	oRm.writeStyles();
    }
    oRm.writeAttribute("id", oControl.getId() + "-bc-content");
    oRm.writeAttributeEscaped("title", sTooltip);
    oRm.write(">");

        oRm.write("<div");
        oRm.addClass("sapSuiteBCChart");
        oRm.addClass(sSize);
        oRm.writeClasses();
        oRm.writeAttribute("id", oControl.getId() + "-bc-chart");
        oRm.write(">");

    	if (bIsActualSet && bShowActualValue) {
    		var sAValToShow = (sActualValueLabel) ? sActualValueLabel : ""+oControl.getActual().getValue();
    		var sValScale = sAValToShow + sScale;
            oRm.write("<div");  
            oRm.addClass("sapSuiteBCItemValue");
            oRm.addClass(oControl.getActual().getColor());
            oRm.addClass(sSize);
            oRm.writeClasses();
            oRm.writeStyles();
            oRm.writeAttribute("id", oControl.getId() + "-bc-item-value");
            oRm.write(">");
            oRm.writeEscaped(sValScale);
            oRm.write("</div>");
	    } else if (bIsActualSet && oControl._isTargetValueSet && bShowDeltaValue) {
    		var sDValToShow = (sDeltaValueLabel) ? sDeltaValueLabel : ""+sDeltaValue;
    		var sValScale = sDValToShow + sScale;
            oRm.write("<div");  
            oRm.addClass("sapSuiteBCItemValue");
            oRm.addClass(oControl.getActual().getColor());
            oRm.addClass(sSize);
            oRm.writeClasses();
            oRm.writeStyles();
            oRm.writeAttribute("id", oControl.getId() + "-bc-item-value");
            oRm.write(">");
            oRm.write("&Delta;");
            oRm.writeEscaped(sValScale);
            oRm.write("</div>");
	    }

    	for (var i = 0; i < oChartData.thresholdsPct.length; i++) {
    		if (aData[i]._isValueSet) {
            	this.renderThreshold(oRm,  oControl, oChartData.thresholdsPct[i]);
            }
        }
 
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-chart-bar");
        oRm.addClass("sapSuiteBCBar");
        oRm.addClass(sSize);
        oRm.addClass(oControl.getScaleColor());
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");

        if (oControl._isForecastValueSet && "Actual"==sMode) {
            oRm.write("<div");
            oRm.addClass("sapSuiteBCForecastBarValue");
            oRm.addClass(oControl.getActual().getColor());
            oRm.addClass(sSize);
            oRm.writeClasses();
            oRm.addStyle("width", fForecastValuePct + "%");
            oRm.writeStyles();
            oRm.writeAttribute("id", oControl.getId() + "-forecast-bar-value");
            oRm.write("></div>");
        }

        if (bIsActualSet) {
        
            oRm.write("<div");
            oRm.addClass("sapSuiteBCBarValueMarker");
            oRm.addClass(sMode);
        	if (!oControl.getShowValueMarker()) {
        		oRm.addClass("sapSuiteBCBarValueMarkerHidden");
	        }
            oRm.addClass(oControl.getActual().getColor());
            oRm.addClass(sSize);
            oRm.writeClasses();
            oRm.addStyle(sOrientation, parseFloat(oChartData.actualValuePct) + parseFloat(1) + "%");
            if ("Delta" == sMode && oChartData.actualValuePct <= oChartData.targetValuePct) {
            	oRm.addStyle("margin", "0");
            }           
            oRm.writeStyles();
            oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value-marker");
            oRm.write("></div>");
        
	        if ("Actual"==sMode) {
	            oRm.write("<div");
	            oRm.addClass("sapSuiteBCBarValue");
	            oRm.addClass(oControl.getActual().getColor());
	            oRm.addClass(sSize);
	            if (oControl._isForecastValueSet) {
	            	oRm.addClass("sapSuiteBCForecast");
	            }
	            oRm.writeClasses();
	            oRm.addStyle("width", oChartData.actualValuePct + "%");
	            oRm.writeStyles();
	            oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value");
	            oRm.write("></div>");
	        } else if (oControl._isTargetValueSet && "Delta"==sMode) {
	            oRm.write("<div");
	            oRm.addClass("sapSuiteBCBarValue");
	            oRm.addClass(oControl.getActual().getColor());
	            oRm.addClass(sSize);
	            oRm.writeClasses();
	            oRm.addStyle("width", Math.abs(oChartData.actualValuePct-oChartData.targetValuePct) + "%");
	            oRm.addStyle(sOrientation, 1 + Math.min(oChartData.actualValuePct, oChartData.targetValuePct) + "%");
	            oRm.writeStyles();
	            oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value");
	            oRm.write("></div>");
	        }
        }
        
        if (oControl._isTargetValueSet) {
            oRm.write("<div");
            oRm.addClass("sapSuiteBCTargetBarValue");
            oRm.addClass(sSize);
            oRm.writeClasses();
            oRm.addStyle(sOrientation, parseFloat(oChartData.targetValuePct).toFixed(2) + "%");
            oRm.writeStyles();
            oRm.writeAttribute("id", oControl.getId() + "-bc-target-bar-value");
            oRm.write("></div>");

            if (bShowTargetValue) {
	        	var sTValToShow = (sTargetValueLabel) ? sTargetValueLabel : ""+oControl.getTargetValue();
	        	var sTValScale = sTValToShow + sScale;
	            oRm.write("<div");
	            oRm.addClass("sapSuiteBCTargetValue");
	            oRm.addClass(sSize);
	            oRm.writeClasses();
	            oRm.writeStyles();
	            oRm.writeAttribute("id", oControl.getId() + "-bc-target-value");
	            oRm.write(">");
	            oRm.writeEscaped(sTValScale);
	            oRm.write("</div>");
            }
        }
        oRm.write("</div>");

        oRm.write("<div");
	    oRm.writeAttribute("id", oControl.getId() + "-info");
	    oRm.writeAttribute("aria-hidden", "true");
	    oRm.addStyle("display", "none");
	    oRm.writeStyles();
	    oRm.write(">");
	    	oRm.writeEscaped(sTooltip);
	    oRm.write("</div>");

    oRm.write("</div>");
};

/**
 * Renders the HTML for the thresholds, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose thresholds should be rendered
 * @param {sap.ui.core.Control} oThreshold an object containing threshold values and colors
 */
sap.suite.ui.commons.BulletChartRenderer.renderThreshold = function(oRm, oControl, oThreshold) {
    var sOrientation = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
    var iValuePct = oThreshold.valuePct;
    var sColor = oThreshold.color;
    var sSize = oControl.getSize();
  
    if (sap.suite.ui.commons.InfoTileValueColor.Error == oThreshold.color) {
        oRm.write("<div");
        oRm.addClass("sapSuiteBCDiamond");
        oRm.addClass(sSize);
        oRm.addClass(sColor);
        oRm.writeClasses();
        oRm.addStyle(sOrientation, iValuePct + "%");
        oRm.writeStyles();
        oRm.write("></div>");
    } else {
	    oRm.write("<div");
	    oRm.addClass("sapSuiteBCThreshold");
	    oRm.addClass(sSize);
	    oRm.addClass(sColor);
	    oRm.writeClasses();
	    oRm.addStyle(sOrientation, iValuePct + "%");
	    oRm.writeStyles();
	    oRm.write("></div>");
    }
};


}; // end of sap/suite/ui/commons/BulletChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BusinessCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.BusinessCardRenderer");
jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

/**
 * @class BusinessCard renderer. 
 * @static
 */
sap.suite.ui.commons.BusinessCardRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.BusinessCardRenderer.render = function(rm, oControl){ 
	// accessibility
    var bAcc = sap.ui.getCore().getConfiguration().getAccessibility();

    // control properties
    var sId = oControl.getId();
    var sType = oControl.getType();
    var oFirstTitle = oControl.getFirstTitle();
    var sImageTooltip = oControl.getImageTooltip();
    var sIcon = oControl.getIconPath();
    var sDesc = oControl.getSecondTitle();
    var sWidth = oControl.getWidth();
    var sTooltip = oControl.getTooltip_AsString();

    rm.write("<div");
    rm.writeControlData(oControl);
    if (sTooltip) {
        rm.writeAttributeEscaped("title", sTooltip);
    }
    rm.addClass("suiteUiCard");
    rm.writeClasses();
    if (sWidth) {
        rm.addStyle("width", sWidth);
        rm.writeStyles();
    }
    rm.write(">");

        if (sType) {
            rm.write("<div");
            rm.addClass("suiteUiCardTypeHolder");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-type");
            rm.write(">");
                var oTypeLabel = new sap.ui.commons.Label({
                    id: sId + "-type-label",
                    text: sType,
                    tooltip: sType
                });
                oTypeLabel.addStyleClass("suiteUiCardType");
                rm.renderControl(oTypeLabel);
                oTypeLabel.destroy();
            rm.write("</div>");
        }

        rm.write("<div");
        rm.addClass("suiteUiCardContainer");
        rm.writeClasses();
        rm.writeAttribute("id", sId + "-container");
        rm.write(">");

            //icon
            if (sIcon) {
                rm.write("<div");
                rm.addClass("suiteUiCardIconHolder");
                rm.writeClasses();
                rm.writeAttribute("id", sId + "-icon");
                rm.write(">");
                    rm.write("<img");
                    rm.addClass("suiteUiCardIcon");
                    rm.writeClasses();
                    rm.writeAttributeEscaped("src", sIcon);
                    rm.writeAttributeEscaped("title", (sImageTooltip || ""));
                    rm.writeAttribute("alt", "");
                    rm.writeAttribute("id",sId + "-img");
                    rm.writeAttribute("tabindex", "-1");
                    if (bAcc) {
                        // ARIA - icon is decorative
                        rm.writeAttribute("role", "presentation");
                    }
                    rm.write("></img>");
                rm.write("</div>");
            }

            rm.write("<div");
            rm.addClass("suiteUiCardNameHolder");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-name");
            if (bAcc && sDesc){
                rm.writeAttribute("aria-describedby", sId + "-desc-label");
            }
            rm.write(">");
            if (oFirstTitle) {
                oFirstTitle.addStyleClass("suiteUiCardName");
                rm.renderControl(oFirstTitle);
            }
            rm.write("</div>");

            //title2
            if (sDesc) {
                rm.write("<div");
                rm.addClass("suiteUiCardDescHolder");
                rm.writeClasses();
                rm.writeAttribute("id", sId + "-desc");
                rm.write(">");
                    var oDescLabel = new sap.ui.commons.Label({
                        id: sId + "-desc-label",
                        text: sDesc,
                        tooltip: sDesc
                    });
                    oDescLabel.addStyleClass("suiteUiCardDesc");
                    rm.renderControl(oDescLabel);
                    oDescLabel.destroy();
                rm.write("</div>");
            }

            rm.write("<div");
            rm.addClass("suiteUiCardContent");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-content");
            rm.write(">");
                rm.renderControl(oControl.getContent());
            rm.write("</div>");
        rm.write("</div>");
    rm.write("</div>");
};

}; // end of sap/suite/ui/commons/BusinessCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.ChartContainerContentRenderer");

/**
 * @class ChartContainerContent renderer. 
 * @static
 */
sap.suite.ui.commons.ChartContainerContentRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ChartContainerContentRenderer.render = function(oRm, oControl){ 
//just render the embedded control as it is. The purpose is to only provide extra properties.
   oRm.renderControl(oControl.getContent());
};

}; // end of sap/suite/ui/commons/ChartContainerContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.ChartContainerRenderer");

/**
 * @class ChartContainer renderer.
 * @static
 */
sap.suite.ui.commons.ChartContainerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.suite.ui.commons.ChartContainerRenderer.render = function(oRm, oControl) {
	var selectedChart = oControl.getSelectedChart();

	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteUiCommonsChartContainer");
	oRm.writeClasses();
	oRm.write(">");

	// wrapper
	oRm.write("<div");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-wrapper");
	oRm.addClass("sapSuiteUiCommonsChartContainerWrapper");
	oRm.writeClasses();
	oRm.write(">");
    
    oRm.write("<div");
	oRm.addClass("sapSuiteUiCommonsChartContainerToolBarArea");
	oRm.writeClasses();
	oRm.write(">");
	// toolbar
	oRm.renderControl(oControl._oToolBar);
	oRm.write("</div>");// end toolbar

	// chart part
	oRm.write("<div");
	oRm.addClass("sapSuiteUiCommonsChartContainerChartArea");
	oRm.writeClasses();
	oRm.write(">");

	oRm.renderControl(selectedChart);//oControl.getContent()[0]);

	oRm.write("</div>");// end chartArea
	oRm.write("</div>"); // end wrapper

	oRm.write("</div>");

};

}; // end of sap/suite/ui/commons/ChartContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ColumnMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ColumnMicroChartRenderer");

/**
 * @class ColumnMicroChart renderer. 
 * @static
 */
sap.suite.ui.commons.ColumnMicroChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ColumnMicroChartRenderer.render = function(oRm, oControl){ 
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteCmc");
	oRm.addClass(oControl.getSize());
	
    oRm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
    
	if (oControl.hasListeners("press")) {    
		oRm.addClass("sapSuiteUiCommonsPointer");
		oRm.writeAttribute("tabindex", "0");
    }
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + oControl.getTooltip_AsString() ));
    
    oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	oRm.writeStyles();
	oRm.write(">");
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-content");
		oRm.addClass("sapSuiteCmcCnt");
		oRm.writeClasses();
		oRm.write(">");
			var iColumnsNum = oControl.getColumns().length;
			for (var i = 0; i < iColumnsNum; i++) {
				var oColumn = oControl.getColumns()[i];
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-bar-" + i);
				oRm.addClass("sapSuiteCmcBar");
				oRm.addClass(oColumn.getColor());
				oRm.writeClasses();
				oRm.write(">");
				oRm.write("</div>");
			}
		oRm.write("</div>");
	oRm.write("</div>");
};
}; // end of sap/suite/ui/commons/ColumnMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ComparisonChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.ComparisonChartRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ComparisonChart renderer.
 * @static
 */

sap.suite.ui.commons.ComparisonChartRenderer = {

};

sap.suite.ui.commons.ComparisonChartRenderer.render = function (oRm, oControl) {
	oRm.write("<div");
	oRm.writeControlData(oControl);
    oRm.addClass("sapSuiteCmpChartContent");
    oRm.addClass(oControl.getSize());
	if (oControl.hasListeners("press")) {
	    oRm.writeAttribute("tabindex", "0");
		oRm.addClass("sapSuiteUiCommonsPointer");
    }
	oRm.writeClasses();
	
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + oControl.getTooltip_AsString() ));
   
	if (oControl.getShrinkable()) {
		oRm.addStyle("min-height", "0px");
	}
    if (oControl.getWidth()) {
    	oRm.addStyle("width", oControl.getWidth());
    }
    if (oControl.getHeight()) {
    	oRm.addStyle("height", oControl.getHeight());
    }
    
    oRm.writeStyles();
    
    oRm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
    oRm.write(">");
        this.renderInnerContent(oRm, oControl);

	    oRm.write("<div");
	    oRm.writeAttribute("id", oControl.getId() + "-info");
	    oRm.writeAttribute("aria-hidden", "true");
	    oRm.addStyle("display", "none");
	    oRm.writeStyles();
	    oRm.write(">");
	    	oRm.writeEscaped(oControl.getTooltip_AsString());
	    oRm.write("</div>");
        
    oRm.write("</div>");
};

/**
 * Renders the HTML for the inner content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 */
sap.suite.ui.commons.ComparisonChartRenderer.renderInnerContent = function(oRm, oControl) {
	var iCPLength = oControl.getColorPalette().length;
	var iCPIndex = 0;
	
	var fnNextColor = function() {
		if (iCPLength) {
			if (iCPIndex == iCPLength) {
				iCPIndex = 0;
			}
			return oControl.getColorPalette()[iCPIndex++];
		}
	};
	
    var aChartData = oControl._calculateChartData();
    for (var i = 0; i < aChartData.length; i++) {
        this.renderChartItem(oRm,  oControl, aChartData[i], i, fnNextColor());
    }
};

/**
 * Renders the HTML for the single comparison chart bar of the given control, using the provided {@link sap.ui.core.RenderManager}.
 */
sap.suite.ui.commons.ComparisonChartRenderer.renderChartItem = function(oRm, oControl, oChartData, iIndex, sColor) {
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex);
    oRm.addClass("sapSuiteCmpChartItem");
    oRm.addClass(oControl.getView());
    oRm.addClass(oControl.getSize());
    oRm.writeClasses();
    oRm.write(">");
        this.renderChartHeader(oRm, oControl, iIndex, sColor);
        this.renderChartBar(oRm, oControl, oChartData, iIndex, sColor);
    oRm.write("</div>");
};

/**
 * Renders the HTML for the comparison chart bar of the given control, using the provided {@link sap.ui.core.RenderManager}.
 */
sap.suite.ui.commons.ComparisonChartRenderer.renderChartBar = function(oRm, oControl, oChartData, iIndex, sColor) {
    var oData = oControl.getData()[iIndex];

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-bar");
    oRm.addClass("sapSuiteCmpChartBar");
	oRm.addClass(oControl.getView());
    oRm.addClass(oControl.getSize());
    oRm.writeClasses();
    oRm.write(">");

    if (oChartData.negativeNoValue > 0) {
        oRm.write("<div");
        oRm.addClass("sapSuiteCmpChartBarNegNoValue");
        oRm.writeClasses();
        oRm.addStyle("width", oChartData.negativeNoValue + "%");
        oRm.writeStyles();
        oRm.write("></div>");
    }

    if (oChartData.value > 0) {
        oRm.write("<div");
        oRm.addClass("sapSuiteCmpChartBarValue");
        oRm.addClass(oData.getColor());
        oRm.writeClasses();
        oRm.addStyle("background-color", sColor);
        oRm.addStyle("width", oChartData.value + "%");
        oRm.writeStyles();
        oRm.write("></div>");
    }

    if (oChartData.positiveNoValue > 0) {
        oRm.write("<div");
        oRm.addClass("sapSuiteCmpChartBarNoValue");
        oRm.writeClasses();
        oRm.addStyle("width", oChartData.positiveNoValue + "%");
        oRm.writeStyles();
        oRm.write("></div>");
    }

    oRm.write("</div>");
};

/**
 * Renders the HTML for the comparison chart bar header of the given control including title, value and scale, using the provided {@link sap.ui.core.RenderManager}.
 */
sap.suite.ui.commons.ComparisonChartRenderer.renderChartHeader = function(oRm, oControl, iIndex, sColor) {
    var oData = oControl.getData()[iIndex];
    var sScale = oControl.getScale();
    var sDisplayValue = oData.getDisplayValue();
	var sAValToShow = sDisplayValue ? sDisplayValue : ""+oData.getValue();
    var sValScale = sAValToShow + sScale;

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-header");
    oRm.addClass("sapSuiteCmpChartItemHeader");
	oRm.addClass(oControl.getView());
	oRm.addClass(oControl.getSize());
    oRm.writeClasses();
    oRm.write(">");
    	oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-value");
	        oRm.addClass("sapSuiteCmpChartItemValue");
	        oRm.addClass(oControl.getSize());
	        oRm.addClass(oControl.getView());
	        if (!sColor) {
	        	oRm.addClass(oData.getColor());
	        }
	        
	        if (oData.getTitle()) {
	        	oRm.addClass("T");
	        }
	        oRm.writeClasses();
	        oRm.write(">");
	        if (!isNaN(oData.getValue())) {
	        	oRm.writeEscaped(sValScale);
	        }
    	oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-title");
        oRm.addClass("sapSuiteCmpChartItemTitle");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oData.getTitle());
        oRm.write("</div>");
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ComparisonChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScrollerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScrollerRenderer");

/**
 * @class DateRangeScroller renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeScrollerRenderer = {};

/**
 * Render decrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderDecrementScrollButton=function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-decrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_PREV_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerDecBtnArrow");
    oRm.writeClasses();  
    oRm.write(">");
    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Render incrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderIncrementScrollButton = function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-incrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_NEXT_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerIncBtnArrow");
    oRm.writeClasses();   
    oRm.write(">");    
    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oDateRangeScroller an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.render = function(oRm, oDateRangeScroller) {

    var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
    var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
    var sPrevArrowSymbol = "&#9668";
    var sNextArrowSymbol = "&#9658";
    var oDisplay = {
        resBundle : oResBundle,
        prevArrowSymbol : sPrevArrowSymbol,
        nextArrowSymbol : sNextArrowSymbol
    };

    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeScroller);
    oRm.addClass("sapSuiteUiCommonsDateRangeScroller");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "-1");
    oRm.write(">"); // span element

    // invisible span with tooltip as text for aria
    if (oDateRangeScroller.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeScroller.getId() + '-Descr" style="visibility: hidden; display: none;"');
        oRm.write('>');
        oRm.writeEscaped(oDateRangeScroller.getTooltip_AsString());
        oRm.write('</SPAN>');
    }

    this.renderDecrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    this.renderIncrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    // Start label area
    oRm.write("<span");
    oRm.writeAttribute("id", oDateRangeScroller.getId() + "-labelarea");
    oRm.writeAttribute("tabindex", "0");
    oRm.writeClasses();

    // ARIA
    oRm.writeAccessibilityState(oDateRangeScroller, {
        role : 'list',
        live : 'assertive',
        describedby : oDateRangeScroller.getTooltip_AsString() ? (oDateRangeScroller.getId() + '-Descr ' + oDateRangeScroller.getAriaDescribedBy().join(" ")) : undefined
    });

    oRm.write(">");

    oRm.renderControl(oDateRangeScroller._oDateRangeLabel);

    oRm.write("</span>"); // label span

    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/DateRangeScrollerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternalRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternalRenderer");
jQuery.sap.require('sap.ui.commons.RangeSliderRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.RangeSliderRenderer);

/**
 * Render buffer div to accommodate bubbles height.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBufferDivForBubbles = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.write('<DIV id="' + oDateRangeSliderInternal.getId() + '-bubbleBuffer" style="height:40px">');
        oRm.write('</DIV>');
    }
};

/**
 * Render enclosing DIV with styles and classes.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDiv = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeControlData(oDateRangeSliderInternal);
    oRm.addClass('sapUiSli');
    this.controlAdditionalCode(oRm, oDateRangeSliderInternal);
    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.writeAttributeEscaped('title', oDateRangeSliderInternal.getTooltip_AsString());
    }

    if (!oDateRangeSliderInternal.getVertical() && oDateRangeSliderInternal.getWidth()) {
        oRm.writeAttribute('style', 'width:' + oDateRangeSliderInternal.getWidth() + ';');
    }

    if (!oDateRangeSliderInternal.getEnabled()) {
        oRm.addClass('sapUiSliDsbl');
    } else {
        if (!oDateRangeSliderInternal.getEditable()) {
            oRm.addClass('sapUiSliRo');
        } else {
            oRm.addClass('sapUiSliStd');
        }
    }

    if (!oDateRangeSliderInternal.getVertical()) {
        oRm.addClass('sapUiSliHori');
    }

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.addClass('sapUiSuiteDRSliBub');
    }

    oRm.writeClasses();
    oRm.write('>');
};

/**
 * Render closing tag for enclosing DIV.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDivEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV>');
};

/**
 * Render invisible span with tooltip as text for aria on grip.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderAriaGripTooltip = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeSliderInternal.getId() + '-Descr" style="visibility: hidden; display: none;">');
        oRm.writeEscaped(oDateRangeSliderInternal.getTooltip_AsString());
        oRm.write('</SPAN>');
    }
};

/**
 * Renders the HTML for two bubbles to show selected dates on top of the slider. *
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered.
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBubbles = function(oRm, oDateRangeSliderInternal) {

    if (!oDateRangeSliderInternal.getShowBubbles()) {
        return;
    }

    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble);
    oRm.write('</div>');
    oRm.write('</div>');
    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble2"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble2);
    oRm.write('</div>');
    oRm.write('</div>');
};

/**
 * Render the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBar = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-right');
    oRm.write('class="sapUiSliR"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-left');
    oRm.write('class="sapUiSliL"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-bar');
    oRm.write('class="sapUiSliBar">');
};

/**
 * Render closing tag for the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBarEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV></DIV></DIV>');
};

/**
 * Render labels and ticks.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderTicksAndLabels = function(oRm, oDateRangeSliderInternal) {

    var bUseTextLabels = false;
    if (oDateRangeSliderInternal.getLabels() && oDateRangeSliderInternal.getLabels().length > 0) {
        bUseTextLabels = true;
    }

    if (oDateRangeSliderInternal.getTotalUnits() > 0 || bUseTextLabels) {
        var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
        if (bUseTextLabels) {
            iTotalUnits = oDateRangeSliderInternal.getLabels().length - 1;
        }

        // Add ticks
        for ( var i = 0; i <= iTotalUnits; i++) {
            oRm.write('<DIV');
            oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-tick' + i);
            oRm.write('class="sapUiSliTick" ');
            oRm.write('></DIV>'); // tick

            if (oDateRangeSliderInternal.getStepLabels()) {
                // Texts
                oRm.write('<DIV');
                oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-text' + i);
                switch (i) {
                    case (0):
                        oRm.write('class="sapUiSliText sapUiSliTextLeft" >');
                        break;
                    case (iTotalUnits):
                        oRm.write('class="sapUiSliText sapUiSliTextRight" >');
                        break;
                    default:
                        oRm.write('class="sapUiSliText" >');
                        break;
                }

                if (bUseTextLabels) {
                    oRm.write(oDateRangeSliderInternal.getLabels()[i]);
                } else {
                    var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;
                    oRm.write(oDateRangeSliderInternal.getMin() + i * fStepSize);
                }

                oRm.write('</DIV>'); // Text
            }
        }
    }
};

/**
 * Render highlight bar between grips.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderHighlightBar = function(oRm, oDateRangeSliderInternal) {

    // Highlight bar
    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-hili');
    oRm.write('class="sapUiSliHiLi"></DIV>');
};

/**
 * Renders the Grip for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip = function(oRm, oDateRangeSliderInternal) {

    // Left Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }
    
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getMinDate()),
        valuemax : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date()),
        valuenow: oDateRangeSliderInternal.getValue(),
        valuetext : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate()),
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined,
        live : 'assertive'
    });
    

    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)
};

/**
 * Renders the Grip2 for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip2 = function(oRm, oDateRangeSliderInternal) {

    // Right Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip2');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip2()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }

    oRm.writeAttribute('title', oDateRangeSliderInternal.getValue2());
    
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip2',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate()),
        valuemax : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getMaxDate()),
        valuenow : oDateRangeSliderInternal.getValue2(),
        valuetext : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date()),
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined,
        live : 'assertive'
    });    
    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.render = function(oRm, oDateRangeSliderInternal) {

    // Return immediately if control is invisible
    if (!oDateRangeSliderInternal.getVisible()) {
        return;
    }

    this.renderEnclosingDiv(oRm, oDateRangeSliderInternal);
    this.renderBufferDivForBubbles(oRm, oDateRangeSliderInternal);
    this.renderAriaGripTooltip(oRm, oDateRangeSliderInternal);
    this.renderBubbles(oRm, oDateRangeSliderInternal);
    this.renderSliderBar(oRm, oDateRangeSliderInternal);
    this.renderTicksAndLabels(oRm, oDateRangeSliderInternal);
    this.renderHighlightBar(oRm, oDateRangeSliderInternal);

    if (oDateRangeSliderInternal.getPinGrip() || 
       (oDateRangeSliderInternal.getPinGrip() && oDateRangeSliderInternal.getPinGrip2()) || 
       (!oDateRangeSliderInternal.getPinGrip() && !oDateRangeSliderInternal.getPinGrip2())) {
        this.renderGrip(oRm, oDateRangeSliderInternal);
        this.renderGrip2(oRm, oDateRangeSliderInternal);
    } else if (oDateRangeSliderInternal.getPinGrip2()) {
        this.renderGrip2(oRm, oDateRangeSliderInternal);
        this.renderGrip(oRm, oDateRangeSliderInternal);
    }

    this.renderSliderBarEnd(oRm, oDateRangeSliderInternal);
    this.renderEnclosingDivEnd(oRm, oDateRangeSliderInternal);
};

}; // end of sap/suite/ui/commons/DateRangeSliderInternalRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderRenderer");

/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSlider}
 *                oDateRangeSlider an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderRenderer.render = function(oRm, oDateRangeSlider) {

    if (!oDateRangeSlider.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeSlider);
    oRm.addClass("sapSuiteUiCommonsDateRangeSlider");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oDateRangeSlider._oDateRangeSliderInternal);
    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/DateRangeSliderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DynamicContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.DynamicContainerRenderer");

/**
 * @class DynamicContainer renderer. 
 * @static
 */
sap.suite.ui.commons.DynamicContainerRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.DynamicContainerRenderer.render = function(rm, oControl) {
 	rm.write("<div");
 	rm.writeControlData(oControl);
 	rm.addClass("sapSuiteDC");
 	rm.writeClasses();
 	
 	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
        rm.writeAttributeEscaped("title", sTooltip);
    }
    rm.writeAttribute("tabindex", "0");
    rm.writeAttribute("role", "presentation");
 	rm.write(">");
 		var iLength = oControl.getTiles().length;
 		
 		for (var i = 0; i < iLength; i++) {
 		 	rm.write("<div");
 		 	rm.writeAttribute("id", oControl.getId() + "-wrapper-" + i);
		 	rm.addClass("sapSuiteDCWrapper");
		 	rm.writeClasses();
		 	rm.write(">");
 				rm.renderControl(oControl.getTiles()[i]);
 			rm.write("</div>");
 		}
 	rm.write("</div>");
};

}; // end of sap/suite/ui/commons/DynamicContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FacetOverviewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.FacetOverviewRenderer");

/**
 * @class FacetOverview renderer.
 * @static
 */
sap.suite.ui.commons.FacetOverviewRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FacetOverviewRenderer.render = function(oRm, oControl) {
    var sTooltip = oControl.getTooltip_AsString();
    oRm.write("<div");
    oRm.writeControlData(oControl);
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
    if (oControl.hasListeners("press")) {
    	oRm.addClass("sapSuiteFovClickable");
    }
    oRm.addClass("sapSuiteFov");
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getWidth());
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeStyles();
    oRm.write(">");
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-title");
        oRm.addClass("sapSuiteFovTitle");
        oRm.writeClasses();
        oRm.write(">");
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-title-text");
	        oRm.addClass("sapSuiteFovTitleText");
	        oRm.writeClasses();
	        oRm.write(">");
            	oRm.writeEscaped(oControl.getTitle());
            oRm.write("</div>");

            if (oControl.getQuantity() >= 0) {
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-qty");
                oRm.addClass("sapSuiteFovQty");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.writeEscaped("(" + oControl.getQuantity() + ")");
                oRm.write("</div>");
            }
                        
            if (oControl._oHoverIcon) {
	            oRm.write("<div");
	            oRm.writeAttribute("id", oControl.getId() + "-hover-icon");
	            oRm.addClass("sapSuiteFovHoverIcon");
	            oRm.writeClasses();
	            oRm.write(">");
	            	oRm.renderControl(oControl._oHoverIcon);
	            oRm.write("</div>");
	        }
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-content");
        
        if (sap.suite.ui.commons.FacetOverviewHeight.Auto == oControl.getHeightType()) {
        	oRm.addStyle("height", "auto");
        	oRm.writeStyles();
        }
        oRm.addClass("sapSuiteFovContent");        
        oRm.writeClasses();
        oRm.write(">");
        	if (oControl.getContent()) {
        		oRm.renderControl(oControl.getContent());
        	} else if (sap.suite.ui.commons.FacetOverviewHeight.XS != oControl.getHeightType()) {
        		oRm.renderControl(oControl._oNoDataLabel);
        	}
        oRm.write("</div>");

    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/FacetOverviewRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.GenericTile2X2Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.GenericTile2X2Renderer");

/**
 * @class GenericTile renderer. 
 * @static
 */
sap.suite.ui.commons.GenericTile2X2Renderer = {
};

/**
 * Renders the HTML for the header of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.GenericTile2X2Renderer.renderHeader = function(rm, oControl) {
 	rm.write("<div");
 	rm.addClass("sapSuiteGTHdrTxt");
 	rm.addClass(oControl.getSize());
 	rm.writeClasses();
 	rm.writeAttribute("id", oControl.getId() + "-hdr-text");
 	rm.write(">");
 		rm.renderControl(oControl._oTitle);
 	rm.write("</div>");	 	
};

/**
 * Renders the HTML for the subheader of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose description should be rendered
 */
sap.suite.ui.commons.GenericTile2X2Renderer.renderSubheader = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapSuiteGTSubHdrTxt");
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-subHdr-text");
	rm.write(">");
		rm.writeEscaped(oControl.getSubheader());
	rm.write("</div>");
};

/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose content should be rendered
 */
sap.suite.ui.commons.GenericTile2X2Renderer.renderContent = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapSuiteGTContent");
	
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.write(">");
		this.renderInnerContent(rm, oControl);
	rm.write("</div>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.GenericTile2X2Renderer.render = function(rm, oControl) { 
	 // write the HTML into the render manager
	 var sTooltip = oControl.getTooltip_AsString();
	 var sHeaderImage = oControl.getHeaderImage();
	 
	 rm.write("<div");

	 rm.writeControlData(oControl);
	 
	 if(sTooltip) {
		 rm.writeAttributeEscaped("title", sTooltip);
	 }
	 
	 rm.addClass("sapSuiteGT");
	 rm.addClass(oControl.getSize());
	 rm.addClass("TwoByTwo");
	 
	var sDesc = "";
	var iLength = oControl.getTileContent().length;
	for(var i = 0; i < iLength; i++) {
		sDesc += oControl.getTileContent()[i].getId() + " ";
	}
	rm.writeAttribute("role", "presentation");
	rm.writeAttribute("aria-describedby", sDesc);

	 if (oControl.hasListeners("press") && oControl.getState() != "Disabled") {
		rm.addClass("sapSuiteUiCommonsPointer");
		rm.writeAttribute("tabindex", "0");
	 }
	 rm.writeClasses();
	 
	 if (oControl.getBackgroundImage()) {
		rm.write(" style='background-image:url(");
		rm.writeEscaped(oControl.getBackgroundImage());
		rm.write(");'");
	 }
	 
	 rm.write(">");
         var sState = oControl.getState();
         if(sState != sap.suite.ui.commons.LoadState.Loaded) {
        	 rm.write("<div");
			 rm.addClass("sapSuiteGTOverlay");
			 rm.writeClasses();
			 rm.writeAttribute("id", oControl.getId() + "-overlay");
			 rm.write(">");  
		        switch(sState) {
		        case sap.suite.ui.commons.LoadState.Disabled:
				case sap.suite.ui.commons.LoadState.Loading:
					oControl._oBusy.setBusy(sState == "Loading");
					rm.renderControl(oControl._oBusy);
					break;
				case sap.suite.ui.commons.LoadState.Failed:
					rm.write("<div");
					rm.writeAttribute("id", oControl.getId() + "-failed-ftr");
					rm.addClass("sapSuiteGenericTileFtrFld");
					rm.writeClasses();
					rm.write(">");
						rm.write("<div");
						rm.writeAttribute("id", oControl.getId() + "-failed-icon");
						rm.addClass("sapSuiteGenericTileFtrFldIcn");
						rm.writeClasses();
						rm.write(">");
							rm.renderControl(oControl._oWarningIcon);
						rm.write("</div>");
								
						rm.write("<div");
						rm.writeAttribute("id", oControl.getId() + "-failed-text");
						rm.addClass("sapSuiteGenericTileFtrFldTxt");
						rm.writeClasses();
						rm.write(">");
							rm.renderControl(oControl._oFailed);
						rm.write("</div>");

					rm.write("</div>");
					break;
				default:
			}
	         
	
			 rm.write("</div>");
         }
       
         
	 	 rm.write("<div");
		 rm.addClass("sapSuiteGTHdrContent");
		 rm.addClass(oControl.getSize());
		 rm.addClass("TwoByTwo");
		 rm.writeAttributeEscaped("title", oControl.getHeaderAltText());
		 rm.writeClasses();
		 rm.write(">");
	         if (sHeaderImage) {
	             rm.renderControl(oControl._oImage);
	         }
         
			this.renderHeader(rm, oControl);
			this.renderSubheader(rm, oControl);
		 rm.write("</div>");
		 
		rm.write("<div");
		rm.addClass("sapSuiteGTContent");
		rm.addClass(oControl.getSize());
		rm.writeClasses();
		rm.writeAttribute("id", oControl.getId() + "-content");
		rm.write(">");
			var iLength = oControl.getTileContent().length;
			for(var i = 0; i < iLength; i++) {
				rm.renderControl(oControl.getTileContent()[i]);
			}
		rm.write("</div>");
	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/GenericTile2X2Renderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.GenericTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.GenericTileRenderer");

/**
 * @class GenericTile renderer. 
 * @static
 */
sap.suite.ui.commons.GenericTileRenderer = {
};

/**
 * Renders the HTML for the header of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.GenericTileRenderer.renderHeader = function(rm, oControl) {
 	rm.write("<div");
 	rm.addClass("sapSuiteGTHdrTxt");
 	rm.addClass(oControl.getSize());
 	rm.writeClasses();
 	rm.writeAttribute("id", oControl.getId() + "-hdr-text");
 	rm.write(">");
 		rm.renderControl(oControl._oTitle);
 	rm.write("</div>");	 	
};

/**
 * Renders the HTML for the subheader of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose description should be rendered
 */
sap.suite.ui.commons.GenericTileRenderer.renderSubheader = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapSuiteGTSubHdrTxt");
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-subHdr-text");
	rm.write(">");
		rm.writeEscaped(oControl.getSubheader());
	rm.write("</div>");
};

/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose content should be rendered
 */
sap.suite.ui.commons.GenericTileRenderer.renderContent = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapSuiteGTContent");
	
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.write(">");
		this.renderInnerContent(rm, oControl);
	rm.write("</div>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.GenericTileRenderer.render = function(rm, oControl) { 
	 // write the HTML into the render manager
	 var sTooltip = oControl.getTooltip_AsString();
	 var sHeaderImage = oControl.getHeaderImage();
	 
	 rm.write("<div");

	 rm.writeControlData(oControl);
	 
	 if(sTooltip) {
		 rm.writeAttributeEscaped("title", sTooltip);
	 }
	 
	 rm.addClass("sapSuiteGT");
	 rm.addClass(oControl.getSize());
	 rm.addClass(oControl.getFrameType());
	 
	rm.writeAttribute("role", "presentation");
	rm.writeAttribute("aria-label", oControl.getAltText());

	 if (oControl.hasListeners("press") && oControl.getState() != "Disabled") {
		rm.addClass("sapSuiteUiCommonsPointer");
		rm.writeAttribute("tabindex", "0");
	 }
	 rm.writeClasses();
	 
	 if (oControl.getBackgroundImage()) {
		rm.write(" style='background-image:url(");
		rm.writeEscaped(oControl.getBackgroundImage());
		rm.write(");'");
	 }
	 
	 rm.write(">");
         var sState = oControl.getState();
         if(sState != sap.suite.ui.commons.LoadState.Loaded) {
        	 rm.write("<div");
			 rm.addClass("sapSuiteGTOverlay");
			 rm.writeClasses();
			 rm.writeAttribute("id", oControl.getId() + "-overlay");
			 rm.write(">");  
		        switch(sState) {
		        case sap.suite.ui.commons.LoadState.Disabled:
				case sap.suite.ui.commons.LoadState.Loading:
					oControl._oBusy.setBusy(sState == "Loading");
					rm.renderControl(oControl._oBusy);
					break;
				case sap.suite.ui.commons.LoadState.Failed:
					rm.write("<div");
					rm.writeAttribute("id", oControl.getId() + "-failed-ftr");
					rm.addClass("sapSuiteGenericTileFtrFld");
					rm.writeClasses();
					rm.write(">");
						rm.write("<div");
						rm.writeAttribute("id", oControl.getId() + "-failed-icon");
						rm.addClass("sapSuiteGenericTileFtrFldIcn");
						rm.writeClasses();
						rm.write(">");
							rm.renderControl(oControl._oWarningIcon);
						rm.write("</div>");
								
						rm.write("<div");
						rm.writeAttribute("id", oControl.getId() + "-failed-text");
						rm.addClass("sapSuiteGenericTileFtrFldTxt");
						rm.writeClasses();
						rm.write(">");
							rm.renderControl(oControl._oFailed);
						rm.write("</div>");

					rm.write("</div>");
					break;
				default:
			}
	         
	
			 rm.write("</div>");
         }
       
         
	 	 rm.write("<div");
		 rm.addClass("sapSuiteGTHdrContent");
		 rm.addClass(oControl.getSize());
		 rm.addClass(oControl.getFrameType());
		 rm.writeAttributeEscaped("title", oControl.getHeaderAltText());
		 rm.writeClasses();
		 rm.write(">");
			if (sHeaderImage) {
				rm.renderControl(oControl._oImage);
			}
         
			this.renderHeader(rm, oControl);
			this.renderSubheader(rm, oControl);

		 rm.write("</div>");
		 
		rm.write("<div");
		rm.addClass("sapSuiteGTContent");
		rm.addClass(oControl.getSize());
		rm.writeClasses();
		rm.writeAttribute("id", oControl.getId() + "-content");
		rm.write(">");
			var iLength = oControl.getTileContent().length;
			for(var i = 0; i < iLength; i++) {
				rm.renderControl(oControl.getTileContent()[i]);
			}
		rm.write("</div>");
	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/GenericTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.HeaderCellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.HeaderCellRenderer");

/**
 * @class HeaderCell renderer. 
 * @static
 */
sap.suite.ui.commons.HeaderCellRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.HeaderCellRenderer.render = function(rm, oControl){
	 var oWestControl = oControl.getWest();
	 var oNorthControl = oControl.getNorth();
	 var oEastControl = oControl.getEast();
	 var oSouthControl = oControl.getSouth();
	 var sType = "";
	 var sDesc = "";
	 
	 if(oWestControl != null) {
		 sType += "W";
		 sDesc += oWestControl.getId() + " ";
	 }
	 if(oNorthControl != null) {
		 sType += "N";
		 sDesc += oNorthControl.getId() + " ";
	 }
	 if(oEastControl != null) {
		 sType += "E";
		 sDesc += oEastControl.getId() + " ";
	 }
	 if(oSouthControl != null) {
		 sType += "S";
		 sDesc += oSouthControl.getId();
	 }
	 
	 rm.write("<div");
	 rm.writeControlData(oControl);
	 rm.addClass("sapSuiteUiCommonsHeaderCell");
	 rm.addStyle("height", oControl.getHeight());
	 rm.writeStyles();
	 rm.writeClasses();
	 rm.writeAttribute("role", "presentation");
	 rm.writeAttribute("aria-live", "assertive");
	 rm.writeAttribute("aria-describedby", sDesc);
	 rm.write(">");
		 // write the HTML into the render manager
		 if(oWestControl != null) {
			 this._renderInnerCell(rm, oWestControl, sType, "sapSuiteHdrCellWest");
		 }
		 if(oNorthControl != null) {
			 this._renderInnerCell(rm, oNorthControl, sType, "sapSuiteHdrCellNorth");
		 }
		 if(oEastControl != null) {
			 this._renderInnerCell(rm, oEastControl, sType, "sapSuiteHdrCellEast");
		 }
		 if(oSouthControl != null) {
			 this._renderInnerCell(rm, oSouthControl, sType, "sapSuiteHdrCellSouth");
		 }
	rm.write("</div>");
};
sap.suite.ui.commons.HeaderCellRenderer._renderInnerCell = function(rm, oControl, sType, side) {
		 rm.write("<div");
		 rm.addClass(sType);
		 rm.addClass(side);
		 rm.addStyle("height", oControl.getHeight());
		 rm.writeStyles();
		 rm.writeClasses();
		 rm.writeAttribute("aria-hidden", "true");
		 rm.write(">");
		 rm.renderControl(oControl.getContent());
		 rm.write("</div>");
};
}; // end of sap/suite/ui/commons/HeaderCellRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.HeaderContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.HeaderContainerRenderer");

/**
 * @class HeaderContainer renderer. 
 * @static
 */
sap.suite.ui.commons.HeaderContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.HeaderContainerRenderer.render = function(rm, oControl){ 
     var sTooltip = oControl.getTooltip_AsString();
	 // write the HTML into the render manager
	 rm.write("<div");
	 rm.writeControlData(oControl);
	 if (sTooltip) {
     rm.writeAttributeEscaped("title", sTooltip);
   }
	 rm.addClass("sapSuiteHdrCntr");
	 rm.addClass(oControl.getView());
	 if(oControl.getShowDividers()) {
	   rm.addClass("sapSuiteHrdrCntrDvdrs");
	 }
	 rm.writeClasses();
	 rm.addStyle("height", oControl.getHeight());
	 rm.writeStyles();
	 rm.write(">");

     if (oControl._oArrowPrev) {
         rm.write("<div");
         rm.addClass("sapSuiteHdrCntrBtnCntr");
		 rm.addClass("sapSuiteHdrCntrLeft");
		 rm.addClass(oControl.getView());
		 rm.writeClasses();
		 rm.write(">");
		 rm.renderControl(oControl._oArrowPrev);
         rm.write("</div>");
     }

	 rm.write("<div");
	 rm.writeAttributeEscaped("id", oControl.getId() + "-scroll-area");
	 rm.addClass("sapSuiteHdrCntrCntr");
	 rm.addClass(oControl.getView());
	 rm.writeClasses();
	 rm.write(">");
	 rm.renderControl(oControl._oScrollCntr);
     rm.write("</div>");
 
     if (oControl._oArrowNext) {
         rm.write("<div");
         rm.addClass("sapSuiteHdrCntrBtnCntr");
		 rm.addClass("sapSuiteHdrCntrRight");
		 rm.addClass(oControl.getView());
		 rm.writeClasses();
		 rm.write(">");
         rm.renderControl(oControl._oArrowNext);
         rm.write("</div>");
     }
	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/HeaderContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.InfoTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.InfoTileRenderer");

/**
 * @class InfoTile renderer. 
 * @static
 */
sap.suite.ui.commons.InfoTileRenderer = {
};

/**
 * Renders the HTML for the title of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderTitle = function(rm, oControl) {
 	if(oControl.getTitle() !== "") {
	 	rm.write("<div");
	 	rm.addClass("sapSuiteInfoTileTitleTxt");
	 	rm.addClass(oControl.getState());
	 	rm.addClass(oControl.getSize());
	 	rm.writeClasses();
	 	rm.writeAttribute("id", oControl.getId() + "-title-text");
	 	rm.writeAttributeEscaped("title", oControl.getTitle());
	 	rm.write(">");
	 		rm.renderControl(oControl._oTitle);
	 	rm.write("</div>");	 	
 	}
};

/**
 * Renders the HTML for the description of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose description should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderDescription = function(rm, oControl) {
 	if(oControl.getDescription() !== "") {
		rm.write("<div");
		rm.addClass("sapSuiteInfoTileDescTxt");
	 	rm.addClass(oControl.getState());
		rm.addClass(oControl.getSize());
		rm.writeClasses();
		rm.writeAttribute("id", oControl.getId() + "-description-text");
		rm.writeAttributeEscaped("title", oControl.getDescription());
		rm.write(">");
			rm.writeEscaped(oControl.getDescription());
		rm.write("</div>");
 	}
};

/**
 * Renders the HTML for the inner content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose inner content should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderInnerContent = function(rm, oControl) {
	rm.renderControl(oControl.getContent());
};

/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose content should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderContent = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapSuiteInfoTileContent");
	
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.write(">");
		this.renderInnerContent(rm, oControl);
	rm.write("</div>");
};

/**
 * Renders the HTML for the footer text of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer text should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderFooterText = function(rm, oControl) {
    if(oControl.getFooter() !== "") {
            rm.writeEscaped(oControl.getFooter());          
    }
};

/**
 * Renders the HTML for the footer tooltip of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer tooltip should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderFooterTooltip = function(rm, oControl) {
    rm.writeAttributeEscaped("title", oControl.getFooter());
};


/**
 * Renders the HTML for the footer of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.renderFooter = function(rm, oControl) {
	// footer text div
	var sState = oControl.getState();
	rm.write("<div");
	rm.addClass("sapSuiteInfoTileFtrTxt");

	rm.addClass(oControl.getSize());
	rm.addClass(oControl.getState());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-footer-text");
	if(sState == sap.suite.ui.commons.LoadState.Loaded) {
	    this.renderFooterTooltip(rm, oControl);
	}
	rm.write(">");
	switch(sState) {
		case sap.suite.ui.commons.LoadState.Loading:
				var oBusy = new sap.ui.core.HTML({
					content:"<div class='sapSuiteInfoTileLoading'><div>"
				});
				oBusy.setBusyIndicatorDelay(0);
				oBusy.setBusy(true);
				rm.renderControl(oBusy);
			break;
		case sap.suite.ui.commons.LoadState.Failed:
			rm.renderControl(oControl._oWarningIcon);
			
			rm.write("<span");
			rm.writeAttribute("id", oControl.getId() + "-failed-text");
			rm.addClass("sapSuiteInfoTileFtrFldTxt");
			rm.writeClasses();
			rm.write(">");
					rm.writeEscaped(oControl._sFailedToLoad);
			rm.write("</span>");
			break;
		default:
		    this.renderFooterText(rm, oControl);
	}
	rm.write("</div>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.InfoTileRenderer.render = function(rm, oControl) { 
	 // write the HTML into the render manager
	 var sTooltip = oControl.getTooltip_AsString();
	 rm.write("<div");
	 rm.writeControlData(oControl);
	 
	 if(sTooltip) {
		 rm.writeAttributeEscaped("title", sTooltip);
	 }
	 
	 rm.addClass("sapSuiteInfoTile");
	 rm.addClass(oControl.getSize());
	 rm.addClass(oControl.getState());
	 rm.writeClasses();
	 rm.writeAttribute("tabindex", "0");
	 rm.write(">");
		this.renderTitle(rm, oControl);
		this.renderDescription(rm, oControl);
		this.renderContent(rm, oControl);
		this.renderFooter(rm, oControl);
	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/InfoTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.JamContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.JamContentRenderer");

/**
 * @class JamContent renderer. 
 * @static
 */
sap.suite.ui.commons.JamContentRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.JamContentRenderer.render = function(oRm, oControl){ 
    var sSize = oControl.getSize();
    var sSubheader = oControl.getSubheader(); 
    var sValue = oControl.getValue();
    var sTooltip = oControl.getTooltip_AsString();

    oRm.write("<div");
    oRm.writeControlData(oControl);
	 
    oRm.writeAttributeEscaped("title", sTooltip);    
    oRm.writeAttribute("id", oControl.getId() + "-jam-content");
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + sTooltip ));
    
    oRm.addClass(sSize);
    oRm.addClass("sapSuiteUiCommonsJC");
	if (oControl.hasListeners("press")) { 
		oRm.writeAttribute("tabindex", "0");
		oRm.addClass("sapSuiteUiCommonsPointer");
    }
    oRm.writeClasses();
    oRm.write(">");
   
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-value");
    oRm.addClass("sapSuiteUiCommonsJCValue");
    oRm.addClass(sSize);
    oRm.addClass(oControl.getValueColor());
    oRm.writeClasses();
    oRm.write(">");
    var iChar = oControl.getTruncateValueTo();
    //Control shows only iChar characters. If the last shown character is decimal separator - 
    //show only first N-1 characters. So "144.5" is shown like "144" and not like "144.".
    if (sValue.length >= iChar && (sValue[iChar-1] === "." || sValue[iChar-1] === ",")) {
        oRm.writeEscaped(sValue.substring(0, iChar-1));
    } else {
        oRm.writeEscaped(sValue ? sValue.substring(0,iChar) : "");
    }
    oRm.write("</div>");

    oRm.write("<div");
    oRm.addClass("sapSuiteUiCommonsJCCTxt");
    oRm.addClass(sSize);
    oRm.writeClasses();
    oRm.write(">");
	oRm.renderControl(oControl._oCText);
    oRm.write("</div>");
    
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-subheader");
    oRm.addClass("sapSuiteUiCommonsJCSbh");
    oRm.addClass(sSize);
    oRm.writeClasses();
    oRm.write(">");
    oRm.writeEscaped(sSubheader);
    oRm.write("</div>");
    oRm.write("</div>");
    
};

}; // end of sap/suite/ui/commons/JamContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.KpiTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.KpiTileRenderer");

/**
 * @class KpiTile renderer.
 * @static
 */
sap.suite.ui.commons.KpiTileRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.KpiTileRenderer.render = function(oRm, oControl) {
    var sTooltip = oControl.getTooltip_AsString();
    oRm.write("<div");
    oRm.writeControlData(oControl);
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
    oRm.addClass("sapSuiteKTile");
    oRm.writeClasses();
    oRm.write(">");
        oRm.write("<div");
        oRm.addClass("sapSuiteKTileBorder");
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-value");
        oRm.addClass("sapSuiteKTileValue");
        oRm.addClass("sapSuiteKTileStatus" + oControl.getValueStatus());
        if (oControl.getDoubleFontSize()) {
            oRm.addClass("sapSuiteKTileValueLargeText");
        } else {
            oRm.addClass("sapSuiteKTileValueSmallText");
        }
        oRm.writeClasses();
        if (!sTooltip) {
        	oRm.writeAttributeEscaped("title", oControl.getValueScale() ? oControl.getValue() + ", " + oControl.getValueScale() : oControl.getValue());
        }
        oRm.write(">");
            oRm.writeEscaped(oControl.getValue());

        if (oControl.getValueScale()) {
            oRm.write("<span");
            oRm.writeAttribute("id", oControl.getId() + "-value-scale");
            oRm.addClass("sapSuiteKTileScale");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl.getValueScale());
            oRm.write("</span>");
        }
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-desc");
        oRm.addClass("sapSuiteKTileDesc");
        
        oRm.writeClasses();
        var sBottomText = "";
        if (oControl.getValueUnit()) {
            sBottomText += oControl.getValueUnit()+", ";
        }
        sBottomText += oControl.getDescription();
        
        if (!sTooltip) {
        	oRm.writeAttributeEscaped("title", sBottomText);
        }
        oRm.write(">");
            oRm.writeEscaped(sBottomText);
        oRm.write("</div>");
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/KpiTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LaunchTileRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.LaunchTileRenderer");

/**
 * @class LaunchTile renderer.
 * @static
 */
sap.suite.ui.commons.LaunchTileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.LaunchTileRenderer.render = function(oRm, oLaunchTile) {

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
	var sAriaLabel = "";

	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oLaunchTile);
	oRm.addClass("sapSuiteUiCommonsLaunchTile");
	oRm.addClass("sapSuiteUiCommonsPointer");
	oRm.writeAttribute("tabindex", "0");
	oRm.writeClasses();

	if (oLaunchTile.getTooltip_AsString()) {
		sAriaLabel = oLaunchTile.getTooltip_AsString();
		oRm.writeAttributeEscaped("title", oLaunchTile.getTooltip_AsString());
	} else {
		sAriaLabel = oResBundle.getText("LAUNCHTILE_LAUNCH") + " " + oLaunchTile.getTitle();
	}

	// ARIA
	oRm.writeAccessibilityState(oLaunchTile, {
		role : 'link',
		live : 'assertive',
		label : sAriaLabel
	});

	oRm.write(">"); // tile element

	oRm.write('<div id="' + oLaunchTile.getId() + '-launchTileText"');
	oRm.addClass("sapSuiteUiCommonsLaunchTileTitle");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oLaunchTile.getTitle());
	oRm.write("</div>");

	// Container for icon
	oRm.write('<div id="' + oLaunchTile.getId() + '-launchTileIcon"'); // Start icon container
	oRm.addClass("sapSuiteUiCommonsLaunchTileIcon");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oLaunchTile._iconImage);
	oRm.write("</div>"); // end icon container

	oRm.write("</div>"); // end launch tile
};

}; // end of sap/suite/ui/commons/LaunchTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LinkActionSheetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.suite.ui.commons.LinkActionSheetRenderer");
jQuery.sap.require('sap.m.ActionSheetRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class LinkActionSheet renderer. 
 * @static
 */
sap.suite.ui.commons.LinkActionSheetRenderer = sap.ui.core.Renderer.extend(sap.m.ActionSheetRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.LinkActionSheetRenderer.render = function(oRm, oControl){ 
    var aActionItems = oControl.getItems(), i, bMixedButtons=false;
        
    for(i = 0 ; i < aActionItems.length ; i++) {
        if(aActionItems[i].getIcon && aActionItems[i].getIcon()){
            bMixedButtons = true;
            break;
        }
    }
        
    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMActionSheet");
    oRm.addClass("sapUILinkActionSheet");
    if(bMixedButtons){
        oRm.addClass("sapMActionSheetMixedButtons");
    }
    oRm.writeClasses();
        
    var sTooltip = oControl.getTooltip_AsString();
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
        
    oRm.write(">");
        
    for(i = 0 ; i < aActionItems.length ; i++){
        if (aActionItems[i].getType) { // if this is a button
            var oButton = aActionItems[i];
            oButton.addStyleClass("sapMActionSheetButton");
            oButton.addStyleClass("sapUILinkActionSheetButton");
            oRm.renderControl(oButton);
        } else if (aActionItems[i].getHref) { // if this is a link
            oRm.renderControl(aActionItems[i].addStyleClass("sapUILinkActionSheetLink"));
        }
    }
         
    if((jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)) && oControl.getShowCancelButton()){
        oRm.renderControl(oControl._getCancelButton());
    }
        
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/LinkActionSheetRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MicroAreaChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChartRenderer");

/**
 * @class MicroAreaChart renderer. 
 * @static
 */
sap.suite.ui.commons.MicroAreaChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.MicroAreaChartRenderer.render = function(oRm, oControl) {
	function fnWriteLbl(oLabel, sId, sClass, sType) {
		var sLabel = oLabel ? oLabel.getLabel() : "";
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + sId);
		
		if (oLabel) {
			oRm.addClass(oLabel.getColor());
		}
		
		oRm.addClass("sapSuiteMacLbl");
		oRm.addClass(sClass);
		oRm.addClass(sType);
		oRm.writeClasses();
		oRm.write(">");
			oRm.writeEscaped(sLabel);
		oRm.write("</div>");
	};
	
    var sTooltip = oControl.getTooltip_AsString();
    
    var sTopLblType = ((oControl.getView() == "Normal" && oControl.getFirstYLabel() && oControl.getFirstYLabel().getLabel()) ? "L" : "")
    	+ ((oControl.getMaxLabel() && oControl.getMaxLabel().getLabel()) ? "C" : "")
    	+ ((oControl.getView() == "Normal" && oControl.getLastYLabel() && oControl.getLastYLabel().getLabel()) ? "R" : "");
    	
    var sBtmLblType = ((oControl.getView() == "Normal" && oControl.getFirstXLabel() && oControl.getFirstXLabel().getLabel()) ? "L" : "")
    	+ ((oControl.getMinLabel() && oControl.getMinLabel().getLabel()) ? "C" : "")
    	+ ((oControl.getView() == "Normal" && oControl.getLastXLabel() && oControl.getLastXLabel().getLabel()) ? "R" : "");

    var bLeftLbls, bRightLbls;
    bRightLbls = bLeftLbls = oControl.getView() == "Wide";
    
	oRm.write("<div");
		oRm.writeControlData(oControl);
		if (sTooltip) {
	        oRm.writeAttributeEscaped("title", sTooltip);
	    }
		oRm.addStyle("width", oControl.getWidth());
        oRm.addStyle("height", oControl.getHeight());
        oRm.writeStyles();
        oRm.writeAttribute("role", "presentation");
        oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + sTooltip ));
		oRm.addClass("sapSuiteMac");
		if (oControl.hasListeners("press")) {    
			oRm.addClass("sapSuiteUiCommonsPointer");
			oRm.writeAttribute("tabindex", "0");
	    }
	    
        if (sTopLblType) {
			oRm.addClass("topLbls");
		}
		if (sBtmLblType) {
			oRm.addClass("btmLbls");
		}
			
		oRm.writeClasses();
		oRm.write(">");
			if (sTopLblType) {
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-top-labels");
				oRm.addClass("sapSuiteMacLabels");
				oRm.addClass("Top");
				oRm.writeClasses();
				oRm.write(">");
					fnWriteLbl(oControl.getFirstYLabel(), "-top-left-lbl", "Left", sTopLblType);
					fnWriteLbl(oControl.getMaxLabel(), "-top-center-lbl", "Center", sTopLblType);
					fnWriteLbl(oControl.getLastYLabel(), "-top-right-lbl", "Right", sTopLblType);				
				oRm.write("</div>");
			}
			
			if (bLeftLbls) {
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-left-labels");
				oRm.addClass("sapSuiteMacSideLabels");
				oRm.addClass("Left");
				oRm.writeClasses();
				oRm.write(">");
					fnWriteLbl(oControl.getFirstYLabel(), "-top-left-lbl", "Top", "Left");
					fnWriteLbl(oControl.getFirstXLabel(), "-btm-left-lbl", "Btm", "Left");				
				oRm.write("</div>");
			}
			
			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-canvas-cont");
            oRm.addClass("sapSuiteMacCanvas");
            oRm.writeClasses();
            oRm.write(">");
				oRm.write("<canvas");
	            oRm.writeAttribute("id", oControl.getId() + "-canvas");
				oRm.addStyle("width", "100%");
		        oRm.addStyle("height", "100%");
		        oRm.writeStyles();
				oRm.write("></canvas>");
			oRm.write("</div>");
			
			if (bRightLbls) {
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-right-labels");
				oRm.addClass("sapSuiteMacSideLabels");
				oRm.addClass("Right");
				oRm.writeClasses();
				oRm.write(">");
					fnWriteLbl(oControl.getLastYLabel(), "-top-right-lbl", "Top", "Right");
					fnWriteLbl(oControl.getLastXLabel(), "-btm-right-lbl", "Btm", "Right");				
				oRm.write("</div>");
			}
			
			if (sBtmLblType) {
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-bottom-labels");
				oRm.addClass("sapSuiteMacLabels");
				oRm.addClass("Btm");
				oRm.writeClasses();
				oRm.write(">");
					fnWriteLbl(oControl.getFirstXLabel(), "-btm-left-lbl", "Left", sBtmLblType);
					fnWriteLbl(oControl.getMinLabel(), "-btm-center-lbl", "Center", sBtmLblType);
					fnWriteLbl(oControl.getLastXLabel(), "-btm-right-lbl", "Right", sBtmLblType);
				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-css-helper");
			oRm.addStyle("display", "none");
			oRm.writeStyles();
			oRm.write("></div>");

	oRm.write("</div>");
};
}; // end of sap/suite/ui/commons/MicroAreaChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MonitoringContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.MonitoringContentRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class MonitoringContent renderer. 
 * @static
 */
sap.suite.ui.commons.MonitoringContentRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.MonitoringContentRenderer.render = function(rm, oControl){ 
    var sSize = oControl.getSize();
    var sValue = oControl.getValue();
    var sState = oControl.getState();
    
    var sTooltip = oControl.getTooltip_AsString();

    rm.write("<div");
    rm.writeControlData(oControl);
	 
	 if(sTooltip) {
		 rm.writeAttributeEscaped("title", sTooltip);
	 }
    
    if(oControl.getAnimateTextChange()) {
	    rm.addStyle("opacity", "0.25");
	    rm.writeStyles();
    }
    
    rm.addClass(sSize);
    rm.addClass("sapSuiteUiCommonsMC");
	if (oControl.hasListeners("press")) {    
		rm.addClass("sapSuiteUiCommonsPointer");
    }
    rm.writeClasses();
	rm.writeAttribute("tabindex", "0");
    rm.write(">");
           
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-value");
    rm.addClass("sapSuiteUiCommonsMCValue");
    rm.addClass(sSize);
    rm.addClass(sState);
    rm.writeClasses();
    rm.write(">");
    //Control shows only 4 characters. If last shown character is decimal separator - 
    //show only first 3 characters. So "144.5" is shown like "144" and not like "144.".
    if (sValue.length >= 4 && (sValue[3] === "." || sValue[3] === ",")) {
        rm.writeEscaped(sValue.substring(0, 3));
    } else {
        rm.writeEscaped(sValue ? sValue.substring(0,4) : "0");
    }
    rm.write("</div>");
    
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-icon-container");
    rm.addClass("sapSuiteUiCommonsMCIcon");
    rm.addClass(sSize);
    rm.addClass(sState);
    rm.writeClasses();
    rm.write(">");
    rm.renderControl(oControl._oIcon);
    rm.write("</div>");

    rm.write("</div>");
    
};

}; // end of sap/suite/ui/commons/MonitoringContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MonitoringTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.MonitoringTileRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class MonitoringTile renderer. 
 * @static
 */
sap.suite.ui.commons.MonitoringTileRenderer = sap.ui.core.Renderer.extend(sap.suite.ui.commons.InfoTileRenderer);

/**
 * Renders the HTML for the footer text of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer text should be rendered
 */
sap.suite.ui.commons.MonitoringTileRenderer.renderFooterText = function(oRm, oControl) {
    oRm.write("<span");
    oRm.writeAttribute("id", oControl.getId() + "-footer-text");
    oRm.addClass("sapSuiteUiCommonsMTFooterText");
    oRm.addClass(oControl.getFooterColor());
    oRm.writeClasses();
    oRm.write(">");
    oRm.writeEscaped(oControl.getFooter());
    oRm.write("</span>");
};


}; // end of sap/suite/ui/commons/MonitoringTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NewsContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.NewsContentRenderer");

/**
 * @class NewsContent renderer. 
 * @static
 */
sap.suite.ui.commons.NewsContentRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NewsContentRenderer.render = function(oRm, oControl){ 
    var sSize = oControl.getSize();
    var sSubheader = oControl.getSubheader(); 
    var sTooltip = oControl.getTooltip_AsString();

    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.writeAttributeEscaped("title", sTooltip);
    oRm.writeAttribute("id", oControl.getId() + "-news-content");
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + sTooltip ));
        
    oRm.addClass(sSize);
    oRm.addClass("sapSuiteUiCommonsNwC");
	if (oControl.hasListeners("press")) {
		oRm.addClass("sapSuiteUiCommonsPointer");
		oRm.writeAttribute("tabindex", "0");
    }
    oRm.writeClasses();
    oRm.write(">");
   
    oRm.write("<div");
    oRm.addClass("sapSuiteUiCommonsNwCCTxt");
    oRm.addClass(sSize);
    oRm.writeClasses();
    oRm.write(">");
	oRm.renderControl(oControl._oCText);
    oRm.write("</div>");
    
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-subheader");
    oRm.addClass("sapSuiteUiCommonsNwCSbh");
    oRm.addClass(sSize);
    oRm.writeClasses();
    oRm.write(">");
    oRm.writeEscaped(sSubheader);
    oRm.write("</div>");
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/NewsContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeederRenderer");

/**
 * @class NoteTakerFeeder renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerFeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerFeederRenderer.render = function(oRm, oControl){
    var sTooltip = oControl.getTooltip_AsString();
    oRm.write("<div");
    oRm.writeControlData(oControl);
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
    oRm.addClass("sapSuiteUiCommonsNoteTakerFeeder");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "0");
    oRm.writeAccessibilityState(oControl, {
		role : 'region',
		describedby : oControl.getId() + "-header"
	});
    oRm.write(">");

    //write header
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-header");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederHeader");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-header-text");
            oRm.writeAccessibilityState(oControl, {
        		role : 'heading'
            });
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TITLE"));
            oRm.write("</div>");
        oRm.write("</div>");

    //write tag panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-tag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTagPanel");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-left-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederLeftPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oTagButton);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-right-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederRightPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oThumbUpButton);
                oRm.renderControl(oControl._oThumbDownButton);
                oRm.renderControl(oControl._oAddAttachButton);
                oRm.renderControl(oControl._oFileUploader);
            oRm.write("</div>");
        oRm.write("</div>");

        //write attachment panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-attachment-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentPanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-attachment-content");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentContent");
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-name");
                oRm.addClass("sapSuiteUiCommonsNtfAttachmentNamelbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.write("<div");
                    oRm.writeAttribute("id", oControl.getId() + "-attachment-image");
                    oRm.addClass("sapSuiteUiCommonsNtfAttachImg");
                    oRm.writeClasses();
                    oRm.write("/>");
                    oRm.renderControl(oControl._oAttachmentLink);
                oRm.write("</div>"); 
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-loading");
                oRm.addClass("sapSuiteUiCommonsNtfLoadingLbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oAttachmentLoadingLabel);
                oRm.write("</div>");
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-delete");
                oRm.addClass("sapSuiteUiCommonsNtfDeleteBtn");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oDeleteAttachButton);
                oRm.write("</div>");
            oRm.write("</div>"); 
        oRm.write("</div>");
        
    //write title panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-title-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTitlePanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oTitle);
        oRm.write("</div>");

    //write body
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-body");
        if(oControl._oAddAttachButton.getEnabled()) {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBody");            
        } else {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBodySmaller");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oBody);
        oRm.write("</div>");

        oRm.renderControl(oControl._oAddButton);

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-selectTag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
        oRm.addClass("sapUiShd");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-arrow");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagArrow");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-header");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagHeader");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagInput);
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagList);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oAddTagButton);
                oRm.renderControl(oControl._oCancelTagButton);
            oRm.write("</div>");
        oRm.write("</div>");
    oRm.write("</div>");
};
}; // end of sap/suite/ui/commons/NoteTakerFeederRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerRenderer");

/**
 * @class NoteTaker renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerRenderer.render = function(rm, oControl){
    var sTooltip = oControl.getTooltip_AsString();
	rm.write("<div");
	rm.writeControlData(oControl);
    if (sTooltip) {
        rm.writeAttributeEscaped("title", sTooltip);
    }
	rm.addClass("sapSuiteUiCommonsNoteTaker");
	rm.writeClasses();
	rm.writeAttribute("style", "width:" + (oControl.getVisibleNotes() * 350 + 50) + "px");
	rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterPane");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterPane");
        rm.writeClasses();
        rm.write(">");
            // Left section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneLeftSection");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oHomeButton);
                rm.write("<span");
                rm.writeAttribute("id", oControl.getId() + "-filterPane-header");
                rm.addClass("suiteUiNtFilterTitle");
                rm.writeClasses();
                rm.write(">");
                    rm.writeEscaped(oControl._rb.getText("NOTETAKER_FILTER_TITLE") + ":");
                rm.write("</span>");
                rm.renderControl(oControl._oFilterTagButton);
                rm.renderControl(oControl._oFilterThumbUpButton);
                rm.renderControl(oControl._oFilterThumbDownButton);
                rm.renderControl(oControl._oFilterAllButton);
            rm.write("</div>");

            // Right section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneRightSection");
            rm.writeClasses();
            rm.write(">");
                if (oControl.getVisibleNotes() > 1) {
                    rm.renderControl(oControl._oFilterSearchField);
                } else {
                	rm.renderControl(oControl._oSearchButton);
                }
            rm.write("</div>");
        rm.write("</div>");

        rm.renderControl(oControl._carousel);
        
        if (oControl.getVisibleNotes() == 1) {
        	this.searchTextRender(rm, oControl);
		}
        
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterTag-panel");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagPanel");
        rm.addClass("sapUiShd");
        rm.writeClasses();
        rm.write(">");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-arrow");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagArrow");
            rm.writeClasses();
            rm.write(">");
            rm.write("</div>");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-header");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagHeader");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            rm.write("</div>");

            rm.write("<div>");
                rm.renderControl(oControl._oFilterTagList);
            rm.write("</div>");

            rm.write("<div");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagButtons");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oApplyFilterTagButton);
                rm.renderControl(oControl._oCancelFilterTagButton);
            rm.write("</div>");
        rm.write("</div>");
        
	rm.write("</div>");
};

sap.suite.ui.commons.NoteTakerRenderer.searchTextRender = function(rm, oControl){
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-search-panel");
    rm.addClass("sapSuiteUiCommonsNoteTakerSearchPanel");
    rm.addClass("sapUiShd");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-search-arrow");
        rm.addClass("sapSuiteUiCommonsNoteTakerSearchArrow");
        rm.writeClasses();
        rm.write(">");
        rm.write("</div>");
        
        rm.write("<div>");
        rm.renderControl(oControl._oFilterSearchField);
        rm.write("</div>");
    rm.write("</div>");
};	

}; // end of sap/suite/ui/commons/NoteTakerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NumericContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.NumericContentRenderer");

/**
 * @class NumericContent renderer. 
 * @static
 */
sap.suite.ui.commons.NumericContentRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NumericContentRenderer.render = function(oRm, oControl) {
	var sEmptyValue = oControl.getNullifyValue() ? "0" : "";
    var sSize = oControl.getSize();
    var sValue = oControl.getValue();
    var sIndicator = oControl.getIndicator();
    var sScale = oControl.getScale();
    var sState = oControl.getState();
    var sColor = oControl.getValueColor();
    var bIndicator = sap.suite.ui.commons.DeviationIndicator.None != sIndicator && "" != sValue;
    var oIcon = oControl._oIcon;
    
	if (oControl.getFormatterValue()) {
		var oFormattedValue = oControl._parseFormattedValue(sValue);
		
		sScale = oFormattedValue.scale;
		sValue = oFormattedValue.value;
	}
	var bScale = sScale && sValue;
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
    oRm.writeAttribute("role", "presentation");
   	oRm.writeAttributeEscaped("aria-label", oControl.getAltText().replace(/\s/g, " ") + (sap.ui.Device.browser.firefox ? "" : " " + oControl.getTooltip_AsString() ));
    
    if(oControl.getAnimateTextChange()) {
	    oRm.addStyle("opacity", "0.25");
    }
    
    if (oControl.getWidth()) {
    	oRm.addStyle("width", oControl.getWidth());
    }
    
    oRm.writeStyles();
    oRm.addClass(sSize);
    oRm.addClass("sapSuiteUiCommonsNC");
	if (oControl.hasListeners("press")) {
		oRm.writeAttribute("tabindex", "0");
		oRm.addClass("sapSuiteUiCommonsPointer");
    }
    oRm.writeClasses();
    

    
    oRm.write(">");

        oRm.write("<div");
        oRm.addClass("sapSuiteUiCommonsNCInner");
        oRm.addClass(sSize);
        oRm.writeClasses();
        oRm.write(">");

	    if (bIndicator || bScale) {
	        oRm.write("<div");
	        oRm.addClass("sapSuiteUiCommonsNCIndScale");
	        oRm.addClass(sSize);
	        oRm.addClass(sState);
	        oRm.writeClasses();
	        oRm.write(">");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-indicator");
	        oRm.addClass("sapSuiteUiCommonsNCIndicator");
	        oRm.addClass(sSize);
	        oRm.addClass(sIndicator);
	        oRm.addClass(sState);
	        oRm.addClass(sColor);
	        oRm.writeClasses();
	        oRm.write("></div>");
		
		    if (bScale) {
		        oRm.write("<div");
		        oRm.writeAttribute("id", oControl.getId() + "-scale");
		        oRm.addClass("sapSuiteUiCommonsNCScale");
		        oRm.addClass(sSize);
		        oRm.addClass(sState);
		        oRm.addClass(sColor);
		        oRm.writeClasses();
		        oRm.write(">");
		        oRm.writeEscaped(sScale.substring(0,3));
		        oRm.write("</div>");
		    }
	        oRm.write("</div>");
	    }
	
        if (oIcon) {
        	oIcon.addStyleClass(sSize);
        	oIcon.addStyleClass(sState);
            oRm.renderControl(oIcon);
        	oIcon.removeStyleClass(sSize);
        	oIcon.removeStyleClass(sState);
        }
		    
	    oRm.write("<div");
	    
	    oRm.writeAttribute("id", oControl.getId() + "-value");
	    oRm.addClass("sapSuiteUiCommonsNCValue");
	    oRm.addClass(sColor);
	    oRm.addClass(sSize);
	    oRm.addClass(sState);
	    oRm.writeClasses();
	    oRm.write(">");
		    oRm.write("<div");
		    oRm.writeAttribute("id", oControl.getId() + "-value-scr");
		    oRm.addClass("sapSuiteUiCommonsNCValueScr");
		    oRm.addClass(sSize);
		    oRm.writeClasses();
		    oRm.write(">");
		    
		    var iChar = oControl.getTruncateValueTo();
		    //Control shows only iChar characters. If the last shown character is decimal separator - 
		    //show only first N-1 characters. So "144.5" is shown like "144" and not like "144.".
		    if (sValue.length >= iChar && (sValue[iChar-1] === "." || sValue[iChar-1] === ",")) {
		        oRm.writeEscaped(sValue.substring(0, iChar-1));
		    } else {
		        oRm.writeEscaped(sValue ? sValue.substring(0,iChar) : sEmptyValue);
		    }
	    	oRm.write("</div>");
	    	oRm.write("</div>");
	    	
	    oRm.write("</div>");
    oRm.write("</div>");
    
};

}; // end of sap/suite/ui/commons/NumericContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NumericTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NumericTileRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class NumericTile renderer. 
 * @static
 */
sap.suite.ui.commons.NumericTileRenderer = sap.ui.core.Renderer.extend(sap.suite.ui.commons.InfoTileRenderer);

sap.suite.ui.commons.NumericTileRenderer._getFooterText = function(oRm, oControl) {
    var sFooter = oControl.getFooter();
    var sUnit = oControl.getUnit();
    return sUnit 
         ? (sap.ui.getCore().getConfiguration().getRTL() 
                ? ((sFooter ? sFooter + " ," : "") + sUnit) 
                : (sUnit + (sFooter ? ", " + sFooter : ""))) 
         : sFooter;                     
};

/**
 * Renders the HTML for the footer tooltip of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer tooltip should be rendered
 */
sap.suite.ui.commons.NumericTileRenderer.renderFooterTooltip = function(oRm, oControl) {
    oRm.writeAttributeEscaped("title", this._getFooterText(oRm, oControl));
};


/**
 * Renders the HTML for the footer text of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer text should be rendered
 */
sap.suite.ui.commons.NumericTileRenderer.renderFooterText = function(oRm, oControl) {
    oRm.writeEscaped(this._getFooterText(oRm, oControl));
};


}; // end of sap/suite/ui/commons/NumericTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.PictureZoomInRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.PictureZoomInRenderer");

/**
 * @class PictureZoomIn renderer. 
 * @static
 */
sap.suite.ui.commons.PictureZoomInRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.PictureZoomInRenderer.render = function(oRm, oControl){ 
	// write the HTML into the render manager
	
	
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteUiCommonsPictureZoomIn");
	oRm.writeClasses();
	oRm.writeAttribute("role", "img");
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttribute("title", sTooltip);
	}
	oRm.write(">");
    if (oControl.getBusyIndicator()) {
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-busy");
        oRm.addClass("sapSuiteUiCommonsPictureZoomInBusy");
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl.getBusyIndicator());
        oRm.write("</div>");
    }
	oRm.renderControl(oControl._oImage);
	oRm.renderControl(oControl._oDescription);
	oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/PictureZoomInRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnectionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowConnectionRenderer");

/**
 * @class ProcessFlowConnection renderer.
 * @static
 */
sap.suite.ui.commons.ProcessFlowConnectionRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowConnectionRenderer.render = function(oRm, oControl) { // EXC_SAP_006_1, EXC_JSHINT_046, EXC_JSHINT_047
  var connection = oControl._traverseConnectionData();
  var zoomLevel = oControl.getZoomLevel();

  oRm.write("<div id = \"" + oControl.getId() + "\">");
  if (connection.hasOwnProperty("left") && connection.left.draw &&
    connection.hasOwnProperty("right") && connection.right.draw &&
    connection.hasOwnProperty("top") && !connection.top.draw &&
    connection.hasOwnProperty("bottom") && !connection.bottom.draw) {
    // horizontal connection

    // 1st row
    oRm.write("<div");
    oRm.addClass("boxWideWidth");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxTopZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxTopZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxTopZoom4Height");
        break;
      default:
        oRm.addClass("boxTopZoom2Height");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // 2nd row
    oRm.write("<div");
    if (connection.arrow) {
      // connection column
      oRm.addClass("parentPosition");
      switch (zoomLevel) {
        case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
          oRm.addClass("boxWideArrowZoom1Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
          oRm.addClass("boxWideArrowZoom3Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
          oRm.addClass("boxWideArrowZoom4Width");
          break;
        default:
          oRm.addClass("boxWideArrowZoom2Width");
      }
    } else {
      oRm.addClass("boxWideWidth");
    }
    oRm.addClass("boxMiddleBorderHeight");
    oRm.addClass("borderBottom");
    if (connection.right.state === "Planned") {
      oRm.addClass("borderBottomStatePlanned");
    } else {
      oRm.addClass("borderBottomStateCreated");
    }
    if (connection.right.display === "Highlighted") {
      oRm.addClass("borderBottomDisplayHighlighted");
      oRm.addClass("displayHighlighted");
    } else if (connection.right.display === "Dimmed") {
      oRm.addClass("borderBottomDisplayDimmed");
      oRm.addClass("displayDimmed");
    } else {
      oRm.addClass("borderBottomDisplayRegular");
      oRm.addClass("displayRegular");
    }
    oRm.writeClasses();
    oRm.write(">");
      if (connection.arrow) {
        oRm.write("<div");
        oRm.addClass("arrowRight");
        if (connection.right.display === "Highlighted") {
          oRm.addClass("borderLeftDisplayHighlighted");
        } else if (connection.right.display === "Dimmed") {
          oRm.addClass("borderLeftDisplayDimmed");
        } else {
          oRm.addClass("borderLeftDisplayRegular");
        }
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");
      }
    oRm.write("</div>");

    // 3rd row
    // omitted

  } else if (connection.hasOwnProperty("left") && !connection.left.draw &&
    connection.hasOwnProperty("right") && !connection.right.draw &&
    connection.hasOwnProperty("top") && connection.top.draw &&
    connection.hasOwnProperty("bottom") && connection.bottom.draw) {
    // vertical connection

    // left column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxZoom1Width");
        oRm.addClass("boxWideZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxZoom3Width");
        oRm.addClass("boxWideZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxZoom4Width");
        oRm.addClass("boxWideZoom4Height");
        break;
      default:
        oRm.addClass("boxZoom2Width");
        oRm.addClass("boxWideZoom2Height");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // middle column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    oRm.addClass("boxMiddleBorderWidth");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxWideZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxWideZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxWideZoom4Height");
        break;
      default:
        oRm.addClass("boxWideZoom2Height");
    }
    oRm.addClass("borderLeft");
    if (connection.top.state === "Planned") {
      oRm.addClass("borderLeftStatePlanned");
    } else {
      oRm.addClass("borderLeftStateCreated");
    }
    if (connection.top.display === "Highlighted") {
      oRm.addClass("borderLeftDisplayHighlighted");
      oRm.addClass("displayHighlighted");
    } else if (connection.top.display === "Dimmed") {
      oRm.addClass("borderLeftDisplayDimmed");
      oRm.addClass("displayDimmed");
    } else {
      oRm.addClass("borderLeftDisplayRegular");
      oRm.addClass("displayRegular");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // right column
    // omitted

    // reset
    oRm.write("<div");
    oRm.addClass("floatClear");
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

  } else {
    // other connections

    // 1st row

    // left column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxZoom1Width");
        oRm.addClass("boxTopZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxZoom3Width");
        oRm.addClass("boxTopZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxZoom4Width");
        oRm.addClass("boxTopZoom4Height");
        break;
      default:
        oRm.addClass("boxZoom2Width");
        oRm.addClass("boxTopZoom2Height");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // middle column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxTopZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxTopZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxTopZoom4Height");
        break;
      default:
        oRm.addClass("boxTopZoom2Height");
    }
    if (connection.hasOwnProperty("top") && connection.top.draw) {
      oRm.addClass("boxMiddleBorderWidth");
      oRm.addClass("borderLeft");
      if (connection.top.state === "Planned") {
        oRm.addClass("borderLeftStatePlanned");
      } else {
        oRm.addClass("borderLeftStateCreated");
      }
      if (connection.top.display === "Highlighted") {
        oRm.addClass("borderLeftDisplayHighlighted");
        oRm.addClass("displayHighlighted");
      } else if (connection.top.display === "Dimmed") {
        oRm.addClass("borderLeftDisplayDimmed");
        oRm.addClass("displayDimmed");
      } else {
        oRm.addClass("borderLeftDisplayRegular");
        oRm.addClass("displayRegular");
      }
    } else {
      oRm.addClass("boxMiddleWidth");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // right column
    // omitted

    // 2nd row
    oRm.write("<div");
    oRm.addClass("floatClear");
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // left column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxZoom1Width");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxZoom3Width");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxZoom4Width");
        break;
      default:
        oRm.addClass("boxZoom2Width");
    }
    if (connection.hasOwnProperty("left") && connection.left.draw) {
      oRm.addClass("boxMiddleBorderHeight");
      oRm.addClass("borderBottom");
      if (connection.left.state === "Planned") {
        oRm.addClass("borderBottomStatePlanned");
      } else {
        oRm.addClass("borderBottomStateCreated");
      }
      if (connection.left.display === "Highlighted") {
        oRm.addClass("borderBottomDisplayHighlighted");
        oRm.addClass("displayHighlighted");
      } else if (connection.left.display === "Dimmed") {
        oRm.addClass("borderBottomDisplayDimmed");
        oRm.addClass("displayDimmed");
      } else {
        oRm.addClass("borderBottomDisplayRegular");
        oRm.addClass("displayRegular");
      }
    } else {
      oRm.addClass("boxMiddleHeight");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // middle column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    oRm.addClass("boxMiddleWidth");
    oRm.addClass("boxMiddleBorderHeight");
    if ((connection.hasOwnProperty("left") && connection.left.draw) ||
      (connection.hasOwnProperty("right") && connection.right.draw) ||
      (connection.hasOwnProperty("top") && connection.top.draw) ||
      (connection.hasOwnProperty("bottom") && connection.bottom.draw)) {
      oRm.addClass("borderBottom");
      oRm.addClass("borderBottomStateCreated");
      if (connection.right.display === "Highlighted" ||
        connection.top.display === "Highlighted" ||
        connection.left.display === "Highlighted" ||
        connection.bottom.display === "Highlighted") {
        oRm.addClass("borderBottomDisplayHighlighted");
        oRm.addClass("displayHighlighted");
      } else if (connection.right.display === "Dimmed" ||
        connection.top.display === "Dimmed" ||
        connection.left.display === "Dimmed" ||
        connection.bottom.display === "Dimmed") {
        oRm.addClass("borderBottomDisplayDimmed");
        oRm.addClass("displayDimmed");
      } else {
        oRm.addClass("borderBottomDisplayRegular");
        oRm.addClass("displayRegular");
      }
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // right column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    if (connection.arrow) {
      oRm.addClass("parentPosition");
      switch (zoomLevel) {
        case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
          oRm.addClass("boxArrowZoom1Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
          oRm.addClass("boxArrowZoom3Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
          oRm.addClass("boxArrowZoom4Width");
          break;
        default:
          oRm.addClass("boxArrowZoom2Width");
      }
    } else {
      switch (zoomLevel) {
        case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
          oRm.addClass("boxZoom1Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
          oRm.addClass("boxZoom3Width");
          break;
        case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
          oRm.addClass("boxZoom4Width");
          break;
        default:
          oRm.addClass("boxZoom2Width");
      }
    }
    if (connection.hasOwnProperty("right") && connection.right.draw) {
      oRm.addClass("boxMiddleBorderHeight");
      oRm.addClass("borderBottom");
      if (connection.right.state === "Planned") {
        oRm.addClass("borderBottomStatePlanned");
      } else {
        oRm.addClass("borderBottomStateCreated");
      }
      if (connection.right.display === "Highlighted") {
        oRm.addClass("borderBottomDisplayHighlighted");
        oRm.addClass("displayHighlighted");
      } else if (connection.right.display === "Dimmed") {
        oRm.addClass("borderBottomDisplayDimmed");
        oRm.addClass("displayDimmed");
      } else {
        oRm.addClass("borderBottomDisplayRegular");
        oRm.addClass("displayRegular");
      }
    } else {
      oRm.addClass("boxMiddleHeight");
    }
    oRm.writeClasses();
    oRm.write(">");
      if (connection.arrow) {
        oRm.write("<div");
        oRm.addClass("arrowRight");
        if (connection.hasOwnProperty("right")) {
          if (connection.right.display === "Highlighted") {
            oRm.addClass("borderLeftDisplayHighlighted");
          } else if (connection.right.display === "Dimmed") {
            oRm.addClass("borderLeftDisplayDimmed");
          } else {
            oRm.addClass("borderLeftDisplayRegular");
          }
        }
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");
      }
    oRm.write("</div>");

    // 3rd row
    oRm.write("<div");
    oRm.addClass("floatClear");
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // left column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxZoom1Width");
        oRm.addClass("boxBottomZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxZoom3Width");
        oRm.addClass("boxBottomZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxZoom4Width");
        oRm.addClass("boxBottomZoom4Height");
        break;
      default:
        oRm.addClass("boxZoom2Width");
        oRm.addClass("boxBottomZoom2Height");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // middle column
    oRm.write("<div");
    oRm.addClass("floatLeft");
    switch (zoomLevel) {
      case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
        oRm.addClass("boxBottomZoom1Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
        oRm.addClass("boxBottomZoom3Height");
        break;
      case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
        oRm.addClass("boxBottomZoom4Height");
        break;
      default:
        oRm.addClass("boxBottomZoom2Height");
    }
    if (connection.hasOwnProperty("bottom") && connection.bottom.draw) {
      oRm.addClass("boxMiddleBorderWidth");
      oRm.addClass("borderLeft");
      if (connection.bottom.state === "Planned") {
        oRm.addClass("borderLeftStatePlanned");
      } else {
        oRm.addClass("borderLeftStateCreated");
      }
      if (connection.bottom.display === "Highlighted") {
        oRm.addClass("borderLeftDisplayHighlighted");
        oRm.addClass("displayHighlighted");
      } else if (connection.bottom.display === "Dimmed") {
        oRm.addClass("borderLeftDisplayDimmed");
        oRm.addClass("displayDimmed");
      } else {
        oRm.addClass("borderLeftDisplayRegular");
        oRm.addClass("displayRegular");
      }
    } else {
      oRm.addClass("boxMiddleWidth");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

    // right column
    // omitted

    // reset
    oRm.write("<div");
    oRm.addClass("floatClear");
    oRm.writeClasses();
    oRm.write(">");
    oRm.write("</div>");

  }
  oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ProcessFlowConnectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer");

/**
 * @class ProcessFlowLaneHeader renderer.
 * @static
 */
sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer.render = function(oRm, oControl) {
    // write the HTML into the render manager
    switch(oControl.getSymbolType()) {
      case sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType.startSymbol:
        this._writeSymbolNodeType(
          oRm
          , oControl
          , "-start"
          , ["suiteUiProcessFlowLaneHeaderStartEndSymbol", "suiteUiProcessFlowLaneHeaderStartSymbol"]
          , ["suiteUiProcessFlowLaneHeaderStartEndSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"]
          , false /* do not draw icon */
          , oControl._isHeaderMode()
        );
        break;
      case sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType.endSymbol:
        this._writeSymbolNodeType(
          oRm
          , oControl
          , "-end"
          , ["suiteUiProcessFlowLaneHeaderStartEndSymbol", "suiteUiProcessFlowLaneHeaderEndSymbol"]
          , ["suiteUiProcessFlowLaneHeaderStartEndSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"]
          , false /* do not draw icon */
          , oControl._isHeaderMode()
        );
        break;
      case sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType.processSymbol:
        this._writeSymbolNodeType(
          oRm
          , oControl
          , "-process"
          , ["suiteUiProcessFlowLaneHeaderProcessSymbol"]
          , ["suiteUiProcessFlowLaneHeaderProcessSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"]
          , true /* draw icon */
          , oControl._isHeaderMode()
        );
        break;
      default:
        this._writeDefaultNodeType(oRm, oControl);
    }
};

/**
 * Node symbol renderer.
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param {String} sId id suffix of the symbol node
 * @param {String[]} aSC array of names of classes for symbol node div element
 * @param {String[]} aCC array of names of classes for the symbol container div element
 * @param {boolean} bDrawIcon true if the icon should be rendered
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer._writeSymbolNodeType = function (oRm, oControl, sId, aSC, aCC, bDrawIcon) { // EXC_JSHINT_034
  oRm.write("<div");
  oRm.writeControlData(oControl);
  aCC.forEach(function(sCClass) {
    oRm.addClass(sCClass);
  });

  oRm.writeClasses();
  oRm.write(">"); // symbol container
    oRm.write("<div"); // symbol
    oRm.writeAttribute("id", oControl.getId() + sId);
    aSC.forEach(function(sSClass) {
      oRm.addClass(sSClass);
    });
    oRm.writeClasses();
    oRm.write(">");
      if(bDrawIcon) {
        var sIconSrc = oControl.getIconSrc();
        if (sIconSrc) {
          var oIcon = oControl._getImage(oControl.getId() + "-lh-icon", sIconSrc);
          oRm.renderControl(oIcon);
        }
      }
    oRm.write("</div>"); // symbol
  oRm.write("</div>"); // symbol container
};

/**
 * Default node renderer.
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer._writeDefaultNodeType = function (oRm, oControl) {  // EXC_SAP_006_1, EXC_JSHINT_046
  oRm.write("<div");
  oRm.writeControlData(oControl);
  oRm.addClass("suiteUiProcessFlowLaneHeaderContainer");
  oRm.addClass("suiteUiProcessFlowLaneHeaderNoSelection");

  oRm.writeClasses();
  oRm.write(">"); // div element for the whole control

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-standard");
    oRm.addClass("suiteUiProcessFlowLaneHeaderBodyContainer");
    oRm.writeClasses();
    oRm.write(">"); // div element for header
      oRm.write("<div");
      oRm.writeAttribute("id", oControl.getId() + "-horizontal-line");
      oRm.addClass("suiteUiProcessFlowLaneHeaderHorizontalLine");
      oRm.writeClasses();
      oRm.write("></div>");

      oRm.write("<svg");
      oRm.writeAttribute("id", oControl.getId() + "-donut-chart");
      oRm.addClass("suiteUiProcessFlowLaneHeaderDonutSvg");
      oRm.writeClasses();
      oRm.write(">");
        oControl._renderDonutPercentages(oRm);
      oRm.write("</svg>"); // div element for the donut chart

      oRm.write("<div");
      oRm.writeAttribute("id", oControl.getId() + "-lh-icon-container");
      oRm.addClass("suiteUiProcessFlowLaneHeaderIconContainer");
      oRm.writeClasses();
      oRm.write(">"); // div element for header

        var sIconSrc = oControl.getIconSrc();
        if (sIconSrc) {
          var oIcon = oControl._getImage(oControl.getId() + "-lh-icon", sIconSrc);
          oIcon.addStyleClass("suiteUiProcessFlowLaneHeaderProcessSymbolIcon");
          oRm.renderControl(oIcon);
        }
      oRm.write("</div>"); // icon container
    oRm.write("</div>"); // body container

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-lh-text-container");
    oRm.addClass("suiteUiProcessFlowLaneHeaderTextContainer");
    oRm.writeClasses();
    oRm.write(">"); // div element for the text container

      oRm.write("<span");
      oRm.writeAttribute("id", oControl.getId() + "-lh-text");
      oRm.addClass("suiteUiProcessFlowLaneHeaderText");
      oRm.writeClasses();
      oRm.write(">"); // div element for the text span
        oRm.writeEscaped(oControl.getText());
      oRm.write("</span>"); // text

    oRm.write("</div>"); // text container

  oRm.write("</div>"); // whole control
};

}; // end of sap/suite/ui/commons/ProcessFlowLaneHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowNodeRenderer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowNodeRenderer");

/**
 * @class ProcessFlowNode renderer.
 * @static
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer = {
};

/*
 * navigation focus is used for the keyboard support
 *
 * business focus comes from outside and just make different visual representation (blue rectangle around). The focus
 * is in the styles represents with the word selected (timing and historical reasons)
 *
 *
 */

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param {integer} nodeLevel of the node (0 - parent node, 1 - upper left (folded corner icon), 2 - top part of the node, 3 - bottom part of the node
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeClasses = function( oRm, oControl, nodeLevel ) { // EXC_SAP_006_1, EXC_JSHINT_047
  switch(nodeLevel) {
    case 0:
      //oRm.writeAttribute("id", oControl.getId() + "-base-container");
      break;
    case 1:
      oRm.writeAttribute("id", oControl.getId() + "-corner-container");
      break;
    case 2:
      oRm.writeAttribute("id", oControl.getId() + "-top-container");
      break;
    case 3:
      oRm.writeAttribute("id", oControl.getId() + "-content-container");
      break;
  }
  if (nodeLevel > 0) {
    // Planned
    switch(oControl.getState() ) {
      case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerPlanned");
        }
        else {
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlannedDashedBorder");
        }
        break;
      case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerPlanned");
        }
        else {
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlannedDashedBorder");
        }
        break;
    }
    if( oControl._getNavigationFocus() ) {
      oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateNavigation");
    }
    // Display state: Focused
    switch( oControl._getDisplayState() ) {
      case sap.suite.ui.commons.ProcessFlowDisplayState.RegularFocused:
      case sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused:
      case sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateSelected");
        }
        else {
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateSelected");
        }
        break;
    }
    // Display state: Regular, Highlighted, Dimmed
    switch( oControl._getDisplayState() ) {
      case sap.suite.ui.commons.ProcessFlowDisplayState.Regular:
      case sap.suite.ui.commons.ProcessFlowDisplayState.RegularFocused:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateRegular");
        }
        else {
            oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateRegular");
        }
        break;
      case sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted:
      case sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateHighlighted");
        }
        else {
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateHighlighted");
        }
        break;
      case sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed:
      case sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused:
        if ((nodeLevel === 1) && (oControl._getFoldedCorner())) {
          oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateDimmed");
        }
        else {
          oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateDimmed");
        }
        break;
    }
  }
  if(nodeLevel === 0) {
    if( oControl._getNavigationFocus() ) {
        oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateNavigation");
    }
    if( oControl._getDisplayState() == sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ) {
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateHighlighted");
    }
  }
  switch( oControl._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel4");
      break;
  }
  if (nodeLevel === 1) {
    if (oControl._getFoldedCorner()) {
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode1FoldedBorderStyle");
    } else {
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode1BorderStyle");
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeBorderStandard");
    }
  } else if (nodeLevel > 1) {
    oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "BorderStyle");
    oRm.addClass("sapSuiteUiCommonsProcessFlowNodeBorderStandard");
  }

  if (((nodeLevel === 1) && (oControl._getFoldedCorner())))  {
    oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerNode1");
  }
  else {
    oRm.addClass("sapSuiteUiCommonsProcessFlowNode" + nodeLevel);
  }
  if (((nodeLevel === 0) && (oControl._getFoldedCorner())))  {
    oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerIndication");
  }

  oRm.writeClasses();
};

/**
 * Renders the HTML shadow borders for the given highlighted node, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param {string} border type: "top", "bottom", "left", "right"
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses = function(oRm, oControl, border) {
  oRm.addClass("shadowedDivCommon");

  switch(border) {
    case "top":
      if (oControl._getFoldedCorner()) {
        oRm.addClass("shadowedDivFoldedCornerBorderTop");
      }
      else {
        oRm.addClass("shadowedDivBorderTop");
      }
      break;
    case "right":
      oRm.addClass("shadowedDivBorderRight");
      break;
    case "bottom":
      oRm.addClass("shadowedDivBorderBottom");
      break;
    case "left":
      if (oControl._getFoldedCorner()) {
        oRm.addClass("shadowedDivFoldedCornerBorderLeft");
      }
      else {
        oRm.addClass("shadowedDivBorderLeft");
      }
      break;
    case "corner":
      if (this._isSafari()) {
        oRm.addClass("shadowedDivFoldedCornerSafari");
      }
      else {
        oRm.addClass("shadowedDivFoldedCorner");
      }
      break;
  }

  oRm.writeClasses();
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeTitleClasses = function( oRm, oControl ) {
  oRm.writeAttribute("id", oControl.getId() + "-title");

  switch( oControl._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel4");
      break;
  }
  oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Title");
  oRm.writeClasses();
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeStateClasses = function( oRm, oControl ) {
   oRm.writeAttribute("id", oControl.getId() + "-state");

   switch( oControl._getZoomLevel() ) {
     case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel1");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel2");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel3");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel4");
       break;
   }
  oRm.addClass("sapSuiteUiCommonsProcessFlowNode3State");
  oRm.writeClasses();
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeIconClasses = function( oRm, oControl ) {
   oRm.writeAttribute("id", oControl.getId() + "-icon-container");

   switch( oControl.getState() ) {
     case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePositive");
       break;
     case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
       break;
     case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
       break;
     case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNeutral");
       break;
     case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
       break;
   }
   switch( oControl._getZoomLevel() ) {
     case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel1");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel2");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel3");
       break;
     case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
       oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel4");
       break;
   }
   oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIcon");
   oRm.writeClasses();
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeStateTextClasses = function(oRm, oControl){
  oRm.writeAttribute("id", oControl.getId() + "-state-text");

  switch( oControl.getState() ) {
    case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePositive");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNeutral");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
      break;
  }
  switch( oControl._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel4");
      break;
  }
  oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateText");
  oRm.writeClasses();
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeText1Classes = function(oRm, oControl){
  oRm.writeAttribute("id", oControl.getId() + "-text1");

  switch( oControl._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel1");
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel2");
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
      break;
  }
  oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Text");
  oRm.writeClasses();
};
/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeText2Classes = function(oRm, oControl){
  oRm.writeAttribute("id", oControl.getId() + "-text2");

  switch( oControl._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
      break;
  }
  oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Text");
  oRm.writeClasses();
};

/*========================================================================================================
 *  RENDERER
 * =======================================================================================================
 */

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @public
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 *
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer.render = function(oRm, oControl){ // EXC_SAP_006_1, EXC_JSHINT_046
  var foldedCornerControl;

  if (oControl._getFoldedCorner()) {
    foldedCornerControl = oControl._getFoldedCornerControl();
  }
  var headerControl = oControl._getHeaderControl();
  var iconControl = oControl._getIconControl();
  var stateControl = oControl._getStateTextControl();
  var text1Control = oControl._getText1Control();
  var text2Control = oControl._getText2Control();

  /*
   in order to be able to display folded corner we have add another four div containers -
    - node1-node4
   node0 - base container contains all subparts
   node1 - corner container contains folded corner
   node2 - top container
   node3 - node components
  */
  // node0
  oRm.write("<div");
  oRm.writeControlData(oControl);
  sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeClasses(oRm, oControl, 0);
  oRm.write(">");
  switch( oControl._getDisplayState() ) {
    case sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted:
    case sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused:
        //border-top shadowing
      oRm.write("<div");
        sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses(oRm, oControl, "top");
      oRm.write("></div>");

      //border-right shadowing
      oRm.write("<div");
        sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses(oRm, oControl, "right");
      oRm.write("></div>");

      //border-bottom shadowing
      oRm.write("<div");
        sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses(oRm, oControl, "bottom");
      oRm.write("></div>");

      //border-left shadowing
      oRm.write("<div");
        sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses(oRm, oControl, "left");
      oRm.write("></div>");

      if (oControl._getFoldedCorner()) {
        //folded corner shadowing
        oRm.write("<div");
          sap.suite.ui.commons.ProcessFlowNodeRenderer.assignShadowClasses(oRm, oControl, "corner");
        oRm.write("></div>");
      }
      break;
  }
    // node1
    oRm.write("<div");
    sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeClasses(oRm, oControl, 1);
    oRm.write(">");
    if (oControl._getFoldedCorner()) {
      oRm.renderControl(foldedCornerControl);
    }
    oRm.write("</div>");
    // node2
    oRm.write("<div");
    sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeClasses(oRm, oControl, 2);
    oRm.write(">");
    oRm.write("</div>");
    // node3
    oRm.write("<div");
    sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeClasses(oRm, oControl, 3);
    oRm.write(">");
      // node3 contents (actual node contents - title, state, texts)
      // title
      oRm.write("<div");
      sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeTitleClasses(oRm, oControl );
      oRm.write(">");
      oRm.renderControl(headerControl);
      oRm.write("</div>");
      // state area
      oRm.write("<div");
      sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeStateClasses(oRm, oControl );
      oRm.write(">");
      // state icon
      oRm.write("<div");
      sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeIconClasses(oRm, oControl);
      oRm.write(">");
      oRm.renderControl(iconControl);
      oRm.write("</div>");
      // state text
      oRm.write("<div");
      sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeStateTextClasses(oRm, oControl);
      oRm.write(">");
      oRm.renderControl(stateControl);
      oRm.write("</div>");
      oRm.write("</div>");
      // end of state
      // text1
    oRm.write("<div");
    sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeText1Classes(oRm, oControl);
    oRm.write(">");
    oRm.renderControl(text1Control);
    oRm.write("</div>");
    // text2
    oRm.write("<div");
    sap.suite.ui.commons.ProcessFlowNodeRenderer.assignNodeText2Classes(oRm, oControl);
    oRm.write(">"); // div element for text2
    oRm.renderControl(text2Control);
    oRm.write("</div>");
    oRm.write("</div>"); // end of node3
  oRm.write("</div>"); // end of node0
};

/**
 * @private
 * @returns {Boolean}
 */
sap.suite.ui.commons.ProcessFlowNodeRenderer._isSafari = function() {
  return /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
};

}; // end of sap/suite/ui/commons/ProcessFlowNodeRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.SplitButtonRenderer");

/**
 * @class SplitButton renderer.
 * @static
 */
sap.suite.ui.commons.SplitButtonRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oSplitButton an object representation of the control that should be rendered
 */
sap.suite.ui.commons.SplitButtonRenderer.render = function(oRm, oSplitButton) {

    // return immediately if control is invisible
    if (!oSplitButton.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oSplitButton);
    oRm.addClass("sapSuiteUiCommonsSplitButton");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oSplitButton._oDefaultActionButton);
    oRm.renderControl(oSplitButton._oMenuButton);
    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/SplitButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThingCollectionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.suite.ui.commons.ThingCollectionRenderer");

/**
 * @class ThingCollection renderer. 
 * @static
 */
sap.suite.ui.commons.ThingCollectionRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ThingCollectionRenderer.render = function(oRm, oControl){
    var sTooltip = oControl.getTooltip_AsString();
	oRm.write("<div");
	oRm.writeControlData(oControl);
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
	oRm.addClass("sapSuiteTc");
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	if (oControl.getMinWidth()) {
	    oRm.addStyle("min-width", oControl.getMinWidth());
	}
	if (oControl.getMinHeight()) {
	    oRm.addStyle("min-height", oControl.getMinHeight());
	}
	oRm.writeStyles();
	oRm.write(">");
        oRm.renderControl(oControl._oRemoveButton);
	
	    oRm.write("<nav");
	    oRm.writeAttribute("id", oControl.getId() + "-nav-prev");
	    oRm.addClass("sapSuiteTcNavPrev");
	    oRm.writeClasses();
	    oRm.write(">");
	    oRm.write("</nav>");
	
	    oRm.write("<div");
	    oRm.writeAttribute("id", oControl.getId() + "-container");
	    oRm.writeAttribute("tabindex", "0");
	    
		oRm.writeAccessibilityState(oControl, {
			role: 'list',
			live: 'assertive',
			disabled: false
		});
	
	    oRm.addClass("sapSuiteTcContainer");
	    oRm.writeClasses();
	    oRm.write(">");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-first");
	        oRm.writeAttribute("aria-hidden", "true");
	        oRm.addClass("sapSuiteTcPrev");
	        oRm.writeClasses();
	        oRm.write(">");
	        oRm.write("</div>");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-second");
            oRm.writeAttribute("aria-hidden", "false");
	        oRm.addClass("sapSuiteTcCenter");
	        oRm.writeClasses();
	        oRm.write(">");
	            if (oControl._oCenterControl) {
	                oRm.renderControl(oControl._oCenterControl);
	            }
	        oRm.write("</div>");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-third");
            oRm.writeAttribute("aria-hidden", "true");
	        oRm.addClass("sapSuiteTcNext");
	        oRm.writeClasses();
	        oRm.write(">");
	        oRm.write("</div>");
	
	    oRm.write("</div>");
	
	    oRm.write("<nav");
	    oRm.writeAttribute("id", oControl.getId() + "-nav-next");
	    oRm.addClass("sapSuiteTcNavNext");
	    oRm.writeClasses();
	    oRm.write(">");
	    oRm.write("</nav>");
	oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ThingCollectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingInspectorRenderer");
jQuery.sap.require('sap.ui.ux3.ThingInspectorRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


sap.suite.ui.commons.ThreePanelThingInspectorRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.ThingInspectorRenderer);

}; // end of sap/suite/ui/commons/ThreePanelThingInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingViewerRenderer");
jQuery.sap.require('sap.ui.ux3.ThingViewerRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ThreePanelThingViewer renderer. 
 * @static
 */
sap.suite.ui.commons.ThreePanelThingViewerRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.ThingViewerRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderContent = function(oRm, oControl){ 
	oRm.write("<div");
	oRm.addClass("sapSuiteTvMinHeight");
	oRm.writeClasses();
	oRm.write(">");
	
    oRm.write("<header");
    oRm.writeAttribute("id", oControl.getId() + "-header");
    oRm.addClass("sapSuiteTvTitle");
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getSidebarWidth());
    oRm.writeStyles();
    oRm.write(">");
        this.renderHeader(oRm, oControl);
    oRm.write("</header>");

    oRm.write("<nav");
    oRm.writeAttribute("id", oControl.getId() + "-navigation");
    oRm.addClass("sapSuiteTvNav");
    if (!oControl.getLogo()) {
        oRm.addClass("sapSuiteTvNavNoLogo");
    }
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getSidebarWidth());
    oRm.writeStyles();
    oRm.write(">");
        oRm.renderControl(oControl._getNavBar());
    oRm.write("</nav>");

    oRm.write("<aside");
    oRm.writeAttribute("id", oControl.getId() + "-headerContent");
    oRm.addClass("sapSuiteTvHeader");
    oRm.writeClasses();
    oRm.write(">");
        this.renderHeaderContent(oRm, oControl);
    oRm.write("</aside>");

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-facetContent");
    oRm.addClass("sapSuiteTvFacet");
    oRm.writeClasses();
    oRm.write(">");
        this.renderFacetContent(oRm, oControl);
    oRm.write("</div>");

    if (oControl.getLogo()) {
        oRm.write("<footer");
        oRm.writeAttribute("id", oControl.getId() + "-footer");
        oRm.addClass("sapSuiteTvLogo");
        oRm.writeClasses();
        oRm.addStyle("width", oControl.getSidebarWidth());
        oRm.writeStyles();
        oRm.write(">");
	        oRm.write("<img");
	        oRm.writeAttribute("id", oControl.getId() + "-logo");
	        oRm.writeAttribute("role", "presentation");
	        oRm.writeAttributeEscaped("src", oControl.getLogo());
	        oRm.addClass("sapSuiteTvLogoIcon");
	        oRm.writeClasses();
	        oRm.write("/>");
        oRm.write("</footer>");
    }    
    oRm.write("</div>");
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeader = function(oRm, oControl) {
    var iMenuContentLength = oControl.getMenuContent().length;

    oRm.write("<div");
    oRm.addClass("sapSuiteTvTitleBar");
    oRm.writeClasses();
    oRm.write(">");
        if (oControl.getIcon()) {
            oRm.write("<img");
            oRm.writeAttribute("id", oControl.getId() + "-swatch");
            oRm.writeAttribute("role", "presentation");
            oRm.writeAttributeEscaped("src", oControl.getIcon());
            oRm.addClass("sapSuiteTvTitleIcon");
            oRm.writeClasses();
            oRm.write("/>");
        }

        if (iMenuContentLength > 0) {
            oRm.renderControl(oControl._oMenuButton);
        }

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 1);
        oRm.writeAttributeEscaped("title", oControl.getType());
        oRm.addClass("sapSuiteTvTitleType");
        oRm.addClass("sapSuiteTvTextCrop");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getType());
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 2);
        oRm.writeAttributeEscaped("title", oControl.getTitle());
        oRm.addClass("sapSuiteTvTitleFirst");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getTitle());
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 3);
        oRm.writeAttributeEscaped("title", oControl.getSubtitle());
        oRm.addClass("sapSuiteTvTitleSecond");
        oRm.addClass("sapSuiteTvTextCrop");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getSubtitle());
        oRm.write("</div>");
    oRm.write("</div>");

    this.renderFlyOutMenu(oRm,  oControl);
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFacetContent = function(oRm, oControl) {
    var aFacetContent = oControl.getFacetContent();
    for (var i = 0; i < aFacetContent.length; i++) {
        var oGroup = aFacetContent[i];

        oRm.write("<div");
        oRm.writeAttribute("role", "form");
        if (oGroup.getColspan()) {
            oRm.addClass("sapUiUx3TVFacetThingGroupSpan");
        } else {
            oRm.addClass("sapUiUx3TVFacetThingGroup");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttributeEscaped("title", oGroup.getTitle());
            oRm.addClass("sapUiUx3TVFacetThingGroupContentTitle");
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<span>");
                    oRm.writeEscaped(oGroup.getTitle());
                oRm.write("</span>");
            oRm.write("</div>");

            oRm.write("<div");
            oRm.addClass("sapUiUx3TVFacetThingGroupContent");
            oRm.writeClasses();
            oRm.write(">");
                var oGroupContent = oGroup.getContent();
                for (var j = 0; j < oGroupContent.length; j++) {
                    oRm.renderControl(oGroupContent[j]);
                }
            oRm.write("</div>");
        oRm.write("</div>");
    }
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFlyOutMenu = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-menu-popup");
    oRm.writeAttribute("role", "menu");
    oRm.addClass("sapSuiteTvPopupMenu");
    oRm.writeClasses();
    oRm.write(">");

    var aMenuContent = oControl.getMenuContent();
    for (var i = 0; i < aMenuContent.length; i++) {
        var oMenuItem = aMenuContent[i];
        oMenuItem.addStyleClass("sapSuiteTvPopupMenuLink");
        oRm.renderControl(oMenuItem);
    }

    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ThreePanelThingViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TileContent2X2Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.TileContent2X2Renderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class TileContent renderer. 
 * @static
 */
sap.suite.ui.commons.TileContent2X2Renderer = {};

/**
 * Renders the HTML for the title of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.TileContent2X2Renderer.render = function(rm, oControl) {

    var sTooltip = oControl.getTooltip_AsString();
    var sAltText = oControl.getAltText ? oControl.getAltText() : "";

 	rm.write("<div");
 	rm.writeControlData(oControl);
 	rm.addClass("sapSuiteTileCnt");
 	rm.addClass(oControl._getContentType());	
 	rm.addClass(oControl.getSize());
 	rm.addClass("ft-"+"TwoByTwo");
 	if(sTooltip) {
 		rm.writeAttributeEscaped("title", sTooltip);
 	}
 	rm.writeAttribute("aria-describedby", oControl.getId() + "-info");
	rm.writeClasses();
	rm.write(">");
		this.renderContent(rm, oControl);
		this.renderFooter(rm, oControl);
		
	    rm.write("<div");
	    rm.writeAttribute("id", oControl.getId() + "-info");
	    rm.addStyle("display", "none");
	    rm.writeAttribute("aria-hidden", "true");
	    rm.writeStyles();
	    rm.write(">");
	    	rm.writeEscaped(sAltText);
	    rm.write("</div>");
	rm.write("</div>");
	 	
};


/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose content should be rendered
 */
sap.suite.ui.commons.TileContent2X2Renderer.renderContent = function(rm, oControl) {
	var oCnt = oControl.getContent();
	rm.write("<div");
	rm.addClass("sapSuiteTileCntContent");
	rm.addClass(oControl.getSize());
	rm.addClass("ft-"+"TwoByTwo");
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.write(">");
		if(!oCnt.hasStyleClass("sapSuiteUiTcInnerMarker")) {
			oCnt.addStyleClass("sapSuiteUiTcInnerMarker");
		}
		rm.renderControl(oCnt);
	rm.write("</div>");
};

/**
 * Renders the HTML for the footer of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer should be rendered
 */
sap.suite.ui.commons.TileContent2X2Renderer.renderFooter = function(rm, oControl) {
	var sFooterTxt = oControl._getFooterText(rm, oControl);
	// footer text div
	rm.write("<div");
	rm.addClass("sapSuiteTileCntFtrTxt");
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-footer-text");
	rm.writeAttributeEscaped("title", sFooterTxt);
	rm.write(">");
		rm.writeEscaped(sFooterTxt);
	rm.write("</div>");
};

//sap.suite.ui.commons.TileContentRenderer._getFooterText = function(oControl) {
//    var sFooter = oControl.getFooter();
//    var sUnit = oControl.getUnit();
//    return sUnit 
//         ? (sap.ui.getCore().getConfiguration().getRTL() 
//                ? ((sFooter ? sFooter + " ," : "") + sUnit) 
//                : (sUnit + (sFooter ? ", " + sFooter : ""))) 
//         : sFooter;                     
//};



}; // end of sap/suite/ui/commons/TileContent2X2Renderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TileContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.TileContentRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class TileContent renderer. 
 * @static
 */
sap.suite.ui.commons.TileContentRenderer = {};

/**
 * Renders the HTML for the title of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose title should be rendered
 */
sap.suite.ui.commons.TileContentRenderer.render = function(rm, oControl) {

    var sTooltip = oControl.getTooltip_AsString();
    var sAltText = oControl.getAltText ? oControl.getAltText() : "";

 	rm.write("<div");
 	rm.writeControlData(oControl);
 	rm.addClass("sapSuiteTileCnt");
 	rm.addClass(oControl._getContentType());	
 	rm.addClass(oControl.getSize());
 	rm.addClass("ft-"+oControl.getFrameType());
 	if(sTooltip) {
 		rm.writeAttributeEscaped("title", sTooltip);
 	}
 	rm.writeAttribute("aria-describedby", oControl.getId() + "-info");
	rm.writeClasses();
	rm.write(">");
		this.renderContent(rm, oControl);
		this.renderFooter(rm, oControl);
		
	    rm.write("<div");
	    rm.writeAttribute("id", oControl.getId() + "-info");
	    rm.addStyle("display", "none");
	    rm.writeAttribute("aria-hidden", "true");
	    rm.writeStyles();
	    rm.write(">");
	    	rm.writeEscaped(sAltText);
	    rm.write("</div>");
	rm.write("</div>");
	 	
};


/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose content should be rendered
 */
sap.suite.ui.commons.TileContentRenderer.renderContent = function(rm, oControl) {
	var oCnt = oControl.getContent();
	rm.write("<div");
	rm.addClass("sapSuiteTileCntContent");
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.write(">");
		if(!oCnt.hasStyleClass("sapSuiteUiTcInnerMarker")) {
			oCnt.addStyleClass("sapSuiteUiTcInnerMarker");
		}
		rm.renderControl(oCnt);
	rm.write("</div>");
};

/**
 * Renders the HTML for the footer of the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control whose footer should be rendered
 */
sap.suite.ui.commons.TileContentRenderer.renderFooter = function(rm, oControl) {
	var sFooterTxt = oControl._getFooterText(rm, oControl);
	// footer text div
	rm.write("<div");
	rm.addClass("sapSuiteTileCntFtrTxt");
	rm.addClass(oControl.getSize());
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-footer-text");
	rm.writeAttributeEscaped("title", sFooterTxt);
	rm.write(">");
		rm.writeEscaped(sFooterTxt);
	rm.write("</div>");
};

//sap.suite.ui.commons.TileContentRenderer._getFooterText = function(oControl) {
//    var sFooter = oControl.getFooter();
//    var sUnit = oControl.getUnit();
//    return sUnit 
//         ? (sap.ui.getCore().getConfiguration().getRTL() 
//                ? ((sFooter ? sFooter + " ," : "") + sUnit) 
//                : (sUnit + (sFooter ? ", " + sFooter : ""))) 
//         : sFooter;                     
//};



}; // end of sap/suite/ui/commons/TileContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineFilterListItemRenderer') ) {
/*
 * @copyright
 */
 
jQuery.sap.declare("sap.suite.ui.commons.TimelineFilterListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained
 
/**
 * @class TimelineFilterListItem renderer. 
 * @static
 */

sap.suite.ui.commons.TimelineFilterListItemRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.TimelineFilterListItemRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager
	 oRm.write("<div");
	 oRm.writeControlData(oControl);
	 oRm.addClass("sapSuiteUiCommonsTimelineFilterListItem");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/TimelineFilterListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
 
jQuery.sap.declare("sap.suite.ui.commons.TimelineItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class TimelineItem renderer. 
 * @static
 */
sap.suite.ui.commons.TimelineItemRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
 
 sap.suite.ui.commons.TimelineItemRenderer.render = function(oRm, oControl) {
	if (oControl._orientation === "V") {
		this.renderLIContentV(oRm, oControl);
	} else {
		this.renderLIContentH(oRm, oControl);
	}
};
 


sap.suite.ui.commons.TimelineItemRenderer.renderLIContentH = function(oRm, oLI) {
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemWrapperV");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemBarV");
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("</div>");

	if (oLI._showIcons) {
		oRm.write("<div ");
		oRm.addClass("sapSuiteUiCommonsTimelineItemNoIcon");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
	} else {
		oRm.renderControl(oLI._getImageControl());
	}

	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemBubbleSpacerV");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemBubble");
	oRm.writeClasses();
	oRm.write(">");
	
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemArrow");
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("</div>");

	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemBox");
	oRm.writeClasses();
	oRm.write(">");
	if (this.renderItemShell) {
		this.renderItemShell(oRm, oLI);
	}
	oRm.write("</div>"); // close box
	oRm.write("</div>"); // close bubble
	oRm.write("</div>"); // close spacer
	oRm.write("</div>");
};

sap.suite.ui.commons.TimelineItemRenderer.renderLIContentV = function(oRm, oLI) {

  oRm.write("<li ");
  oRm.writeControlData(oLI);
	oRm.addClass("sapSuiteUiCommonsTimelineItem");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineItemWrapper");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
//	if (oLI.getPosition() == sap.suite.ui.commons.TimelineItemPosition.Bottom) {
	if (oLI._position == sap.suite.ui.commons.TimelineItemPosition.Bottom) {
		oRm.addClass("sapSuiteUiCommonsTimelineItemBarBottom");//TODO : check if you really need this..
	} else {
	    oRm.addClass("sapSuiteUiCommonsTimelineItemBar");
	}
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("</div>");

	if (oLI._showIcons){
	    oRm.write("<div ");
        oRm.addClass("sapSuiteUiCommonsTimelineItemNoIcon");
        oRm.writeClasses();
        oRm.write(">");
	    oRm.write("</div>");
	} else {
	    oRm.renderControl(oLI._getImageControl());
    }

    oRm.write("<div ");
    oRm.addClass("sapSuiteUiCommonsTimelineItemBubbleSpacer");
    
    oRm.addClass("sapSuiteUiCommonsTimelineItemBubbleSpacerLeft"); //arrow on the left.. get it dynamically.

//    if (oLI.getPosition() == sap.suite.ui.commons.TimelineItemPosition.Bottom) {
    if (oLI._position == sap.suite.ui.commons.TimelineItemPosition.Bottom) {
    	oRm.addClass("sapSuiteUiCommonsTimelineItemBubbleSpacerBottom");
    }
    
    oRm.writeClasses();
    oRm.write(">");
    
    oRm.write("<div ");
    oRm.addClass("sapSuiteUiCommonsTimelineItemBubble");
//    oRm.writeAttribute("tabindex", "-1");

    oRm.writeClasses();
    oRm.write(">");
		oRm.write("<div ");
		oRm.addClass("sapSuiteUiCommonsTimelineItemArrow");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		oRm.write("<div ");
		oRm.addClass("sapSuiteUiCommonsTimelineItemBox");
		oRm.writeClasses();
		oRm.write(">");
    if (this.renderItemShell) {
        this.renderItemShell(oRm, oLI);
    }
    oRm.write("</div>"); // close box
    oRm.write("</div>"); // close bubble
    oRm.write("</div>"); // close spacer
	oRm.write("</div>");
	
	oRm.write("</li>");

};

 

sap.suite.ui.commons.TimelineItemRenderer.renderItemShell = function(oRm, oControl){ 
	 oRm.write("<div");
//	 oRm.writeControlData(oControl);
	 oRm.writeAttribute("id", oControl.getId() + "-shell");
	 oRm.addClass("sapSuiteUiCommonsTimelineItemShell");
	 oRm.writeAttribute("tabindex", "-1");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 
	 oRm.write("<div");
	 oRm.writeAttributeEscaped("title", oControl.getUserName() + oControl.getTitle());
	 //added yy
	 oRm.writeAttribute("id", oControl.getId() + "-header");
	 oRm.addClass("sapSuiteUiCommonsTimelineItemHeader");
	 oRm.addClass("sapSuiteUiCommonsTimelineItemTextLineClamp");
	 oRm.addStyle("-webkit-line-clamp", 2);
	 oRm.writeClasses();
	 oRm.writeStyles();
	 //oRm.writeControlData(oControl);
	 oRm.write(">"); 
	 
	 oRm.write("<span");
	 //oRm.writeControlData(oControl);
	 oRm.writeAttribute("id", oControl.getId() + "-username");
	 oRm.addClass("sapSuiteUiCommonsTimelineItemShellUser");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 if (oControl.getUserNameClickable()) {
	   oControl._userNameLink.setText(oControl.getUserName());
	   oControl._userNameLink.setTooltip(oControl.getUserName());
	   oRm.renderControl(oControl._userNameLink);
	 } else {
		 oRm.writeEscaped(oControl.getUserName());
	 }
	 oRm.write("</span>");
	 
	 oRm.write("<span");
	 //oRm.writeControlData(oControl);
	 oRm.addClass("sapSuiteUiCommonsTimelineItemShellHdr");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 oRm.writeEscaped(" " + oControl.getTitle());
	 oRm.write("</span>");
	 
	 oRm.write("</div>");
	 
	 oRm.write("<div");
	 //oRm.writeControlData(oControl);
	 oRm.addClass("sapSuiteUiCommonsTimelineItemShellDateTime");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 oRm.writeEscaped( oControl._formatDateValue( oControl.getDateTime() ) );
	 oRm.write("</div>");
	 
	 oRm.write("<div");
	 //oRm.writeControlData(oControl);
	 oRm.addClass("sapSuiteUiCommonsTimelineItemShellBody");
	 oRm.writeClasses();
	 oRm.write(">"); 
	 if (oControl.getEmbeddedControl() !== null ) {
		 oRm.renderControl(oControl.getEmbeddedControl());
	 } else {
		 //oRm.writeEscaped(oControl.getText());
		 if(oControl._textBox) {
			 oRm.renderControl(oControl._textBox);
		 }
	 }
	 oRm.write("</div>");
	 
	 // here we should do the bottom bar 
	 if (oControl.getParent()._aFilterList && oControl.getParent().getEnableSocial()) {  //Check if there is Timeline as parent
		 oRm.write("<div");
		 oRm.addClass("sapSuiteUiCommonsTimelineItemShellBottom");
		 oRm.writeClasses();
		 oRm.write(">");
		 oRm.renderControl(oControl._jamBar); 
		 oRm.write("</div>");	 
	 }
	 oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/TimelineItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */


jQuery.sap.declare("sap.suite.ui.commons.TimelineRenderer");


/**
 * @class Timeline renderer. 
 * @static
 */
sap.suite.ui.commons.TimelineRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.TimelineRenderer.render = function(oRm, oControl){ 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	if (oControl.getAxisOrientation() === sap.suite.ui.commons.TimelineAxisOrientation.Horizontal){
		this.renderH(oRm, oControl);
	} else {
		this.renderV(oRm, oControl);
	}
};

sap.suite.ui.commons.TimelineRenderer.renderH = function(oRm, oControl) {
	var oContent = oControl._outputItem;
	oRm.write("<div ");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteUiCommonsTimelineH");
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");// top level div
	
	oRm.renderControl(oControl._headerBar);
	oRm.renderControl(oControl._headerInfoBar);
	
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineContentsH");
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
	oRm.writeAttribute("id", oControl.getId() + "-scrollH");
	oRm.addClass("sapSuiteUiCommonsTimelineScrollH");
	oRm.addStyle("width", 11 + oContent.length * 18 + "rem");
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");

	if (oContent.length > 0) {
		for ( var i = 0; i < oContent.length; i++) {
			var oC = oContent[i];
			oC._orientation = 'H';
			oRm.renderControl(oC);
		}
		if (oControl._showMore){
		   this.renderGetMoreH(oRm, oControl);
		}
	} else {
		if (oControl._finishLoading){
    		oRm.renderControl(oControl._emptyList);
    	}
	}

	oRm.write("</div>"); // scroll div
	oRm.write("</div>");
	oRm.write("</div>");// top level div
};

sap.suite.ui.commons.TimelineRenderer.renderV = function(oRm, oControl){ 

	var oContent = oControl._outputItem;
	oRm.write("<div ");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteUiCommonsTimeline");
	// set the width attribute here..
	if (oControl.getWidth()) {
		oRm.addStyle("width", oControl.getWidth());
	}
	
 
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");//top level div

	oRm.renderControl(oControl._headerBar);
	oRm.renderControl(oControl._headerInfoBar);
	
	
    oRm.write("<div ");
    oRm.writeAttribute("id", oControl.getId() + "-content");
	oRm.addClass("sapSuiteUiCommonsTimelineContents");
	//if (height) {
	//	oRm.addStyle("height", "300px");
	//}
	oRm.addClass("sapSuiteUiCommonsTimelineScrollV");
	oRm.addClass("sapSuiteUiCommonsTimelineScroll");
	oRm.writeClasses();
	oRm.write(">");
	
	oRm.write("<div ");
	oRm.writeAttribute("id", oControl.getId() + "-scroll");
	oRm.addClass("sapSuiteUiCommonsTimelineScroll");
	/*
	if (oControl._scHeight > 0) {
		oRm.addStyle("height", oControl._scHeight);
	} else {
		oRm.addStyle("height", "100%");
	}
	*/
	//oRm.addStyle("height", "100%"); 
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");
	
    if (oContent.length > 0) {
    	for (var i = 0; i < oContent.length; i++) {
            oRm.renderControl(oContent[i]);  
        }
      if (oControl._showMore){
      	this.renderGetMore(oRm, oControl);
      }
    } else {
    	if (oControl._finishLoading){
    		oRm.renderControl(oControl._emptyList);
    	}
    }
    oRm.write("</div>");
    oRm.write("</div>");
	oRm.write("</div>");//top level div
};


sap.suite.ui.commons.TimelineRenderer.renderGetMoreH = function(oRm, oControl) {
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineGetMoreH");
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineGetMoreBarH");
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("</div>");
	oRm.write("<div ");
	oRm.addClass("sapSuiteUiCommonsTimelineGetMoreBoxH");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oControl._getMoreButton);
	oRm.write("</div>");
	oRm.write("</div>");
};

sap.suite.ui.commons.TimelineRenderer.renderGetMore = function(oRm, oControl) {
		oRm.write("<li ");
		oRm.addClass("sapSuiteUiCommonsTimelineGetMore");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("<div ");
		oRm.addClass("sapSuiteUiCommonsTimelineGetMoreBar");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
		oRm.write("<div ");
		oRm.addClass("sapSuiteUiCommonsTimelineGetMoreBox");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl._getMoreButton);
		oRm.write("</div>");
		oRm.write("</li>");
};

}; // end of sap/suite/ui/commons/TimelineRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingGroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingGroupRenderer");

/**
 * @class UnifiedThingGroup renderer. 
 * @static
 */
sap.suite.ui.commons.UnifiedThingGroupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.UnifiedThingGroupRenderer.render = function(rm, oControl){
    var sTooltip = oControl.getTooltip_AsString();
	 rm.write("<div");
	 rm.writeControlData(oControl);
    if (sTooltip) {
        rm.writeAttributeEscaped("title", sTooltip);
    }
	 rm.addClass("sapSuiteUtg");
	 rm.writeClasses();
	 rm.write(">"); // div element
	 
	 // header div
	 rm.write("<div");
	 rm.addClass("sapSuiteUtgHeader");
	 rm.writeClasses();
	 rm.writeAttribute("id", oControl.getId() + "-thing-group-header");
	 rm.write(">");
         // title div
         rm.write("<div");
         rm.addClass("sapSuiteUtgTitle");
         rm.writeClasses();
         rm.writeAttribute("id", oControl.getId() + "-thing-group-title");
         rm.write(">");
            rm.writeEscaped(oControl.getTitle());
         rm.write("</div>");

         // description div
         rm.write("<div");
         rm.addClass("sapSuiteUtgDesc");
         rm.writeClasses();
         rm.writeAttribute("id", oControl.getId() + "-thing-group-desc");
         rm.write(">");
            rm.writeEscaped(oControl.getDescription());
         rm.write("</div>");
	 rm.write("</div>");

	 // content div
	 rm.write("<div");
	 rm.addClass("sapSuiteUtgContent");
     rm.addClass("sapSuiteUtgContent"+oControl.getDesign());
	 rm.writeClasses();
	 rm.writeAttribute("id", oControl.getId() + "-thing-group-content");
	 rm.write(">");
	 	 rm.renderControl(oControl.getContent());
	 rm.write("</div>");

	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/UnifiedThingGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingInspectorRenderer");

/**
 * @class UnifiedThingInspector renderer. 
 * @static
 */
sap.suite.ui.commons.UnifiedThingInspectorRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.UnifiedThingInspectorRenderer.render = function(oRm, oControl){
    var sTooltip = oControl.getTooltip_AsString();
    oRm.write("<div");
    oRm.writeControlData(oControl);
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeStyles();
    oRm.addClass("sapSuiteUti");
    oRm.writeClasses();
    oRm.write(">");
        oRm.renderControl(oControl._oNavContainer);
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/UnifiedThingInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.VerticalNavigationBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.VerticalNavigationBarRenderer");
jQuery.sap.require('sap.ui.ux3.NavigationBarRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class VerticalNavigationBar renderer. 
 * @static
 */
sap.suite.ui.commons.VerticalNavigationBarRenderer =sap.ui.core.Renderer.extend(sap.ui.ux3.NavigationBarRenderer); 


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.VerticalNavigationBarRenderer.render = function(oRm, oControl){ 
    if (!oControl.getVisible()) {            // return immediately if control is invisible
        return;
    }

    // write the HTML into the render manager
    oRm.write("<nav");
    oRm.writeControlData(oControl);
    oRm.writeAttribute("role", "navigation");
    oRm.addClass("sapSuiteTvNavBar");
    oRm.addClass("sapUiUx3NavBarUpperCase");
    oRm.writeClasses();
    oRm.write(">");
        oRm.write("<ul");
        oRm.writeAttribute("id", oControl.getId() + "-list");
        oRm.writeAttribute("role", "menubar");
        oRm.addClass("sapSuiteTvNavBarList");
        oRm.writeClasses();
        oRm.write(">");
            this.getItemsHtml(oRm, oControl);
        oRm.write("</ul>");
    oRm.write("</nav>");
};

sap.suite.ui.commons.VerticalNavigationBarRenderer.getItemsHtml = function(oRm, oControl) {
    var aItems = oControl.getItems();
    var bNeedToGetInstances = false;

    if (!aItems || aItems.length == 0) {            // use the association instead, if the aggregation is empty
        aItems = oControl.getAssociatedItems();
        bNeedToGetInstances = true;                 // avoid type checks in the loop
    }

    var iNoOfItems = aItems.length;
    var selectedItemId = oControl.getSelectedItem();

    for (var i = 0; i < iNoOfItems; i++) {
        var oItem = bNeedToGetInstances ? sap.ui.getCore().byId(aItems[i]) : aItems[i];

        if (oItem.getVisible()) {
            var bIsSelected = (oItem.getId() == selectedItemId);
            var iCharsInQty = -1;

            if (oItem.getQuantity && oItem.getQuantity()) {
                iCharsInQty = oItem.getQuantity().length;
                if (iCharsInQty > 0) iCharsInQty += 2;
            }

            oRm.write("<li");
            oRm.addClass("sapSuiteTvNavBarItem");
            if (bIsSelected) {
                oRm.addClass("sapUiUx3NavBarItemSel");
            }
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<a");                              // onclick='this.parentNode.onclick(event);'
                oRm.writeAttribute("id", oItem.getId());
                oRm.writeAttributeEscaped("href", oItem.getHref() || "javascript:void(0);");
                oRm.writeAttribute("aria-setsize", iNoOfItems);
                oRm.writeAttribute("aria-posinset", i + 1);
                oRm.writeAttribute("aria-checked", bIsSelected ? "true" : "false");
                oRm.writeAttribute("role", "menuitemradio");
                
                oRm.addClass("sapSuiteTvNavBarItemLink");
                oRm.writeClasses();
                oRm.write(">");

                    oRm.write("<span");
                    oRm.addClass("sapSuiteTvNavBarItemName");
                    oRm.writeClasses();
                    //externalized to allow skipping in inherited classes
                    this._addQuantityMargin(oRm, oControl, iCharsInQty);
                    oRm.write(">");
                        oRm.writeEscaped(oItem.getText());
                    oRm.write("</span>");

                    if (iCharsInQty > 0) {
                        oRm.write("<span");
                        oRm.addClass("sapSuiteTvNavBarItemQty");
                        oRm.writeClasses();
                        oRm.write(">");
                        oRm.write(" (").writeEscaped(oItem.getQuantity()).write(")");
                        oRm.write("</span>");
                    }

                oRm.write("</a>");

            oRm.write("</li>");
        }
    }

    oRm.write("<span");
    oRm.writeAttribute("id", oControl.getId() + "-arrow");
    oRm.writeAttribute("style", "display:none;");
    oRm.write("></span>");
};

sap.suite.ui.commons.VerticalNavigationBarRenderer._addQuantityMargin = function(oRm, oControl, iCharsInQty) {
    if (iCharsInQty > 0) {
        var sMarginStyle = "margin-right:-"+(1+iCharsInQty*0.6)+"em; padding-right:"+(1+iCharsInQty*0.6)+"em";
        oRm.writeAttribute("style", sMarginStyle);
    }
};

}; // end of sap/suite/ui/commons/VerticalNavigationBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ViewRepeaterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ViewRepeaterRenderer");
jQuery.sap.require('sap.ui.commons.RowRepeaterRenderer'); // unlisted dependency retained


/**
 * @class RowRepeater renderer. 
 * @static
 */
sap.suite.ui.commons.ViewRepeaterRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.RowRepeaterRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ViewRepeaterRenderer.render = function(oRenderManager, oControl) { 
	// escape directly if control is not visible
	if(!oControl.getVisible()) {
	    return;
	}

    var sTooltip = oControl.getTooltip_AsString();
	// opening root DIV
	oRenderManager.write("<div");
	oRenderManager.writeControlData(oControl);
    if (sTooltip) {
        oRenderManager.writeAttributeEscaped("title", sTooltip);
    }
    // add design CSS class: sapUiRrDesignStandard/sapUiRrDesignTransparent/sapUiRrDesignBareShell
	oRenderManager.addClass("sapUiRrDesign" + oControl.getDesign() );
	
	if (oControl.getResponsive() && oControl.getShowMoreSteps() == 0) {
		oRenderManager.addClass("suiteUiVrResp");
	}
	
	oRenderManager.writeClasses();
	
	if (oControl.getResponsive() && oControl.getShowMoreSteps() == 0) {
		oRenderManager.write(" style='height:" + oControl.getHeight() +"'");
	}
	
	oRenderManager.write(">");
	
	// render the row repeater header (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
	    this.renderHeader(oRenderManager, oControl);
	}
	
	if (oControl.getExternal() !== true) {
	    // render the row repeater body
	    this.renderBody(oRenderManager, oControl);
	
	    // render the row repeater footer (not in BARESHELL design)
	    if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
	        this.renderFooter(oRenderManager, oControl);
	    }
	} else {
	    oRenderManager.renderControl(sap.ui.getCore().byId(oControl.getAssociation("externalRepresentation")));
	}
	
	// closing root DIV
	oRenderManager.write("</div>");
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderHeader = function(oRenderManager, oControl) {
    this.renderViewSwitcher(oRenderManager, oControl);
    if (oControl.getExternal() !== true) {
        sap.ui.commons.RowRepeaterRenderer.renderHeader.call(this, oRenderManager, oControl);
    }
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderFooter = function(oRenderManager, oControl) {
    if (oControl.getExternal() !== true) {
        sap.ui.commons.RowRepeaterRenderer.renderFooter.call(this, oRenderManager, oControl);
    }
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderViewSwitcher = function(oRenderManager, oControl) {
	if (oControl.getShowViews() || oControl.getShowSearchField()) {
        oRenderManager.write("<div");
        oRenderManager.addClass("suiteUiVrViewSwHolder");
        oRenderManager.writeClasses();
        oRenderManager.write(">");

        if (oControl.getShowViews()) {
            // opening view switcher DIV
            oRenderManager.write("<div");
            oRenderManager.addClass("suiteUiVrViewSw");
            oRenderManager.writeClasses();
            oRenderManager.write(">");
                oRenderManager.renderControl(oControl._oSegBtn);
            // closing view switcher DIV
            oRenderManager.write("</div>");
        }

        if (oControl.getShowSearchField()) {
            // opening view switcher DIV
            oRenderManager.write("<div");
            oRenderManager.addClass("suiteUiVrSearchFld");
            oRenderManager.writeClasses();
            oRenderManager.write(">");
                oRenderManager.renderControl(oControl._oSearchField);
            // closing view switcher DIV
            oRenderManager.write("</div>");
        }
        oRenderManager.write("</div>");
    }
    oRenderManager.write("<div style='clear:both;'/>");
};
}; // end of sap/suite/ui/commons/ViewRepeaterRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.suite.ui.commons (1.26.6)
 */
jQuery.sap.declare("sap.suite.ui.commons.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.suite.ui.commons
 *
 * @namespace
 * @name sap.suite.ui.commons
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.suite.ui.commons",
	dependencies : ["sap.ui.core"],
	types: [
		"sap.suite.ui.commons.BulletChartMode",
		"sap.suite.ui.commons.CommonBackground",
		"sap.suite.ui.commons.ComparisonChartView",
		"sap.suite.ui.commons.DeviationIndicator",
		"sap.suite.ui.commons.FacetOverviewHeight",
		"sap.suite.ui.commons.FrameType",
		"sap.suite.ui.commons.HeaderContainerView",
		"sap.suite.ui.commons.InfoTileSize",
		"sap.suite.ui.commons.InfoTileTextColor",
		"sap.suite.ui.commons.InfoTileValueColor",
		"sap.suite.ui.commons.LoadState",
		"sap.suite.ui.commons.MicroAreaChartView",
		"sap.suite.ui.commons.ProcessFlowDisplayState",
		"sap.suite.ui.commons.ProcessFlowLaneState",
		"sap.suite.ui.commons.ProcessFlowNodeState",
		"sap.suite.ui.commons.ProcessFlowZoomLevel",
		"sap.suite.ui.commons.SelectionState",
		"sap.suite.ui.commons.ThingGroupDesign",
		"sap.suite.ui.commons.TimelineAlignment",
		"sap.suite.ui.commons.TimelineAxisOrientation",
		"sap.suite.ui.commons.TimelineItemPosition",
		"sap.suite.ui.commons.ValueStatus"
	],
	interfaces: [],
	controls: [
		"sap.suite.ui.commons.BulletChart",
		"sap.suite.ui.commons.BusinessCard",
		"sap.suite.ui.commons.ChartContainer",
		"sap.suite.ui.commons.ChartContainerContent",
		"sap.suite.ui.commons.ChartTile",
		"sap.suite.ui.commons.ColumnMicroChart",
		"sap.suite.ui.commons.ComparisonChart",
		"sap.suite.ui.commons.DateRangeScroller",
		"sap.suite.ui.commons.DateRangeSlider",
		"sap.suite.ui.commons.DateRangeSliderInternal",
		"sap.suite.ui.commons.DynamicContainer",
		"sap.suite.ui.commons.FacetOverview",
		"sap.suite.ui.commons.FeedItemHeader",
		"sap.suite.ui.commons.FeedTile",
		"sap.suite.ui.commons.GenericTile",
		"sap.suite.ui.commons.GenericTile2X2",
		"sap.suite.ui.commons.HeaderCell",
		"sap.suite.ui.commons.HeaderContainer",
		"sap.suite.ui.commons.InfoTile",
		"sap.suite.ui.commons.JamContent",
		"sap.suite.ui.commons.KpiTile",
		"sap.suite.ui.commons.LaunchTile",
		"sap.suite.ui.commons.LinkActionSheet",
		"sap.suite.ui.commons.MicroAreaChart",
		"sap.suite.ui.commons.MonitoringContent",
		"sap.suite.ui.commons.MonitoringTile",
		"sap.suite.ui.commons.NewsContent",
		"sap.suite.ui.commons.NoteTaker",
		"sap.suite.ui.commons.NoteTakerCard",
		"sap.suite.ui.commons.NoteTakerFeeder",
		"sap.suite.ui.commons.NumericContent",
		"sap.suite.ui.commons.NumericTile",
		"sap.suite.ui.commons.PictureZoomIn",
		"sap.suite.ui.commons.ProcessFlow",
		"sap.suite.ui.commons.ProcessFlowConnection",
		"sap.suite.ui.commons.ProcessFlowLaneHeader",
		"sap.suite.ui.commons.ProcessFlowNode",
		"sap.suite.ui.commons.RepeaterViewConfiguration",
		"sap.suite.ui.commons.SplitButton",
		"sap.suite.ui.commons.ThingCollection",
		"sap.suite.ui.commons.ThreePanelThingInspector",
		"sap.suite.ui.commons.ThreePanelThingViewer",
		"sap.suite.ui.commons.TileContent",
		"sap.suite.ui.commons.TileContent2X2",
		"sap.suite.ui.commons.Timeline",
		"sap.suite.ui.commons.TimelineFilterListItem",
		"sap.suite.ui.commons.TimelineItem",
		"sap.suite.ui.commons.UnifiedThingGroup",
		"sap.suite.ui.commons.UnifiedThingInspector",
		"sap.suite.ui.commons.VerticalNavigationBar",
		"sap.suite.ui.commons.ViewRepeater"
	],
	elements: [
		"sap.suite.ui.commons.BulletChartData",
		"sap.suite.ui.commons.ColumnData",
		"sap.suite.ui.commons.ComparisonData",
		"sap.suite.ui.commons.CountingNavigationItem",
		"sap.suite.ui.commons.FeedItem",
		"sap.suite.ui.commons.HeaderCellItem",
		"sap.suite.ui.commons.MicroAreaChartItem",
		"sap.suite.ui.commons.MicroAreaChartLabel",
		"sap.suite.ui.commons.MicroAreaChartPoint"
	],
	version: "1.26.6"
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.BulletChartMode.
jQuery.sap.declare("sap.suite.ui.commons.BulletChartMode");
/**
 * @class Enumeration of possible BulletChart display modes.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.BulletChartMode = {

	/**
	 * Displays the Actual value.
	 * @public
	 */
	Actual : "Actual",

	/**
	 * Displays delta between the Actual and Threshold values.
	 * @public
	 */
	Delta : "Delta"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.CommonBackground.
jQuery.sap.declare("sap.suite.ui.commons.CommonBackground");
/**
 * @class Enumeration of possible theme specific background colors.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.CommonBackground = {

	/**
	 * The lightest background color.
	 * @public
	 */
	Lightest : "Lightest",

	/**
	 * Extra light background color.
	 * @public
	 */
	ExtraLight : "ExtraLight",

	/**
	 * Light background color.
	 * @public
	 */
	Light : "Light",

	/**
	 * Medium light background color.
	 * @public
	 */
	MediumLight : "MediumLight",

	/**
	 * Medium background color.
	 * @public
	 */
	Medium : "Medium",

	/**
	 * Dark background color.
	 * @public
	 */
	Dark : "Dark",

	/**
	 * Extra dark background color.
	 * @public
	 */
	ExtraDark : "ExtraDark",

	/**
	 * The darkest background color.
	 * @public
	 */
	Darkest : "Darkest"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ComparisonChartView.
jQuery.sap.declare("sap.suite.ui.commons.ComparisonChartView");
/**
 * @class The view of the ComparisonChart.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ComparisonChartView = {

	/**
	 * Titles and values are displayed above the bars.
	 * @public
	 */
	Normal : "Normal",

	/**
	 * Titles and values are displayed in the same line with the bars.
	 * @public
	 */
	Wide : "Wide"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.DeviationIndicator.
jQuery.sap.declare("sap.suite.ui.commons.DeviationIndicator");
/**
 * @class The marker for the deviation trend.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.DeviationIndicator = {

	/**
	 * The actual value is more than the target value.
	 * @public
	 */
	Up : "Up",

	/**
	 * The actual value is less than the target value.
	 * @public
	 */
	Down : "Down",

	/**
	 * No value.
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.FacetOverviewHeight.
jQuery.sap.declare("sap.suite.ui.commons.FacetOverviewHeight");
/**
 * @class Enumeration of possible FacetOverview height settings.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.FacetOverviewHeight = {

	/**
	 * Extra small height
	 * @public
	 */
	XS : "XS",

	/**
	 * Small height
	 * @public
	 */
	S : "S",

	/**
	 * Medium height
	 * @public
	 */
	M : "M",

	/**
	 * Large height
	 * @public
	 */
	L : "L",

	/**
	 * Extra Large height
	 * @public
	 */
	XL : "XL",

	/**
	 * Extra extra large height
	 * @public
	 */
	XXL : "XXL",

	/**
	 * Content based height
	 * @public
	 */
	Auto : "Auto",

	/**
	 * No value. The height of the control is defined by depricated height property.
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.FrameType.
jQuery.sap.declare("sap.suite.ui.commons.FrameType");
/**
 * @class Enumeration of possible frame types.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.FrameType = {

	/**
	 * The 1x1 frame type.
	 * @public
	 */
	OneByOne : "OneByOne",

	/**
	 * The 2x1 frame type.
	 * @public
	 */
	TwoByOne : "TwoByOne",

	/**
	 * The 2/3 frame type.
	 * @public
	 */
	TwoThirds : "TwoThirds",

	/**
	 * The Auto frame type that adjusts the size of the control to the content.
	 * @public
	 */
	Auto : "Auto"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.HeaderContainerView.
jQuery.sap.declare("sap.suite.ui.commons.HeaderContainerView");
/**
 * @class The list of possible HeaderContainer views.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.HeaderContainerView = {

	/**
	 * The horizontal orientation of the control.
	 * @public
	 */
	Horizontal : "Horizontal",

	/**
	 * The vertical orientation of the control.
	 * @public
	 */
	Vertical : "Vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.InfoTileSize.
jQuery.sap.declare("sap.suite.ui.commons.InfoTileSize");
/**
 * @class Enumeration of possible PointTile size settings.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTileSize = {

	/**
	 * Extra small size.
	 * @public
	 */
	XS : "XS",

	/**
	 * Small size.
	 * @public
	 */
	S : "S",

	/**
	 * Medium size.
	 * @public
	 */
	M : "M",

	/**
	 * Large size.
	 * @public
	 */
	L : "L",

	/**
	 * The size of the tile depends on the device it is running on. It is large on desktop, medium on tablet and small on phone.
	 * @public
	 */
	Auto : "Auto"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.InfoTileTextColor.
jQuery.sap.declare("sap.suite.ui.commons.InfoTileTextColor");
/**
 * @class Enumeration of possible InfoTile text color settings.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTileTextColor = {

	/**
	 * Positive InfoTile text color.
	 * @public
	 */
	Positive : "Positive",

	/**
	 * Critical InfoTile text color.
	 * @public
	 */
	Critical : "Critical",

	/**
	 * Negative InfoTile text color.
	 * @public
	 */
	Negative : "Negative"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.InfoTileValueColor.
jQuery.sap.declare("sap.suite.ui.commons.InfoTileValueColor");
/**
 * @class Enumeration of possible InfoTile value color settings.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTileValueColor = {

	/**
	 * Neutral InfoTile value color.
	 * @public
	 */
	Neutral : "Neutral",

	/**
	 * Good InfoTile value color.
	 * @public
	 */
	Good : "Good",

	/**
	 * Critical InfoTile value color.
	 * @public
	 */
	Critical : "Critical",

	/**
	 * Error InfoTile value color.
	 * @public
	 */
	Error : "Error"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.LoadState.
jQuery.sap.declare("sap.suite.ui.commons.LoadState");
/**
 * @class Enumeration of possible load states for LoadableView.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.LoadState = {

	/**
	 * LoadableView is loading the control.
	 * @public
	 */
	Loading : "Loading",

	/**
	 * LoadableView has loaded the control.
	 * @public
	 */
	Loaded : "Loaded",

	/**
	 * LoadableView failed to load the control.
	 * @public
	 */
	Failed : "Failed",

	/**
	 * LoadableView disabled to load the control.
	 * @public
	 */
	Disabled : "Disabled"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.MicroAreaChartView.
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChartView");
/**
 * @class The list of possible MicroAreaChart views.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.MicroAreaChartView = {

	/**
	 * The view with labels on the top and bottom.
	 * @public
	 */
	Normal : "Normal",

	/**
	 * The view with labels on the left and right.
	 * @public
	 */
	Wide : "Wide"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ProcessFlowDisplayState.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowDisplayState");
/**
 * @class The ProcessFlow calculates the ProcessFlowDisplayState based on the 'focused' and ?highlighted? properties of each node.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ProcessFlowDisplayState = {

	/**
	 * The control is in the regular display state
	 * @public
	 */
	Regular : "Regular",

	/**
	 * The control is in the combination of regular and focused display state
	 * @public
	 */
	RegularFocused : "RegularFocused",

	/**
	 * The control is in highlighted display state
	 * @public
	 */
	Highlighted : "Highlighted",

	/**
	 * The control is in the combination of highlighted and focused display state
	 * @public
	 */
	HighlightedFocused : "HighlightedFocused",

	/**
	 * The control is in the dimmed state
	 * @public
	 */
	Dimmed : "Dimmed",

	/**
	 * The control is in the combination of dimmed and focused display state
	 * @public
	 */
	DimmedFocused : "DimmedFocused"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ProcessFlowLaneState.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowLaneState");
/**
 * @class This type is used in the ?state? property of the ProcessFlowLaneHeader. For example, an app developer has the option of explicitly setting the status of the lane header outside of the control coding if the lanes are displayed without documents.
 * If the complete process flow is displayed (that is, if the lane header is displayed with documents underneath), the given state values of the lane header are ignored and will be calculated in the ProcessFlow according to the current state of the documents.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ProcessFlowLaneState = {

	/**
	 * In the ?state? array , the total sum of all values needs to be 100%.
	 * @public
	 */
	value : "value",

	/**
	 * The ?state? property is associated with the given value. The possible states are: positive, negative, neutral, and planned.
	 * @public
	 */
	state : "state"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ProcessFlowNodeState.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowNodeState");
/**
 * @class Describes the state info connected to the content displayed in the Process Flow Node body. Also Process Flow Lane Header uses this enumeration for the chart
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ProcessFlowNodeState = {

	/**
	 * Positive status for a Created document: document is done, finished, solved
	 * @public
	 */
	Positive : "Positive",

	/**
	 * Negative status for a Created document: a document has an issue
	 * @public
	 */
	Negative : "Negative",

	/**
	 * Planned status for a document: a document is planned
	 * @public
	 */
	Planned : "Planned",

	/**
	 * Neutral status for a Created document: document is in progress
	 * @public
	 */
	Neutral : "Neutral",

	/**
	 * Planned document has an issue
	 * @public
	 */
	PlannedNegative : "PlannedNegative"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ProcessFlowZoomLevel.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowZoomLevel");
/**
 * @class The zoom level defines level of details for the node and how much space the process flow requires.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ProcessFlowZoomLevel = {

	/**
	 * zoom level for least details - only icon is displayed
	 * @public
	 */
	One : "One",

	/**
	 * The detail is icon, title text and no additional texts
	 * @public
	 */
	Two : "Two",

	/**
	 * The full detail view of the node but with smaller font size
	 * @public
	 */
	Three : "Three",

	/**
	 * The full details with normal font size
	 * @public
	 */
	Four : "Four"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.SelectionState.
jQuery.sap.declare("sap.suite.ui.commons.SelectionState");
/**
 * @class SelectionState
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.SelectionState = {

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	Selected : "Selected",

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	NotSelected : "NotSelected",

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	Semantic : "Semantic"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ThingGroupDesign.
jQuery.sap.declare("sap.suite.ui.commons.ThingGroupDesign");
/**
 * @class Defines the way how UnifiedThingGroup control is rendered.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ThingGroupDesign = {

	/**
	 * In this design there is no indentation between header and content of the group.
	 * @public
	 */
	ZeroIndent : "ZeroIndent",

	/**
	 * In this design there is indentation between header and content of the group.
	 * @public
	 */
	TopIndent : "TopIndent"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.TimelineAlignment.
jQuery.sap.declare("sap.suite.ui.commons.TimelineAlignment");
/**
 * @class Where to align items with respect to the time line.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.TimelineAlignment = {

	/**
	 * Right
	 * @public
	 */
	Right : "Right"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.TimelineAxisOrientation.
jQuery.sap.declare("sap.suite.ui.commons.TimelineAxisOrientation");
/**
 * @class Timeline Axis Orientation
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.TimelineAxisOrientation = {

	/**
	 * Vertical Orientation
	 * @public
	 */
	Vertical : "Vertical",

	/**
	 * Horizontal Orientation
	 * @public
	 */
	Horizontal : "Horizontal"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.TimelineItemPosition.
jQuery.sap.declare("sap.suite.ui.commons.TimelineItemPosition");
/**
 * @class Position of TimelineItem
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.TimelineItemPosition = {

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	Top : "Top",

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	Bottom : "Bottom",

	/**
	 * [Enter description for newValue]
	 * @public
	 */
	Middle : "Middle"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ValueStatus.
jQuery.sap.declare("sap.suite.ui.commons.ValueStatus");
/**
 * @class Marker for the key value status.
 *
 * @version 1.26.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.ValueStatus = {

	/**
	 * Good value.
	 * @public
	 */
	Good : "Good",

	/**
	 * Positive value.
	 * @public
	 */
	Neutral : "Neutral",

	/**
	 * Critical value.
	 * @public
	 */
	Critical : "Critical",

	/**
	 * Bad value.
	 * @public
	 */
	Bad : "Bad"

};

}; // end of sap/suite/ui/commons/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.DateUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.DateUtils");

/**
 * Constructor for DateUtils - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class DateUtils is a static class for Date utility functions.
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils = function() {

    throw new Error();
};

/**
 * Adjust the given date to the start of the day, with time set to 0 hours, 0 minutes, and 0 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(0);
        dDate.setMinutes(0);
        dDate.setSeconds(0);
        dDate.setMilliseconds(0);
    }
};

/**
 * Adjust the given date to the end of the day, with time set to 23 hours, 59 minutes, and 59 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(23);
        dDate.setMinutes(59);
        dDate.setSeconds(59);
        dDate.setMilliseconds(999);
    }
};

/**
 * Adjust the given date to the first day of the month, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to the last day of the month, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        dDate.setMonth(dDate.getMonth() + 1);
        dDate.setDate(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Adjust the given date to the first day of the year, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the last day of the year, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(11);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the day specified by <code>iFirstDayOfWeek</code>. The date will be set to the previous first day of the week. For example, if the date is Tuesday,
 * February 19 and the value of <code>iFirstDayOfWeek</code> is 4 (Thursday), then the date will be adjusted to the previous Thursday, which is February 14.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @param [iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek = function(dDate, iFirstDayOfWeek) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (isNaN(iFirstDayOfWeek) || !isFinite(iFirstDayOfWeek)) {
            jQuery.sap.log.error("DateUtils iFirstDayOfWeek value ='" + iFirstDayOfWeek + "' is invalid.");
            return;
        }

        dDate.setDate(dDate.getDate() - (dDate.getDay() - iFirstDayOfWeek + 7) % 7);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to <code>oSettings.iDuration</code> days after the day specified by <code>oSettings.iFirstDayOfWeek</code>. See <code>resetDateToStartOfWeek()</code>
 * for a description of how the date is adjusted to the first day of week.
 * 
 * @param {Object}
 *                oSettings
 * @param [oSettings.iDuration=7]
 *                The number of days in the week with a minimum of 1 and maximum of 7.
 * @param [oSettings.iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek = function(dDate, oSettings) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {

        var duration;
        if (oSettings && !(oSettings instanceof Object)) {
            jQuery.sap.log.error("DateUtils oSettings is not an object.");
            return;
        }

        if (!oSettings) {
            oSettings = {};
        }

        if (oSettings.iDuration === undefined) {
            duration = 7;
        } else {
            duration = oSettings.iDuration;

            if (isNaN(duration) || !isFinite(duration)) {
                jQuery.sap.log.error("DateUtils duration value ='" + duration + "' is invalid.");
                return;
            }
        }

        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(dDate, oSettings.iFirstDayOfWeek);
        dDate.setDate(dDate.getDate() + duration - 1);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Test if the given date is a valid date object. If the date is invalid an error message is logged.
 * 
 * @param {Date}
 *                The date to be validated.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.isValidDate = function(dDate) {

    if (Object.prototype.toString.call(dDate) !== "[object Date]" || isNaN(dDate.getTime())) {
        jQuery.sap.log.error("DateUtils invalid date=" + dDate);
        return false;
    }
    return true;
};

/**
 * Tests to see if two dates have the same year, month, and day. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year, month, and day, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateDaysEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth() && dDate1.getDate() === dDate2.getDate());

    }
    return false;
};

/**
 * Tests to see if two dates have the same year and month. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year and month, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateMonthsEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth());
    }
    return false;
};

/**
 * Returns the date that is iIndex days from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many days to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex days from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementDateByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        dReturnDate.setDate(dStartDate.getDate() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the date that is iIndex months from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many months to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex months from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dReturnDate);
        dReturnDate.setMonth(dStartDate.getMonth() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the number of months two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of months two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0; 
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setMonth(dStartDate.getMonth() + 1);        
        } else {
            dStartDate.setMonth(dStartDate.getMonth() - 1);          
        }
    }    
    
    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

/**
 * Returns the number of days two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of days two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfDaysApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();   
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0;  
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setDate(dStartDate.getDate() + 1);            
        } else {
            dStartDate.setDate(dStartDate.getDate() - 1);            
        }
    }

    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

}; // end of sap/suite/ui/commons/util/DateUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.FeedAggregator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.FeedAggregator");


/**
 * Constructor for FeedAggregator - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class FeedAggregator is a static class for feed aggregation functions.
 * 
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator = function() {

	throw new Error();
};

/**
 * Filters $xml to include/exclude articles that matches the inclusion/exclusion filter criteria. Filter title by the entire phrase and apply OR operator between different filters.
 * 
 * @param {Object}
 *            $xml jQuery object with XML
 * @param {String[]}
 *            aInclusionFilters array of filtering phrases
 * @param {String[]}
 *            aExclusionFilters array of filtering phrases
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator.filterItems = function($xml, aInclusionFilters, aExclusionFilters) {

	var filter = function(aFilters, inclusive) {

		var $items = $xml.find("rss>channel>item");
		if ($items.length > 0) {
			for ( var i = $items.length - 1; i >= 0; i--) {
				var $item = jQuery($items[i]);
				var $title = $item.find("title");
				var match = false;
				for ( var j = 0; j < aFilters.length; j++) {
					var filter = aFilters[j];
					if (filter) {
						if ($title.text().toLowerCase().indexOf(filter.toLowerCase()) !== -1) {
							match = true;
							break;
						}
					}
				}
				if (match !== inclusive) {
					$item.remove();
				}
			}
		}
	};
	if (aInclusionFilters && aInclusionFilters.length > 0) {
		filter(aInclusionFilters, true);
	}
	if (aExclusionFilters && aExclusionFilters.length > 0) {
		filter(aExclusionFilters, false);
	}
};

/**
 * Performs XHR to the given URLs and trigger fnCompleted function when all requests are completed. If the request is completed with error fnCompleted is still called but then the
 * fnFailed is called.
 * 
 * @param {String[]}
 *            aFeedUrls URLs to get data from
 * @param {String[]}
 *            aInclusionFilters Filters to include articles into result model. Filter title by the entire phrase and apply OR operator between different filters.
 * @param {String[]}
 *            aExclusionFilters Filters to exclude articles from result model. Filter title by the entire phrase and apply OR operator between different filters.
 * @param {function}
 *            fnCompleted callback function to handle data received from URL
 * @param {function}
 *            [fnFailed] callback function to handle failed request
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator.getFeeds = function(aFeedUrls, aInclusionFilters, aExclusionFilters, fnCompleted, fnFailed) {

	var jsResult = {
		items : []
	}; // array of RSS items
	var result = new sap.ui.model.json.JSONModel();
	var feedNumber = aFeedUrls.length;
	var counter = 0;

	var fnCompleteOneFeed = function(oControlEvent) {

		var $xml = jQuery(this.getData());
		sap.suite.ui.commons.util.FeedAggregator.filterItems($xml, aInclusionFilters, aExclusionFilters);
		if ($xml.find("rss>channel>item>title").length > 0) {
			var items = $xml.find("rss>channel>item");
			var source = jQuery($xml.find("rss>channel>title")).text();
			var imageUrl = jQuery($xml.find("rss>channel>image>url")).text();

			for ( var i = 0; i < items.length; i++) {
				var $item = jQuery(items[i]);
				var date = new Date($item.children("pubDate").text());
				var itemImageUrl = $item.children("image").text();

				if (itemImageUrl) {
					imageUrl = itemImageUrl;
				}

				if (!sap.suite.ui.commons.util.DateUtils.isValidDate(date)) {
					date = null;
				}
				jsResult.items.push({
					title : $item.children("title").text(),
					link : $item.children("link").text(),
					description : $item.children("description").text(),
					pubDate : date,
					source : source,
					image : imageUrl
				});
			}
		}
		counter++;
		if (counter === feedNumber) {
			// place fnComplete function in the queue
			result.setData(jsResult);
			if (fnCompleted) {
				fnCompleted();
			}
		}
	};

	for ( var i = 0; i < aFeedUrls.length; i++) {
		var tmpXmlModel = new sap.ui.model.xml.XMLModel();
		tmpXmlModel.attachRequestCompleted(fnCompleteOneFeed);
		tmpXmlModel.loadData(aFeedUrls[i]);
	}

	return result;
};
}; // end of sap/suite/ui/commons/util/FeedAggregator.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.FeedItemUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.FeedItemUtils");



/**
 * Constructor for FeedItemUtils - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class FeedItemUtils is a static class for feed item utility functions.
 * 
 * @private
 */
sap.suite.ui.commons.util.FeedItemUtils = function() {

	throw new Error();
};

/**
 * This function calculates the age of feed item.
 * 
 * @param {Date}
 *            The publication date of the feed item.
 * @private
 */
sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge = function(dPublicationDate) {

	var sAgo = "";

	if (!sap.suite.ui.commons.util.DateUtils.isValidDate(dPublicationDate)) {
		return sAgo;
	}

	var dNow = new Date();

	// ignore milliseconds
	dPublicationDate.setMilliseconds(0);
	dNow.setMilliseconds(0);

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);

	var nMillisInOneMinute = 60000;
	var nMillisInOneHour = nMillisInOneMinute * 60;
	var nMillisInOneDay = nMillisInOneHour * 24;

	if ((dNow.getTime() - dPublicationDate.getTime()) >= nMillisInOneDay) {

		var nNumberOfDays = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneDay, 10);
		if (nNumberOfDays === 1) {

			sAgo = oResBundle.getText("FEEDTILE_DAY_AGO", [ nNumberOfDays ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_DAYS_AGO", [ nNumberOfDays ]);
		}
	} else if ((dNow.getTime() - dPublicationDate.getTime()) >= nMillisInOneHour) {

		var nNumberOfHours = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneHour, 10);

		if (nNumberOfHours === 1) {

			sAgo = oResBundle.getText("FEEDTILE_HOUR_AGO", [ nNumberOfHours ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_HOURS_AGO", [ nNumberOfHours ]);
		}
	} else {

		var nNumberOfMins = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneMinute, 10);

		if (nNumberOfMins === 1) {

			sAgo = oResBundle.getText("FEEDTILE_MINUTE_AGO", [ nNumberOfMins ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_MINUTES_AGO", [ nNumberOfMins ]);
		}
	}

	return sAgo;
};
}; // end of sap/suite/ui/commons/util/FeedItemUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.RenderUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.RenderUtils");

jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


sap.suite.ui.commons.util.RenderingHelper = function(oRenderManager) {
    this._rm = oRenderManager;
};
sap.suite.ui.commons.util.RenderingHelper.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Returns render manager, throw {Error} if undefined.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype._getRenderManager = function() {
    if (!(this._rm)) {
        throw new Error("Render manager not defined");
    }
    return this._rm;
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 * @param {Object} [oTag] Object which contains tag's classes and attributes.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeOpeningTag = function(sTagName, oTag) {
    oTag = oTag || {};

    // Get manager
    var rm = this._getRenderManager();
    var attrName;

    // Write tag name
    rm.write("<");
    rm.writeEscaped(sTagName);

    // Write CSS classes
    if (oTag.classes) {
        for (var i = 0; i < oTag.classes.length; i++) {
            rm.addClass(oTag.classes[i]);
        }
        rm.writeClasses();
    }

    // Write attributes
    if (oTag.attributes) {
        for (attrName in oTag.attributes) {
            rm.writeAttribute(attrName, oTag.attributes[attrName]);
        }
    }

    // Write escaped attributes
    if (oTag.escapedAttributes) {
        for (attrName in oTag.escapedAttributes) {
            rm.writeAttributeEscaped(attrName, oTag.escapedAttributes[attrName]);
        }
    }

    rm.write(">");
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeClosingTag = function(sTagName) {
    // Get manager
    var rm = this._getRenderManager();

    // Write tag name
    rm.write("</");
    rm.writeEscaped(sTagName);
    rm.write(">");
};

}; // end of sap/suite/ui/commons/util/RenderUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BulletChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.BulletChart.
jQuery.sap.declare("sap.suite.ui.commons.BulletChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BulletChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getMode mode} : sap.suite.ui.commons.BulletChartMode (default: sap.suite.ui.commons.BulletChartMode.Actual)</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getForecastValue forecastValue} : float</li>
 * <li>{@link #getTargetValue targetValue} : float</li>
 * <li>{@link #getMinValue minValue} : float</li>
 * <li>{@link #getMaxValue maxValue} : float</li>
 * <li>{@link #getShowActualValue showActualValue} : boolean (default: true)</li>
 * <li>{@link #getShowDeltaValue showDeltaValue} : boolean (default: false)</li>
 * <li>{@link #getShowTargetValue showTargetValue} : boolean (default: true)</li>
 * <li>{@link #getShowValueMarker showValueMarker} : boolean (default: false)</li>
 * <li>{@link #getActualValueLabel actualValueLabel} : string</li>
 * <li>{@link #getDeltaValueLabel deltaValueLabel} : string</li>
 * <li>{@link #getTargetValueLabel targetValueLabel} : string</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getScaleColor scaleColor} : sap.suite.ui.commons.CommonBackground (default: sap.suite.ui.commons.CommonBackground.MediumLight)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getActual actual} : sap.suite.ui.commons.BulletChartData</li>
 * <li>{@link #getThresholds thresholds} : sap.suite.ui.commons.BulletChartData[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.BulletChart#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control shows a bullet chart.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.BulletChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.BulletChart", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"mode" : {type : "sap.suite.ui.commons.BulletChartMode", group : "Misc", defaultValue : sap.suite.ui.commons.BulletChartMode.Actual},
		"scale" : {type : "string", group : "Misc", defaultValue : null},
		"forecastValue" : {type : "float", group : "Misc", defaultValue : null},
		"targetValue" : {type : "float", group : "Misc", defaultValue : null},
		"minValue" : {type : "float", group : "Misc", defaultValue : null},
		"maxValue" : {type : "float", group : "Misc", defaultValue : null},
		"showActualValue" : {type : "boolean", group : "Misc", defaultValue : true},
		"showDeltaValue" : {type : "boolean", group : "Misc", defaultValue : false},
		"showTargetValue" : {type : "boolean", group : "Misc", defaultValue : true},
		"showValueMarker" : {type : "boolean", group : "Misc", defaultValue : false},
		"actualValueLabel" : {type : "string", group : "Misc", defaultValue : null},
		"deltaValueLabel" : {type : "string", group : "Misc", defaultValue : null},
		"targetValueLabel" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "string", group : "Misc", defaultValue : null},
		"scaleColor" : {type : "sap.suite.ui.commons.CommonBackground", group : "Misc", defaultValue : sap.suite.ui.commons.CommonBackground.MediumLight}
	},
	aggregations : {
		"actual" : {type : "sap.suite.ui.commons.BulletChartData", multiple : false}, 
		"thresholds" : {type : "sap.suite.ui.commons.BulletChartData", multiple : true, singularName : "threshold"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.BulletChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.BulletChart.extend
 * @function
 */

sap.suite.ui.commons.BulletChart.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setSize
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Specifies whether to display the actual value itself or delta between the actual value and the target value. If not set, the default mode displays the actual value.
 *
 * Default value is <code>Actual</code>
 *
 * @return {sap.suite.ui.commons.BulletChartMode} the value of property <code>mode</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>Actual</code> 
 *
 * @param {sap.suite.ui.commons.BulletChartMode} oMode  new value for property <code>mode</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setMode
 * @function
 */


/**
 * Getter for property <code>scale</code>.
 * The scaling suffix.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>scale</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getScale
 * @function
 */

/**
 * Setter for property <code>scale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sScale  new value for property <code>scale</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setScale
 * @function
 */


/**
 * Getter for property <code>forecastValue</code>.
 * The forecast value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>forecastValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getForecastValue
 * @function
 */

/**
 * Setter for property <code>forecastValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fForecastValue  new value for property <code>forecastValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setForecastValue
 * @function
 */


/**
 * Getter for property <code>targetValue</code>.
 * The target value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>targetValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getTargetValue
 * @function
 */

/**
 * Setter for property <code>targetValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fTargetValue  new value for property <code>targetValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setTargetValue
 * @function
 */


/**
 * Getter for property <code>minValue</code>.
 * If set, defines the left scale value for the bar chart.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>minValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getMinValue
 * @function
 */

/**
 * Setter for property <code>minValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMinValue  new value for property <code>minValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setMinValue
 * @function
 */


/**
 * Getter for property <code>maxValue</code>.
 * If set, defines the right scale value for the bar chart.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>maxValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getMaxValue
 * @function
 */

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMaxValue  new value for property <code>maxValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setMaxValue
 * @function
 */


/**
 * Getter for property <code>showActualValue</code>.
 * If set to true, shows numeric actual value. This property only works in Actual mode.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showActualValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getShowActualValue
 * @function
 */

/**
 * Setter for property <code>showActualValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowActualValue  new value for property <code>showActualValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setShowActualValue
 * @function
 */


/**
 * Getter for property <code>showDeltaValue</code>.
 * If set to true, shows the calculated delta value instead of the numeric actual value regardless of the showActualValue setting. This property works only in the Delta mode.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showDeltaValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getShowDeltaValue
 * @function
 */

/**
 * Setter for property <code>showDeltaValue</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowDeltaValue  new value for property <code>showDeltaValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setShowDeltaValue
 * @function
 */


/**
 * Getter for property <code>showTargetValue</code>.
 * If set to true, shows numeric target value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTargetValue</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getShowTargetValue
 * @function
 */

/**
 * Setter for property <code>showTargetValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTargetValue  new value for property <code>showTargetValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setShowTargetValue
 * @function
 */


/**
 * Getter for property <code>showValueMarker</code>.
 * If set to true, shows the value marker.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showValueMarker</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getShowValueMarker
 * @function
 */

/**
 * Setter for property <code>showValueMarker</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowValueMarker  new value for property <code>showValueMarker</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setShowValueMarker
 * @function
 */


/**
 * Getter for property <code>actualValueLabel</code>.
 * If set, displays a specified label instead of the numeric actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>actualValueLabel</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getActualValueLabel
 * @function
 */

/**
 * Setter for property <code>actualValueLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sActualValueLabel  new value for property <code>actualValueLabel</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setActualValueLabel
 * @function
 */


/**
 * Getter for property <code>deltaValueLabel</code>.
 * If set, displays a specified label instead of the calculated numeric delta value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>deltaValueLabel</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getDeltaValueLabel
 * @function
 */

/**
 * Setter for property <code>deltaValueLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDeltaValueLabel  new value for property <code>deltaValueLabel</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setDeltaValueLabel
 * @function
 */


/**
 * Getter for property <code>targetValueLabel</code>.
 * If set, displays a specified label instead of the numeric target value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>targetValueLabel</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getTargetValueLabel
 * @function
 */

/**
 * Setter for property <code>targetValueLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTargetValueLabel  new value for property <code>targetValueLabel</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setTargetValueLabel
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the chart. If it is not set, the size of the control is defined by the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setWidth
 * @function
 */


/**
 * Getter for property <code>scaleColor</code>.
 * Background color of the scale.
 *
 * Default value is <code>MediumLight</code>
 *
 * @return {sap.suite.ui.commons.CommonBackground} the value of property <code>scaleColor</code>
 * @public
 * @name sap.suite.ui.commons.BulletChart#getScaleColor
 * @function
 */

/**
 * Setter for property <code>scaleColor</code>.
 *
 * Default value is <code>MediumLight</code> 
 *
 * @param {sap.suite.ui.commons.CommonBackground} oScaleColor  new value for property <code>scaleColor</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setScaleColor
 * @function
 */


/**
 * Getter for aggregation <code>actual</code>.<br/>
 * The bullet chart actual data.
 * 
 * @return {sap.suite.ui.commons.BulletChartData}
 * @public
 * @name sap.suite.ui.commons.BulletChart#getActual
 * @function
 */


/**
 * Setter for the aggregated <code>actual</code>.
 * @param {sap.suite.ui.commons.BulletChartData} oActual
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setActual
 * @function
 */
	

/**
 * Destroys the actual in the aggregation 
 * named <code>actual</code>.
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#destroyActual
 * @function
 */


/**
 * Getter for aggregation <code>thresholds</code>.<br/>
 * The bullet chart thresholds data.
 * 
 * @return {sap.suite.ui.commons.BulletChartData[]}
 * @public
 * @name sap.suite.ui.commons.BulletChart#getThresholds
 * @function
 */


/**
 * Inserts a threshold into the aggregation named <code>thresholds</code>.
 *
 * @param {sap.suite.ui.commons.BulletChartData}
 *          oThreshold the threshold to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the threshold should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the threshold is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the threshold is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#insertThreshold
 * @function
 */

/**
 * Adds some threshold <code>oThreshold</code> 
 * to the aggregation named <code>thresholds</code>.
 *
 * @param {sap.suite.ui.commons.BulletChartData}
 *            oThreshold the threshold to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#addThreshold
 * @function
 */

/**
 * Removes an threshold from the aggregation named <code>thresholds</code>.
 *
 * @param {int | string | sap.suite.ui.commons.BulletChartData} vThreshold the threshold to remove or its index or id
 * @return {sap.suite.ui.commons.BulletChartData} the removed threshold or null
 * @public
 * @name sap.suite.ui.commons.BulletChart#removeThreshold
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>thresholds</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.BulletChartData[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.BulletChart#removeAllThresholds
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.BulletChartData</code> in the aggregation named <code>thresholds</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.BulletChartData}
 *            oThreshold the threshold whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.BulletChart#indexOfThreshold
 * @function
 */
	

/**
 * Destroys all the thresholds in the aggregation 
 * named <code>thresholds</code>.
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#destroyThresholds
 * @function
 */


/**
 * The event is fired when the user chooses the bullet chart.
 *
 * @name sap.suite.ui.commons.BulletChart#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.BulletChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.BulletChart</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the bullet chart.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.BulletChart</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.BulletChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.BulletChart#firePress
 * @function
 */


// Start of sap/suite/ui/commons/BulletChart.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.BulletChart.prototype.init = function(){
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	this.setTooltip("{AltText}");
};

/**
 * Calculates the width in percents of chart elements in accordance with provided chart values.
 *
 * @returns {Object} object that contains calculated values for actual value, target value, thresholds and their colors.
 * @private
 */
sap.suite.ui.commons.BulletChart.prototype._calculateChartData = function() {
	var fScaleWidthPct = 98;
    var aData = this.getThresholds();
    var aThresholds = [];
    var fTarget = this.getTargetValue();
    var fForecast = this.getForecastValue();
    var fActual = this.getActual().getValue();
    var aValues = [];
    var fLowestValue = fActual;
    var fHighestValue = fActual;

    if (this.getActual()._isValueSet) {
    	aValues.push(fActual);
    }

    if (this._isForecastValueSet) {
    	aValues.push(fForecast);
    }

    if (this._isTargetValueSet) {
    	aValues.push(fTarget);
    }

    if (this._isMinValueSet) {
    	aValues.push(this.getMinValue());
    }

    if (this._isMaxValueSet) {
    	aValues.push(this.getMaxValue());
    }
    
    for (var i=0; i<aData.length; i++) {
        aValues.push(aData[i].getValue());
    }
    
    var fTotal = 0;
    
    if (aValues.length>0) {
    	fLowestValue = fHighestValue = aValues[0];
	    for (var j=0; j<aValues.length; j++){
	    	if (aValues[j] < fLowestValue) {
	    		fLowestValue = aValues[j];
	    	}
	    	if (aValues[j] > fHighestValue) {
	    		fHighestValue = aValues[j];
	    	}
	    }
	
	    fHighestValue = (fHighestValue < 0 && fHighestValue < 3*(fLowestValue-fHighestValue)) ? 0 : fHighestValue;
	    fLowestValue = (fLowestValue > 0 && fLowestValue > 3*(fHighestValue-fLowestValue)) ? 0 : fLowestValue;
	    
	    fTotal = fHighestValue - fLowestValue;
	
	    for (var i=0; i<aData.length; i++) {
	        aThresholds[i] = {color: aData[i].getColor(), valuePct: (!aData[i]._isValueSet || fTotal==0) ? 0 : ((aData[i].getValue() - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2)};
	    }
    }

    return {
        actualValuePct: (!this.getActual()._isValueSet || fTotal==0) ? 0 : ( .05 + (fActual - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2),
        targetValuePct: (!this._isTargetValueSet || fTotal==0) ? 0 : ((fTarget - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2),
        forecastValuePct: (!this._isForecastValueSet || fTotal==0) ? 0 : ((fForecast - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2),
        thresholdsPct: aThresholds,
        fScaleWidthPct: fScaleWidthPct
    };
};

/**
 * Calculates the number of digits after the decimal point.
 *
 * @param {float} fValue float value
 * @returns int number of digits after the decimal point in fValue.
 * @private
 */
sap.suite.ui.commons.BulletChart.prototype._digitsAfterDecimalPoint = function(fValue) {
	var sAfter = (""+fValue).match(/[.,](\d+)/g);
	return (sAfter) ? (""+sAfter).length - 1 : 0;
};


/**
 * Calculates the delta between actual value and threshold.
 *
 * @returns float value of delta between actual value and threshold.
 * @private
 */
sap.suite.ui.commons.BulletChart.prototype._calculateDeltaValue = function() {
	if (!this.getActual()._isValueSet || !this._isTargetValueSet) {
		return 0;
	} else {
		var fActual = this.getActual().getValue();
		var fTarget = this.getTargetValue();
		return Math.abs(fActual - fTarget).toFixed(Math.max(this._digitsAfterDecimalPoint(fActual), this._digitsAfterDecimalPoint(fTarget)));
	}
};

/**
 * Setter for property <code>minValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMinValue  new value for property <code>minValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setMinValue
 * @function
 */
 sap.suite.ui.commons.BulletChart.prototype.setMinValue = function(fMinValue, bSuppressInvalidate) {
	 this._isMinValueSet = this._fnIsNumber(fMinValue);
	 return this.setProperty("minValue", this._isMinValueSet ? fMinValue : NaN, bSuppressInvalidate);
 };
 
/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMaxValue  new value for property <code>maxValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setMaxValue
 * @function
 */
 sap.suite.ui.commons.BulletChart.prototype.setMaxValue = function(fMaxValue, bSuppressInvalidate) {
	 this._isMaxValueSet = this._fnIsNumber(fMaxValue);
	 return this.setProperty("maxValue", this._isMaxValueSet ? fMaxValue : NaN, bSuppressInvalidate);
 };
 
/**
 * Setter for property <code>targetValue</code>.
 *
 * Default value is <code>undefined</code> 
 *
 * @param {float} fTargetValue  new value for property <code>targetValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setTargetValue
 * @function
 */
 sap.suite.ui.commons.BulletChart.prototype.setTargetValue = function(fTargetValue, bSuppressInvalidate) {
	 this._isTargetValueSet = this._fnIsNumber(fTargetValue);
	 return this.setProperty("targetValue", this._isTargetValueSet ? fTargetValue : NaN, bSuppressInvalidate);
 };

/**
 * Setter for property <code>forecastValue</code>.
 *
 * Default value is <code>undefined</code> 
 *
 * @param {float} fForecastValue  new value for property <code>forecastValue</code>
 * @return {sap.suite.ui.commons.BulletChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChart#setForecastValue
 * @function
 */
 sap.suite.ui.commons.BulletChart.prototype.setForecastValue = function(fForecastValue, bSuppressInvalidate) {
	 this._isForecastValueSet = this._fnIsNumber(fForecastValue);
	 return this.setProperty("forecastValue", this._isForecastValueSet ? fForecastValue : NaN, bSuppressInvalidate);
 };

 sap.suite.ui.commons.BulletChart.prototype.ontap = function(oEvent) {
     if (sap.ui.Device.browser.internet_explorer) {
         this.$().focus();
     }
     this.firePress();
};

sap.suite.ui.commons.BulletChart.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.BulletChart.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};
 
sap.suite.ui.commons.BulletChart.prototype._fnIsNumber = function(n) {
    return typeof n == 'number' && !isNaN(n) && isFinite(n);
};
 
sap.suite.ui.commons.BulletChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.BulletChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
}; 

sap.suite.ui.commons.BulletChart.prototype.onAfterRendering = function() {
	if (this._sBarResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sBarResizeHandlerId);
	}
	
    var oHeader = jQuery.sap.domById(this.getId() + "-chart-bar");
    this._sBarResizeHandlerId = sap.ui.core.ResizeHandler.register(oHeader,  jQuery.proxy(this._adjustLabelsPos, this));
    this._adjustLabelsPos();
    if (this.getShowValueMarker()) {
    	this._adjustValueToMarker();
    }
};

sap.suite.ui.commons.BulletChart.prototype.exit = function() {
	sap.ui.core.ResizeHandler.deregister(this._sBarResizeHandlerId);
};

sap.suite.ui.commons.BulletChart.prototype._adjustLabelsPos = function() {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var oTBarVal = jQuery.sap.byId(this.getId() + "-bc-target-bar-value");
	var oChartBar = jQuery.sap.byId(this.getId() + "-chart-bar");
	var fFullWidth = oChartBar.width();

	var fTValWidth = 0; 
	if (oTBarVal && oTBarVal.offset()) {
		fTValWidth = oTBarVal.offset().left - oChartBar.offset().left;
		if (bRtl) {
			fTValWidth = fFullWidth - fTValWidth;
		}
		this._adjustLabelPos(jQuery.sap.byId(this.getId() + "-bc-target-value"), fFullWidth, fTValWidth, bRtl);
	}	

	var oValMarker = jQuery.sap.byId(this.getId() + "-bc-bar-value-marker");
	if (oValMarker && oValMarker.offset()) {
		var fAValWidth = oValMarker.offset().left - oChartBar.offset().left;
		if (bRtl) {
			fAValWidth = fFullWidth - fAValWidth;
		}
		
		if ((sap.suite.ui.commons.BulletChartMode.Delta == this.getMode())) {
			fAValWidth = (fAValWidth + fTValWidth) / 2;
		}
		
		this._adjustLabelPos(jQuery.sap.byId(this.getId() + "-bc-item-value"), fFullWidth, fAValWidth, bRtl);
	}
	
};

sap.suite.ui.commons.BulletChart.prototype._adjustLabelPos = function(oLabel, fFullWidth, fOffset, bRtl) {
	var sOrientation = bRtl ? "right" : "left";
	var fLabelWidth = oLabel.width();
	if (fLabelWidth > fFullWidth) { 
		oLabel.css("width", "" + fFullWidth + "px");
		oLabel.css(sOrientation, "0");
	} else { 
		var fLabelLeft = fOffset - .5 * fLabelWidth;
		if (fLabelLeft < 0) {
			fLabelLeft = 0;
		}
		
		if (fLabelLeft + fLabelWidth > fFullWidth) {
			fLabelLeft = fFullWidth - fLabelWidth;
		}
		oLabel.css(sOrientation, fLabelLeft);
		oLabel.css("width", "" + (parseInt(fLabelWidth) + 1) + "px");
	}
};

sap.suite.ui.commons.BulletChart.prototype.getLocalizedColorMeaning = function(sColor) {
	return this._oRb.getText(("SEMANTIC_COLOR_"+sColor).toUpperCase());
};

sap.suite.ui.commons.BulletChart.prototype.getAltText = function() {
	var bIsActualSet = this.getActual()._isValueSet;
	var sScale = this.getScale();
	var sTargetValueLabel = this.getTargetValueLabel();
	var sMeaning = this.getLocalizedColorMeaning(this.getActual().getColor());
	
	var sAltText = "";
	
	if ("Delta" == this.getMode()) {
		if (this._isTargetValueSet && bIsActualSet) {
			var sDeltaValueLabel = this.getDeltaValueLabel();
			var sDValToShow = (sDeltaValueLabel) ? sDeltaValueLabel : "" + this._calculateDeltaValue();
			sAltText += this._oRb.getText("BULLETCHART_DELTA_TOOLTIP", [sDValToShow + sScale, sMeaning]);
        }
    } else {
    	if (bIsActualSet) {
    		var sActualValueLabel = this.getActualValueLabel();
    		var sAValToShow = (sActualValueLabel) ? sActualValueLabel : "" + this.getActual().getValue();
    		sAltText += this._oRb.getText("BULLETCHART_ACTUAL_TOOLTIP", [sAValToShow + sScale, sMeaning]);
   		}
   		
   		if (this._isForecastValueSet) {
   			sAltText += (this._isForecastValueSet) ? "\n" + this._oRb.getText("BULLETCHART_FORECAST_TOOLTIP", [this.getForecastValue() + sScale, sMeaning]) : "";
   		}
    }

    if (this._isTargetValueSet) {
    	var sTValToShow = (sTargetValueLabel) ? sTargetValueLabel : "" + this.getTargetValue();
    	sAltText += "\n" + this._oRb.getText("BULLETCHART_TARGET_TOOLTIP", [sTValToShow + sScale]); 
    }

    var aThresholds = this.getThresholds().sort(function(oFirst, oSecond) { return oFirst.getValue() - oSecond.getValue(); });

	for (var i = 0; i < aThresholds.length; i++) {
		var oThreshold = aThresholds[i];
		sAltText += "\n" + this._oRb.getText("BULLETCHART_THRESHOLD_TOOLTIP", [oThreshold.getValue() + this.getScale(), this.getLocalizedColorMeaning(oThreshold.getColor())]);
	}

	return sAltText;
};

sap.suite.ui.commons.BulletChart.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

sap.suite.ui.commons.BulletChart.prototype._adjustValueToMarker = function() {
	var oValue = jQuery.sap.byId(this.getId() + "-bc-bar-value");
	var oMarker = jQuery.sap.byId(this.getId() + "-bc-bar-value-marker");
	if (oValue.offset() && oMarker.offset()) {
		var fValueWidth = oValue.width();
		var fValueLeft = oValue.offset().left;
		var fMarkerWidth = oMarker.width();
		var fMarkerLeft = oMarker.offset().left; 
		
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			if (fMarkerLeft < fValueLeft) { // browser's subpixel problem fix
				oMarker.css("right", "");
				oMarker.offset({left: fValueLeft});
			} 
			if (fMarkerLeft+fMarkerWidth > fValueLeft+fValueWidth) { // bar value is less than marker min-width
				oMarker.css("right", "");
				oMarker.offset({left: fValueLeft + fValueWidth - fMarkerWidth});
			}
		} else {
			if (fMarkerLeft < fValueLeft) { // bar value is less than marker min-width
				oMarker.offset({left: fValueLeft});
			}
			if (fMarkerLeft+fMarkerWidth > fValueLeft+fValueWidth) { // browser's subpixel problem fix
				oValue.width(fMarkerLeft+fMarkerWidth-fValueLeft);
			}
		}
	}
};
}; // end of sap/suite/ui/commons/BulletChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BulletChartData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.BulletChartData.
jQuery.sap.declare("sap.suite.ui.commons.BulletChartData");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new BulletChartData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getColor color} : sap.suite.ui.commons.InfoTileValueColor (default: sap.suite.ui.commons.InfoTileValueColor.Neutral)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Thresholds data holder.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.BulletChartData
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.BulletChartData", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "float", group : "Misc", defaultValue : 0},
		"color" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileValueColor.Neutral}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.BulletChartData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.BulletChartData.extend
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.BulletChartData#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.BulletChartData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChartData#setValue
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The semantic color of the actual value.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>color</code>
 * @public
 * @name sap.suite.ui.commons.BulletChartData#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oColor  new value for property <code>color</code>
 * @return {sap.suite.ui.commons.BulletChartData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChartData#setColor
 * @function
 */


// Start of sap/suite/ui/commons/BulletChartData.js
/*!
 * @copyright@
 */
/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.BulletChartData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BulletChartData#setValue
 * @function
 */
 sap.suite.ui.commons.BulletChartData.prototype.setValue = function(fValue, bSuppressInvalidate) {
	 this._isValueSet = this._fnIsNumber(fValue);
	 return this.setProperty("value", this._isValueSet ? fValue : NaN, bSuppressInvalidate);
 };

 sap.suite.ui.commons.BulletChartData.prototype._fnIsNumber = function(n) {
	 return typeof n == 'number' && !isNaN(n) && isFinite(n);
 };
	 
}; // end of sap/suite/ui/commons/BulletChartData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BusinessCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.BusinessCard.
jQuery.sap.declare("sap.suite.ui.commons.BusinessCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BusinessCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getIconPath iconPath} : sap.ui.core.URI</li>
 * <li>{@link #getSecondTitle secondTitle} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getImageTooltip imageTooltip} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li>
 * <li>{@link #getFirstTitle firstTitle} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to display business card information including an image, first title (either URL link or text), second title, and multiple text lines.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.BusinessCard
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.BusinessCard", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"iconPath" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"secondTitle" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"imageTooltip" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}, 
		"firstTitle" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.BusinessCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.BusinessCard.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Title of the BusinessCard that describes its type.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setType
 * @function
 */


/**
 * Getter for property <code>iconPath</code>.
 * A path to the BusinessCard icon.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconPath</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getIconPath
 * @function
 */

/**
 * Setter for property <code>iconPath</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconPath  new value for property <code>iconPath</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setIconPath
 * @function
 */


/**
 * Getter for property <code>secondTitle</code>.
 * A short text line that describes this BusinessCard.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>secondTitle</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getSecondTitle
 * @function
 */

/**
 * Setter for property <code>secondTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSecondTitle  new value for property <code>secondTitle</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setSecondTitle
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setWidth
 * @function
 */


/**
 * Getter for property <code>imageTooltip</code>.
 * A tooltip that is set for an image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageTooltip</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getImageTooltip
 * @function
 */

/**
 * Setter for property <code>imageTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageTooltip  new value for property <code>imageTooltip</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setImageTooltip
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the BusinessCard body must be provided by the application developer.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>firstTitle</code>.<br/>
 * Any control that can display a title. Content of this control appears at the first position in BusinessCard. Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getFirstTitle
 * @function
 */


/**
 * Setter for the aggregated <code>firstTitle</code>.
 * @param {sap.ui.core.Control} oFirstTitle
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setFirstTitle
 * @function
 */
	

/**
 * Destroys the firstTitle in the aggregation 
 * named <code>firstTitle</code>.
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#destroyFirstTitle
 * @function
 */


// Start of sap/suite/ui/commons/BusinessCard.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.BusinessCard.prototype.init = function(){
//};
}; // end of sap/suite/ui/commons/BusinessCard.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ChartContainer.
jQuery.sap.declare("sap.suite.ui.commons.ChartContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ChartContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowPersonalization showPersonalization} : boolean (default: false)</li>
 * <li>{@link #getShowFullScreen showFullScreen} : boolean (default: false)</li>
 * <li>{@link #getFullScreen fullScreen} : boolean (default: false)</li>
 * <li>{@link #getShowLegend showLegend} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string (default: '')</li>
 * <li>{@link #getSelectorGroupLabel selectorGroupLabel} : string</li>
 * <li>{@link #getAutoAdjustHeight autoAdjustHeight} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDimensionSelectors dimensionSelectors} : sap.ui.core.Control[]</li>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.suite.ui.commons.ChartContainerContent[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ChartContainer#event:personalizationPress personalizationPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ChartContainer#event:contentChange contentChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ToolBar used for displaying one chart amongst several and provide additional features:
 * - multiple select boxes for selecting dimensions
 * - fullscreen toggle
 * - personalization icon
 * - showLegend toggle
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ChartContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ChartContainer", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"showPersonalization" : {type : "boolean", group : "Misc", defaultValue : false},
		"showFullScreen" : {type : "boolean", group : "Misc", defaultValue : false},
		"fullScreen" : {type : "boolean", group : "Misc", defaultValue : false},
		"showLegend" : {type : "boolean", group : "Misc", defaultValue : true},
		"title" : {type : "string", group : "Misc", defaultValue : ''},
		"selectorGroupLabel" : {type : "string", group : "Misc", defaultValue : null},
		"autoAdjustHeight" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
		"dimensionSelectors" : {type : "sap.ui.core.Control", multiple : true, singularName : "dimensionSelector"}, 
		"content" : {type : "sap.suite.ui.commons.ChartContainerContent", multiple : true, singularName : "content"}, 
		"toolBar" : {type : "sap.m.Toolbar", multiple : false, visibility : "hidden"}
	},
	events : {
		"personalizationPress" : {}, 
		"contentChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ChartContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ChartContainer.extend
 * @function
 */

sap.suite.ui.commons.ChartContainer.M_EVENTS = {'personalizationPress':'personalizationPress','contentChange':'contentChange'};


/**
 * Getter for property <code>showPersonalization</code>.
 * Display or not the personalization icon into the ChartContainer
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showPersonalization</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getShowPersonalization
 * @function
 */

/**
 * Setter for property <code>showPersonalization</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowPersonalization  new value for property <code>showPersonalization</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setShowPersonalization
 * @function
 */


/**
 * Getter for property <code>showFullScreen</code>.
 * Display or not the full screen icon into the ChartContainer
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showFullScreen</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getShowFullScreen
 * @function
 */

/**
 * Setter for property <code>showFullScreen</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowFullScreen  new value for property <code>showFullScreen</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setShowFullScreen
 * @function
 */


/**
 * Getter for property <code>fullScreen</code>.
 * Display the chart and the toolbar in full screen or normal mode
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fullScreen</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getFullScreen
 * @function
 */

/**
 * Setter for property <code>fullScreen</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFullScreen  new value for property <code>fullScreen</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setFullScreen
 * @function
 */


/**
 * Getter for property <code>showLegend</code>.
 * Display or not the legend on the contained charts.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLegend</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getShowLegend
 * @function
 */

/**
 * Setter for property <code>showLegend</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLegend  new value for property <code>showLegend</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setShowLegend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The string to display instead of the select boxes if there are no dimensions to display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setTitle
 * @function
 */


/**
 * Getter for property <code>selectorGroupLabel</code>.
 * Custom Label for Selectors Group.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectorGroupLabel</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getSelectorGroupLabel
 * @function
 */

/**
 * Setter for property <code>selectorGroupLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectorGroupLabel  new value for property <code>selectorGroupLabel</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setSelectorGroupLabel
 * @function
 */


/**
 * Getter for property <code>autoAdjustHeight</code>.
 * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine height from its parent.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoAdjustHeight</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getAutoAdjustHeight
 * @function
 */

/**
 * Setter for property <code>autoAdjustHeight</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoAdjustHeight  new value for property <code>autoAdjustHeight</code>
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#setAutoAdjustHeight
 * @function
 */


/**
 * Getter for aggregation <code>dimensionSelectors</code>.<br/>
 * Dimension Selects.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getDimensionSelectors
 * @function
 */


/**
 * Inserts a dimensionSelector into the aggregation named <code>dimensionSelectors</code>.
 *
 * @param {sap.ui.core.Control}
 *          oDimensionSelector the dimensionSelector to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the dimensionSelector should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the dimensionSelector is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the dimensionSelector is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#insertDimensionSelector
 * @function
 */

/**
 * Adds some dimensionSelector <code>oDimensionSelector</code> 
 * to the aggregation named <code>dimensionSelectors</code>.
 *
 * @param {sap.ui.core.Control}
 *            oDimensionSelector the dimensionSelector to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#addDimensionSelector
 * @function
 */

/**
 * Removes an dimensionSelector from the aggregation named <code>dimensionSelectors</code>.
 *
 * @param {int | string | sap.ui.core.Control} vDimensionSelector the dimensionSelector to remove or its index or id
 * @return {sap.ui.core.Control} the removed dimensionSelector or null
 * @public
 * @name sap.suite.ui.commons.ChartContainer#removeDimensionSelector
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>dimensionSelectors</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ChartContainer#removeAllDimensionSelectors
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>dimensionSelectors</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oDimensionSelector the dimensionSelector whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ChartContainer#indexOfDimensionSelector
 * @function
 */
	

/**
 * Destroys all the dimensionSelectors in the aggregation 
 * named <code>dimensionSelectors</code>.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#destroyDimensionSelectors
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * CharToolBar Content aggregation. Only vizFrame, sap.m.Table and sap.ui.table.Table can be embedded.
 * 
 * <strong>Note</strong>: this is the default aggregation for ChartContainer.
 * @return {sap.suite.ui.commons.ChartContainerContent[]}
 * @public
 * @name sap.suite.ui.commons.ChartContainer#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.suite.ui.commons.ChartContainerContent}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.suite.ui.commons.ChartContainerContent}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.suite.ui.commons.ChartContainerContent} vContent the content to remove or its index or id
 * @return {sap.suite.ui.commons.ChartContainerContent} the removed content or null
 * @public
 * @name sap.suite.ui.commons.ChartContainer#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.ChartContainerContent[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ChartContainer#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.ChartContainerContent</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.ChartContainerContent}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ChartContainer#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#destroyContent
 * @function
 */


/**
 * Event fired when a user clicks on the personalization icon
 *
 * @name sap.suite.ui.commons.ChartContainer#personalizationPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'personalizationPress' event of this <code>sap.suite.ui.commons.ChartContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ChartContainer</code>.<br/> itself. 
 *  
 * Event fired when a user clicks on the personalization icon
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ChartContainer</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#attachPersonalizationPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'personalizationPress' event of this <code>sap.suite.ui.commons.ChartContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#detachPersonalizationPress
 * @function
 */

/**
 * Fire event personalizationPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ChartContainer#firePersonalizationPress
 * @function
 */


/**
 * Event fired when user change the Content displayed.
 *
 * @name sap.suite.ui.commons.ChartContainer#contentChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.selectedItemId Id of the Item selected.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'contentChange' event of this <code>sap.suite.ui.commons.ChartContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ChartContainer</code>.<br/> itself. 
 *  
 * Event fired when user change the Content displayed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ChartContainer</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#attachContentChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'contentChange' event of this <code>sap.suite.ui.commons.ChartContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainer#detachContentChange
 * @function
 */

/**
 * Fire event contentChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItemId' of type <code>string</code> Id of the Item selected.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ChartContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ChartContainer#fireContentChange
 * @function
 */


// Start of sap/suite/ui/commons/ChartContainer.js
jQuery.sap.declare("sap.suite.ui.commons.ChartContainer");
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

//jQuery.sap.require("sap.m.Bar");
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained

jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained

sap.ui.getCore().loadLibrary("sap.viz");

sap.suite.ui.commons.ChartContainer.prototype.init = function() {

	this._aChartIcons = [];
	this._selectedChart = null;
	this._dimSelectorsAll = [];
	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	this.resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);

	//Right side..
	this._oFullScreenButton = new sap.m.Button({
		icon : "sap-icon://full-screen",
		type : sap.m.ButtonType.Transparent,
		tooltip : this.resBundle.getText("CHARTCONTAINER_FULLSCREEN"),
		press : jQuery.proxy(this.toggleFullScreen, this)
	});

	this._oPopup = new sap.ui.core.Popup({
		modal : true,
		shadow : false,
		autoClose : false
	});
	this._oPopup._applyPosition = function(oPostion) {
		var $Ref = this._$();
		$Ref.css({
			left : "0px",
			top : "0px",
			right : "0px",
			bottom : "0px"
		});
	};

	this._oShowLegendButton = new sap.m.Button({
		icon : "sap-icon://legend",
		type : sap.m.ButtonType.Transparent,
		tooltip : this.resBundle.getText("CHARTCONTAINER_LEGEND"),
		press : jQuery.proxy(this._onLegendButtonPress, this)
	});

	this._oShowAllChartButton = new sap.m.Button({
		type : sap.m.ButtonType.Transparent,
		press : jQuery.proxy(this._onShowAllChartPress, this)
	});

	this._oPhonePopoverButton = new sap.m.Button({
		icon : "sap-icon://overflow",
		type : sap.m.ButtonType.Transparent,
		press : jQuery.proxy(this._onPhonePopoverPress, this)
	});

	this._oPersonalizationButton = new sap.m.Button({
		icon : "sap-icon://action-settings",
		type : sap.m.ButtonType.Transparent,
		tooltip : this.resBundle.getText("CHARTCONTAINER_PERSONALIZE"),
		press : jQuery.proxy(this._oPersonalizationPress, this)
	});
	this._oActiveChartButton = null;

	this._oAllChartList = new sap.m.List({
		mode : sap.m.ListMode.SingleSelectMaster,
		showSeparators : sap.m.ListSeparators.None,
		includeItemInSelection : true,
		width : "20em",
		select : jQuery.proxy(function(oEvent) {
			var sChartId = oEvent.getParameter("listItem").getCustomData()[0].getValue();
			this._switchChart(sChartId);
		}, this)
	});

	this._oAllIconsList = new sap.m.List({
		mode : sap.m.ListMode.SingleSelectMaster,
		showSeparators : sap.m.ListSeparators.None,
		includeItemInSelection : true,
		width : "20em",
		rememberSelections : false,
		select : jQuery.proxy(function(oEvent) {
			var customData = oEvent.getParameter("listItem").getCustomData()[0];//[0].getValue();
			// do a getKey here and match and then do.. or pass the customData object to a function..
			this._switchFunctionPhone(customData);
		}, this)
	});

	this._oShowAllChartPopover = new sap.m.ResponsivePopover({
		placement : sap.m.PlacementType.Bottom,
		showHeader : false,
		content : [this._oAllChartList]
	});

/*	this._oPhonePopover = new sap.m.ResponsivePopover({
		placement : sap.m.PlacementType.Bottom,
		showHeader : true,
		title : this.resBundle.getText("CHARTCONTAINER_OPTIONS"),
		content : [this._oAllIconsList]
	});*/
	
	this._oPhoneDialog = new sap.m.Dialog(this.getId() + "-phone_dialog", {
		title : this.resBundle.getText("CHARTCONTAINER_OPTIONS"),
		stretch : true,
		content : [this._oAllIconsList],
		beginButton : new sap.m.Button({
			text : this.resBundle.getText("CHARTCONTAINER_CLOSE"),
			press : jQuery.proxy(function(oEvent) {
				this._oPhoneDialog.close();
			}, this)
		})
	});
	this._oPhoneDialog.addStyleClass("sapUiPopupWithPadding");

	this._oSelectedChart = null;
	
	this._oChartSegmentedButton = new sap.m.SegmentedButton();

	// Left side...
	this._oChartTitle = new sap.m.Label();
	// this._oViewBy = new sap.m.Link({
	this._oViewBy = new sap.m.Button({
		text : this.resBundle.getText("CHARTCONTAINER_VIEWBY"),
		type : sap.m.ButtonType.Transparent,
		press : jQuery.proxy(this._showViewByPopover, this)
	//		press : function(oEvent) {
	//			this._ViewByPopover.openBy(oEvent.getSource());
	//		}	
	});
	this._oViewByPopover = new sap.m.ResponsivePopover(this.getId() + "-viewby_popover", {
		title : this.resBundle.getText("CHARTCONTAINER_VIEWBY"),
		showHeader : false,
		placement : sap.m.PlacementType.Bottom,
		contentHeight : "15rem",
		contentWidth : "15rem"
	});
  this._oViewByPopover.addStyleClass("sapUiPopupWithPadding");
  
	this._oViewByDialog = new sap.m.Dialog(this.getId() + "-viewby_dialog", {
		title : this.resBundle.getText("CHARTCONTAINER_VIEWBY"),
		stretch : true,
		beginButton : new sap.m.Button({
			text : this.resBundle.getText("CHARTCONTAINER_CLOSE"),
			press : jQuery.proxy(function(oEvent) {
				this._oViewByDialog.close();
			}, this)
		})
	});
	this._oViewByDialog.addStyleClass("sapUiPopupWithPadding");
  
	this._oToolBar = new sap.m.Toolbar({
// Use ToolBarDesign.Auto
//	design : sap.m.ToolbarDesign.Transparent,
		content : [new sap.m.ToolbarSpacer()]
	/// contents are set at onBeforeRendering.
	});
	this.setAggregation("toolBar", this._oToolBar);

	this._currentRangeName = sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD).name;
	sap.ui.Device.media.attachHandler(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
  
	this.sResizeListenerId = null;
	if (jQuery.device.is.desktop) {
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
	} else {
		sap.ui.Device.orientation.attachHandler(this._performHeightChanges, this);
		sap.ui.Device.resize.attachHandler(this._performHeightChanges, this);
	}
  
};

sap.suite.ui.commons.ChartContainer.prototype.toggleFullScreen = function() {
	var fullScreen = this.getProperty("fullScreen");
	var sId;
	var sHeight;
	if (fullScreen) {
		this.closeFullScreen();
		this.setProperty("fullScreen", false);
		sId = this.getSelectedChart().getContent().getId();
		this.getSelectedChart().getContent().setWidth("100%");
		sHeight = this._chartHeight[sId];
		if ((sHeight !== 0) && (sHeight !== null)) {
			this.getSelectedChart().getContent().setHeight(sHeight);
		}
	} else {
		var aObjects = this.getAggregation("content");
		this._chartHeight = {};
		if (aObjects) {
			for (var i = 0; i < aObjects.length; i++) {
				sId = aObjects[i].getContent().getId();
				if (typeof aObjects[i].getContent().getHeight == 'function') {
					sHeight = aObjects[i].getContent().getHeight();
				} else {
					sHeight = 0;
				}
				this._chartHeight[sId] = sHeight;
				}
			}
		this.openFullScreen(this, true);
		this.setProperty("fullScreen", true);
	}
	var sIcon = (fullScreen ? "sap-icon://full-screen" : "sap-icon://exit-full-screen");
	this._oFullScreenButton.setIcon(sIcon);
};

sap.suite.ui.commons.ChartContainer.prototype.openFullScreen = function(oContent, bNeedsScroll) {
	if ((bNeedsScroll != null) && (bNeedsScroll == true)) {
		this._oScrollEnablement = new sap.ui.core.delegate.ScrollEnablement(oContent, oContent.getId() + "-wrapper", {
			horizontal : true,
			vertical : true
		});
	}
	this.$content = oContent.$();
	if (this.$content) {

		// var domContent = oContent.getDomRef();
		//this.$parentNode = this.$content.parent();
		this.$tempNode = jQuery("<div></div>"); // id='" + this.$content.attr("id")+"-overlay"+ "'
		this.$content.before(this.$tempNode);

		this._$overlay = jQuery("<div id='" + jQuery.sap.uid() + "'></div>");
		this._$overlay.addClass("sapCaUiOverlay");
		this._$overlay.append(this.$content);
		this._oPopup.setContent(this._$overlay);
	} else {
		jQuery.sap.log.warn("Overlay: content does not exist or contains more than one child");
	}
//	this._oToolBar.setDesign(sap.m.ToolbarDesign.Solid);
	this._oPopup.open(200);

};

sap.suite.ui.commons.ChartContainer.prototype.closeFullScreen = function() {
	if (this._oScrollEnablement != null) {
		this._oScrollEnablement.destroy();
		this._oScrollEnablement = null;
	}
	this.$tempNode.replaceWith(this.$content);
	this._oToolBar.setDesign(sap.m.ToolbarDesign.Auto);
	this._oPopup.close(200);
	this._$overlay.remove();
};

sap.suite.ui.commons.ChartContainer.prototype.onAfterRendering = function(oEvent) {
  if (this._chartContentChange) {
  	this._chartChange();
  }
	var that = this;
	if ((this.sResizeListenerId == null) && (jQuery.device.is.desktop)) {
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
	}
	if (this.getAutoAdjustHeight() || this.getFullScreen()) {
		jQuery.sap.delayedCall(100, this, function() {
			that._performHeightChanges();
		});
	}
};

sap.suite.ui.commons.ChartContainer.prototype._performHeightChanges = function() {
	if (this.getAutoAdjustHeight() || this.getFullScreen()) {
		var jThis = this.$();
		var _chartContainerHeight = jThis.height();
		var _toolBarHeight = 0;
		var _chartHeight = 0;
		// Only adjust height after both toolbar and chart are rendered in DOM
		if ((jThis.find('.sapSuiteUiCommonsChartContainerToolBarArea').children()[0])
				&& (jThis.find('.sapSuiteUiCommonsChartContainerChartArea').children()[0])) {
			_toolBarHeight = jThis.find('.sapSuiteUiCommonsChartContainerToolBarArea').children()[0].clientHeight;
			_chartHeight = jThis.find('.sapSuiteUiCommonsChartContainerChartArea').children()[0].clientHeight;
			// Give 5px room to avoid rounding and scroll bar
			var _newHeight = _chartContainerHeight - _toolBarHeight;
			var innerChart = this.getSelectedChart().getContent();
			if (innerChart instanceof sap.viz.ui5.controls.VizFrame) {
				if (((_chartHeight > _newHeight) || (_newHeight - _chartHeight > 5)) && (_newHeight > 0)) {
					if (innerChart.setHeight()) {
						// innerChart.setHeight((_chartContainerHeight - _toolBarHeight) + "px");
						innerChart.setHeight(_newHeight + "px");
					}
				}
			} else if (innerChart.getDomRef().offsetWidth !== this.getDomRef().clientWidth) {
				// For table/non-vizFrame case, if width changes during resize event, force a rerender to have it fit 100% width
				this.rerender();
			}
		}
	}
};

sap.suite.ui.commons.ChartContainer.prototype.onBeforeRendering = function(oEvent) {
  this._adjustDisplay(oEvent);
};

sap.suite.ui.commons.ChartContainer.prototype._onLegendButtonPress = function(oEvent) {
//		this.setShowLegend(!this.getShowLegend());
	if (this.getSelectedChart()) {
		var selectedChart = this.getSelectedChart().getContent();
		if (selectedChart instanceof sap.viz.ui5.controls.VizFrame) {
			var legendOn;
			if (selectedChart.getVizProperties().legendGroup.computedVisibility) {
				legendOn = false;
			} else {
				legendOn = true;
			}
			if (this._currentRangeName === 'Phone') {
				jQuery.sap.delayedCall(200, this, function() {
					this.setShowLegend(legendOn);
				});
			} else {
				this.setShowLegend(legendOn);
			}
		} else {
			this.setShowLegend(!this.getShowLegend());
		}
	} else {
		this.setShowLegend(!this.getShowLegend());
	}
};

sap.suite.ui.commons.ChartContainer.prototype._onShowAllChartPress = function(oEvent) {
	this._oShowAllChartPopover.openBy(this._oShowAllChartButton);
};

sap.suite.ui.commons.ChartContainer.prototype._onPhonePopoverPress = function(oEvent) {
	this._oPhoneDialog.open();
	this._oAllIconsList.removeSelections();
//	this._oPhonePopover.openBy(this._oPhonePopoverButton);
};

sap.suite.ui.commons.ChartContainer.prototype._oPersonalizationPress = function(oEvent) {
	this.firePersonalizationPress();
};

sap.suite.ui.commons.ChartContainer.prototype._switchChart = function(sChartId) {
	var oRelatedButton = null;
	for (var i = 0; !oRelatedButton && i < this._aChartIcons.length; i++) {
		if (this._aChartIcons[i].getCustomData()[0].getValue() === sChartId) {
			oRelatedButton = this._aChartIcons[i];
		}
	}
	if (oRelatedButton) {
		if (this._oActiveChartButton) {
			this._oActiveChartButton.removeStyleClass("activeButton");
		}
		this._oActiveChartButton = oRelatedButton;
		this._oActiveChartButton.addStyleClass("activeButton");
	}

	var oChart = this._findChartById(sChartId);

	this.setSelectedChart(oChart);
	if (this._oShowAllChartPopover.isOpen()) {
		this._oShowAllChartPopover.close();
	}
	this.fireContentChange({
		selectedItemId : sChartId
	}); // fire the change event with id of the newly selected item..
	this.rerender();//invalidate();
};

sap.suite.ui.commons.ChartContainer.prototype._switchFunctionPhone = function(customData) {
	var oFunction = customData.getKey();
	var oValue = customData.getValue();
	if (oFunction === 'chartId') {
		this._switchChart(oValue);
	} else if (oFunction === 'function') {
		//perform the function
		if (oValue === 'legend') {
			this._onLegendButtonPress();
		} else if (oValue === 'personalization') {
			this._oPersonalizationPress();
		} else if (oValue === 'fullscreen') {
			this.toggleFullScreen();
		}
	}
	//close the phone popup..
/*	if (this._oPhonePopover.isOpen()) {
		this._oPhonePopover.close();
	}*/
	if (this._oPhoneDialog.isOpen()) {
		this._oPhoneDialog.close();
	}
};

sap.suite.ui.commons.ChartContainer.prototype.setTitle = function(sValue) {
	this._oChartTitle.setText(sValue);
	this.setProperty("title", sValue);
};

sap.suite.ui.commons.ChartContainer.prototype.setShowLegend = function(bValue) {
	this.setProperty("showLegend", bValue);

	//propagate to all charts
	var aContents = this.getAggregation("content");

	if (aContents) {
		for (var i = 0; i < aContents.length; i++) {
			var innerChart = aContents[i].getContent();
			if (innerChart.setVizProperties) {
				// innerChart.setShowLegend(bValue);
				innerChart.setVizProperties({
					legend : {
						visible : bValue
					},
					sizeLegend : {
						visible : bValue
					}
				});
				jQuery.sap.log.info("ChartContainer: propagate showLegend to chart id " + innerChart.getId());
			} else {
				jQuery.sap.log.info("ChartContainer: chart id " + innerChart.getId()
						+ " is missing the setVizProperties property");
			}
		}
		if (this.getSelectedChart()) {
			var selectedChart = this.getSelectedChart().getContent();
			if (selectedChart instanceof sap.viz.ui5.controls.VizFrame) {
				this._legendPopup = selectedChart.getResponsiveLegend();
				var openByControl = this._oShowLegendButton;
				if (this._currentRangeName === 'Phone') {
					openByControl = this._oPhonePopoverButton;
				}
				this._legendPopup.setOpenBy(openByControl);
				if (bValue) {
					this._legendPopup.show();
				} else {
					this._legendPopup.hide();
				}
			}
		}
	}
};

sap.suite.ui.commons.ChartContainer.prototype.addDimensionSelector = function(oObject) {
	this.addAggregation("dimensionSelectors", oObject);
	this._dimSelectorsAll.push(oObject);
};

sap.suite.ui.commons.ChartContainer.prototype.addContent = function(oObject) {
//	this._onAddingChart(oObject);
	this.addAggregation("content", oObject);
	this._chartContentChange = true;
};
sap.suite.ui.commons.ChartContainer.prototype.insertContent = function(oObject, iIndex) {
//	this._onAddingChart(oObject);
	this.insertAggregation("content", oObject, iIndex);
	this._chartContentChange = true;
};

sap.suite.ui.commons.ChartContainer.prototype.updateContent = function(sReason) {
	this.updateAggregation("content");
	this._chartContentChange = true;
};


/*sap.suite.ui.commons.ChartContainer.prototype._onAddingChart = function(oObject) {
	var innerChart = oObject.getContent();
	if (innerChart.setVizProperties) {
		innerChart.setVizProperties({
			legend : {
				visible : this.getShowLegend()
			}
		});
	}
	if (innerChart.setWidth) {
		innerChart.setWidth("100%");
	}
	this.addAggregation("content", oObject);
	var oButtonIcon = new sap.m.Button({
		icon : oObject.getIcon(),
		type : sap.m.ButtonType.Transparent,
		tooltip : oObject.getTitle(),
		customData : [new sap.ui.core.CustomData({
			key : 'chartId',
			value : innerChart.getId()
		})],
		press : jQuery.proxy(function(oEvent) {
			var sChartId = oEvent.getSource().getCustomData()[0].getValue();
			this._switchChart(sChartId);
		}, this)
	});
	this._aChartIcons.push(oButtonIcon);

	var oShowAllItem = new sap.m.StandardListItem({
		icon : oButtonIcon.getIcon(),
		title : oObject.getTitle(),
		customData : [new sap.ui.core.CustomData({
			key : 'chartId',
			value : innerChart.getId()
		})]
	});
	this._oAllChartList.addItem(oShowAllItem);

	//the first added chart is the selected and active one
	if (this.getAggregation("content").length == 1) {
		this._oAllChartList.setSelectedItem(oShowAllItem);
		this.setSelectedChart(oObject);
		this._oActiveChartButton = oButtonIcon;
	}
};*/

sap.suite.ui.commons.ChartContainer.prototype._chartChange = function() {
  var aCharts = this.getContent();
  this._aChartIcons = [];
	this._oAllChartList.removeAllItems();
	if (aCharts) {
		for (var i = 0; i < aCharts.length; i++) {
			var innerChart = aCharts[i].getContent();
			if (innerChart.setVizProperties) {
				innerChart.setVizProperties({
					legend : {
						visible : this.getShowLegend()
					},
					sizeLegend : {
						visible : this.getShowLegend()
					}
				});
			}
			if (innerChart.setWidth) {
				innerChart.setWidth("100%");
			}
			var oButtonIcon = new sap.m.Button({
				icon : aCharts[i].getIcon(),
				type : sap.m.ButtonType.Transparent,
				tooltip : aCharts[i].getTitle(),
				customData : [new sap.ui.core.CustomData({
					key : 'chartId',
					value : innerChart.getId()
				})],
				press : jQuery.proxy(function(oEvent) {
					var sChartId = oEvent.getSource().getCustomData()[0].getValue();
					this._switchChart(sChartId);
				}, this)
			});
			this._aChartIcons.push(oButtonIcon);

			var oShowAllItem = new sap.m.StandardListItem({
				icon : oButtonIcon.getIcon(),
				title : aCharts[i].getTitle(),
				customData : [new sap.ui.core.CustomData({
					key : 'chartId',
					value : innerChart.getId()
				})]
			});
			this._oAllChartList.addItem(oShowAllItem);
			if (i === 0) {
				this._oAllChartList.setSelectedItem(oShowAllItem);
				this.setSelectedChart(aCharts[i]);
				this._oActiveChartButton = oButtonIcon;
			}
		}
	}
	this._chartContentChange = false;
};

sap.suite.ui.commons.ChartContainer.prototype.setSelectedChart = function(oObject) {
	//show/hide the showLegend buttons
	var oChart = oObject.getContent();
	this._oChartTitle.setText(oObject.getTitle());
	var bShowChart = (oChart instanceof sap.viz.ui5.controls.VizFrame); //hide legend icon if table, show if chart
	this._oShowLegendButton.setVisible(bShowChart);
	this._oShowAllChartButton.setIcon(oObject.getIcon());
	this._oShowAllChartButton.setTooltip(oObject.getTitle());
	this._oSelectedChart = oObject;
};

sap.suite.ui.commons.ChartContainer.prototype.getSelectedChart = function() {
	return this._oSelectedChart;
};

sap.suite.ui.commons.ChartContainer.prototype._findChartById = function(sId) {
	var oObject = null;
	var aObjects = this.getAggregation("content");
	if (aObjects) {
		for (var i = 0; !oObject && i < aObjects.length; i++) {
			if (aObjects[i].getContent().getId() === sId) {
				oObject = aObjects[i];
			}
		}
	}
	return oObject;
};

sap.suite.ui.commons.ChartContainer.prototype._preparePhonePopup = function() {
	this._oAllIconsList.removeAllItems();
	var oIconsItems = this._oAllChartList.getItems();
	for (var i = 0; i < oIconsItems.length; i++) {
		var chartId = oIconsItems[i].getCustomData()[0].getValue();
		var oShowAllIconsItem = new sap.m.StandardListItem({
			icon : oIconsItems[i].getIcon(),
			title : oIconsItems[i].getTitle(),
			customData : [new sap.ui.core.CustomData({
				key : 'chartId',
				value : chartId
			})]
		});
		this._oAllIconsList.addItem(oShowAllIconsItem);
	}
	if (this._oShowLegendButton.getVisible()) {
		var oPhoneLegendItem = new sap.m.StandardListItem({
			icon : this._oShowLegendButton.getIcon(),
			title : this.resBundle.getText("CHARTCONTAINER_LEGEND"),
			customData : [new sap.ui.core.CustomData({
				key : 'function',
				value : 'legend'
			})]
		});
		this._oAllIconsList.addItem(oPhoneLegendItem);
	}
	if (this.getShowPersonalization()) {
		var oPhonePersonalizationItem = new sap.m.StandardListItem({
			icon : this._oPersonalizationButton.getIcon(),
			title : this.resBundle.getText("CHARTCONTAINER_PERSONALIZE"),
			customData : [new sap.ui.core.CustomData({
				key : 'function',
				value : 'personalization'
			})]
		});
		this._oAllIconsList.addItem(oPhonePersonalizationItem);
	}
	if (this.getShowFullScreen()) {
		var oPhoneFullscreenItem = new sap.m.StandardListItem({
			icon : this._oFullScreenButton.getIcon(),
			title : this.resBundle.getText("CHARTCONTAINER_FULLSCREEN"),
			customData : [new sap.ui.core.CustomData({
				key : 'function',
				value : 'fullscreen'
			})]
		});
		this._oAllIconsList.addItem(oPhoneFullscreenItem);
	}
};

sap.suite.ui.commons.ChartContainer.prototype._adjustIconsDisplay = function(oEvent) {
//	var isPhone = sap.ui.Device.system.phone;
	//var isTab = sap.ui.Device.system.tablet;
	//var isDesktop = sap.ui.Device.system.desktop;

//	if (!isPhone) { // same behavior for Tablet/Desktop wrt icons.
	if (this._currentRangeName !== 'Phone') {
		if (this._aChartIcons.length > 3) {
			//show only allChart icon
			this._oToolBar.addContent(this._oShowAllChartButton);
		} else {
		  this._oChartSegmentedButton.removeAllButtons();
			for (var iChart = 0; iChart < this._aChartIcons.length; iChart++) {
//				this._oToolBar.addContent(this._aChartIcons[iChart]);
				this._oChartSegmentedButton.addButton(this._aChartIcons[iChart]);
			}
			this._oToolBar.addContent(this._oChartSegmentedButton);
		}
		this._oToolBar.addContent(this._oShowLegendButton);
		if (this.getShowPersonalization()) {
			this._oToolBar.addContent(this._oPersonalizationButton);
		}
		if (this.getShowFullScreen()) {
			this._oToolBar.addContent(this._oFullScreenButton);
		}
	} else {
		// add the phone popover
		this._preparePhonePopup();
		this._oToolBar.addContent(this._oPhonePopoverButton);
		// icon for ... is: horizontal-grip or overflow 
	}
};

sap.suite.ui.commons.ChartContainer.prototype._adjustSelectorDisplay = function(oEvent) {
	var dimensionSelectors = this._dimSelectorsAll;//this.getDimensionSelectors();
	if (dimensionSelectors.length == 0) {
		this._oViewBy.setVisible(false);
		this._oChartTitle.setVisible(true);
		this._oToolBar.addContent(this._oChartTitle);
	} else {
		this._oChartTitle.setVisible(false);
		if (dimensionSelectors.length == 1) {
			this._oViewBy.setVisible(false);
			this._oToolBar.insertContent(dimensionSelectors[0], 0);
		} else {
			if ((this._currentRangeName === 'Phone') || (this._currentRangeName === 'Tablet')
					|| ((this._currentRangeName === 'Desktop') && (dimensionSelectors.length > 3))) {
				this._oViewBy.setVisible(true);
				this._oToolBar.addContent(this._oViewBy);
				this._oViewByPopover.removeAllContent();
				this._oViewByDialog.removeAllContent();
				for (var i = 0; i < dimensionSelectors.length; i++) {
					if (dimensionSelectors[i] instanceof sap.m.Select) {
						dimensionSelectors[i].setWidth("100%");
						dimensionSelectors[i].setAutoAdjustWidth(false);
					}
					if (this._currentRangeName === 'Phone') {
						this._oViewByDialog.addContent(dimensionSelectors[i]);
					} else {
						this._oViewByPopover.addContent(dimensionSelectors[i]);
					}
				}
			} else {
				this._oViewBy.setVisible(false);
				if (this._oViewByPopover.getDomRef()) {
					this._oViewByPopover.getDomRef().remove();
				}
				if (this._oViewByDialog.getDomRef()) {
					this._oViewByDialog.getDomRef().remove();
				}
				for (var i = 0; i < dimensionSelectors.length; i++) {
				  if (typeof dimensionSelectors[i].setAutoAdjustWidth == 'function') {
				  	dimensionSelectors[i].setAutoAdjustWidth(true);
				  }
					this._oToolBar.insertContent(dimensionSelectors[i], i);
				}
			}
		}
	}

};

sap.suite.ui.commons.ChartContainer.prototype._showViewByPopover = function(oEvent) {
	if (this._currentRangeName === 'Phone') {
		this._oViewByDialog.open();
	} else {
		this._oViewByPopover.openBy(this._oViewBy);
	}
};

sap.suite.ui.commons.ChartContainer.prototype._adjustDisplay = function(oEvent) {
	this._oToolBar.removeAllContent();
	this._adjustSelectorDisplay(oEvent);
	this._oToolBar.addContent(new sap.m.ToolbarSpacer());
	this._adjustIconsDisplay(oEvent);
};

sap.suite.ui.commons.ChartContainer.prototype.setSelectorGroupLabel = function(selectorGroupLabel) {
	this.setProperty("selectorGroupLabel", selectorGroupLabel, true);
	this._oViewBy.setText(selectorGroupLabel);
	this._oViewByPopover.setTitle(selectorGroupLabel);
	this._oViewByDialog.setTitle(selectorGroupLabel);
};

sap.suite.ui.commons.ChartContainer.prototype._handleMediaChange = function(oEvent) {
	this._currentRangeName = sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD).name;
	this._adjustDisplay(oEvent);
};

sap.suite.ui.commons.ChartContainer.prototype.exit = function() {
	sap.ui.Device.media.detachHandler(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
	if (this._oFullScreenButton) {
		this._oFullScreenButton.destroy();
		this._oFullScreenButton = undefined;
	}
	if (this._oPopup) {
		this._oPopup.destroy();
		this._oPopup = undefined;
	}
	if (this._oShowLegendButton) {
		this._oShowLegendButton.destroy();
		this._oShowLegendButton = undefined;
	}
	if (this._oShowAllChartButton) {
		this._oShowAllChartButton.destroy();
		this._oShowAllChartButton = undefined;
	}
	if (this._oPhonePopoverButton) {
		this._oPhonePopoverButton.destroy();
		this._oPhonePopoverButton = undefined;
	}
	if (this._oPersonalizationButton) {
		this._oPersonalizationButton.destroy();
		this._oPersonalizationButton = undefined;
	}
	if (this._oActiveChartButton) {
		this._oActiveChartButton.destroy();
		this._oActiveChartButton = undefined;
	}
	if (this._oAllChartList) {
		this._oAllChartList.destroy();
		this._oAllChartList = undefined;
	}
	if (this._oAllIconsList) {
		this._oAllIconsList.destroy();
		this._oAllIconsList = undefined;
	}
	if (this._oShowAllChartPopover) {
		this._oShowAllChartPopover.destroy();
		this._oShowAllChartPopover = undefined;
	}
/*	if (this._oPhonePopover) {
		this._oPhonePopover.destroy();
		this._oPhonePopover = undefined;
	}*/
	if (this._oChartSegmentedButton) {
		this._oChartSegmentedButton.destroy();
		this._oChartSegmentedButton = undefined;
	}
	if (this._oSelectedChart) {
		this._oSelectedChart.destroy();
		this._oSelectedChart = undefined;
	}
	if (this._oViewBy) {
		this._oViewBy.destroy();
		this._oViewBy = undefined;
	}
	if (this._oViewByPopover) {
		this._oViewByPopover.destroy();
		this._oViewByPopover = undefined;
	}
	if (this._oViewByDialog) {
		this._oViewByDialog.destroy();
		this._oViewByDialog = undefined;
	}
	if (this._oPhoneDialog) {
		this._oPhoneDialog.destroy();
		this._oPhoneDialog = undefined;
	}
	if (this._oToolBar) {
		this._oToolBar.destroy();
		this._oToolBar = undefined;
	}
	if (jQuery.device.is.desktop && this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	} else {
		sap.ui.Device.orientation.detachHandler(this._performHeightChanges, this);
		sap.ui.Device.resize.detachHandler(this._performHeightChanges, this);
	}
	
};

}; // end of sap/suite/ui/commons/ChartContainer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ChartContainerContent.
jQuery.sap.declare("sap.suite.ui.commons.ChartContainerContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ChartContainerContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Content Aggregation for ChartContainer.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ChartContainerContent", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"icon" : {type : "string", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ChartContainerContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ChartContainerContent.extend
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon of the Chart.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.ChartContainerContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#setIcon
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title of the Chart/Table
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.ChartContainerContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Chart or Table as content of the ChartTollBar. Supported Types:
 * - vizFrame
 * - sap.m.Table
 * - sap.ui.table.Table
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.ChartContainerContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.ChartContainerContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartContainerContent#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/ChartContainerContent.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ChartContainerContent.prototype.init = function(){
   this._oldWidth = 0;
   this._oldHeight = 0;
   // have a method which makes the size of contents to 100% or back to this.. 
};




}; // end of sap/suite/ui/commons/ChartContainerContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.ChartTileRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class ChartTile renderer.
 * @static
 */
sap.suite.ui.commons.ChartTileRenderer = sap.ui.core.Renderer.extend(sap.suite.ui.commons.InfoTileRenderer);

/**
 * Renders the HTML for the content of the given control, using the provided {@link sap.ui.core.RenderManager}.
 */
sap.suite.ui.commons.ChartTileRenderer.renderContent = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-content");
    oRm.addClass("sapSuiteCmpTileContent");
    oRm.addClass(oControl.getSize());
    oRm.writeClasses();
    oRm.write(">");
        if (sap.suite.ui.commons.LoadState.Loaded == oControl.getState() ) {
            this.renderInnerContent(oRm, oControl);
        }
    oRm.write("</div>");
};

/**
 * Renders the HTML for the description along with the unit of measure text of the given control, using the provided {@link sap.ui.core.RenderManager}.
 **/

sap.suite.ui.commons.ChartTileRenderer.renderDescription = function(oRm, oControl) {
    if (oControl.getDescription() || oControl.getUnit()) {
        oRm.write("<div");
        oRm.addClass("sapSuiteInfoTileDescTxt");
        oRm.addClass(oControl.getState());
        oRm.addClass(oControl.getSize());
        oRm.writeClasses();
        oRm.writeAttribute("id", oControl.getId() + "-description-text");
        oRm.writeAttributeEscaped("title", this.createDescriptionTooltip(oControl));
        oRm.write(">");

        if (oControl.getDescription()) {
            oRm.write("<span");
            oRm.writeAttribute("id", oControl.getId() + "-description");
            oRm.addClass("sapSuiteCmpTileDescInner");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl.getDescription());
            oRm.write("</span>");
        }

        if (oControl.getUnit()) {
            oRm.write("<span");
            oRm.writeAttribute("id", oControl.getId() + "-unit");
            oRm.addClass("sapSuiteCmpTileUnitInner");
            oRm.writeClasses();
            oRm.write(">(");
                oRm.writeEscaped(oControl.getUnit());
            oRm.write(")</span>");
        }

        oRm.write("</div>");
    }
};

/**
 * Creates the tooltip text of the description and the unit of measure of the given control
 */
 
sap.suite.ui.commons.ChartTileRenderer.createDescriptionTooltip = function(oControl) {
    var aResult = [];

    if (oControl.getDescription()) {
        aResult.push(oControl.getDescription());
    }

    if (oControl.getUnit()) {
        aResult.push("(" + oControl.getUnit() + ")");
    }

    return aResult.join(" ");
};

}; // end of sap/suite/ui/commons/ChartTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ColumnData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ColumnData.
jQuery.sap.declare("sap.suite.ui.commons.ColumnData");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ColumnData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : float</li>
 * <li>{@link #getColor color} : sap.suite.ui.commons.InfoTileValueColor (default: sap.suite.ui.commons.InfoTileValueColor.Neutral)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Column data holder.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ColumnData
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.ColumnData", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "float", group : "Misc", defaultValue : null},
		"color" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileValueColor.Neutral}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ColumnData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ColumnData.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * The label.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.suite.ui.commons.ColumnData#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.suite.ui.commons.ColumnData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnData#setLabel
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.ColumnData#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.ColumnData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnData#setValue
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The semantic color of the column.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>color</code>
 * @public
 * @name sap.suite.ui.commons.ColumnData#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oColor  new value for property <code>color</code>
 * @return {sap.suite.ui.commons.ColumnData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnData#setColor
 * @function
 */


// Start of sap/suite/ui/commons/ColumnData.js
/*!
 * @copyright@
 */
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.ColumnData.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/ColumnData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ColumnMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ColumnMicroChart.
jQuery.sap.declare("sap.suite.ui.commons.ColumnMicroChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ColumnMicroChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.suite.ui.commons.ColumnData[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ColumnMicroChart#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control shows a column chart.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ColumnMicroChart", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"columns" : {type : "sap.suite.ui.commons.ColumnData", multiple : true, singularName : "column"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ColumnMicroChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ColumnMicroChart.extend
 * @function
 */

sap.suite.ui.commons.ColumnMicroChart.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#setSize
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the chart. If it is not set, the width of the control is defined by the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the chart. If it is not set, the height of the control is defined by the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * The column chart data.
 * 
 * @return {sap.suite.ui.commons.ColumnData[]}
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.suite.ui.commons.ColumnData}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.suite.ui.commons.ColumnData}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.suite.ui.commons.ColumnData} vColumn the column to remove or its index or id
 * @return {sap.suite.ui.commons.ColumnData} the removed column or null
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.ColumnData[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.ColumnData</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.ColumnData}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#destroyColumns
 * @function
 */


/**
 * The event is fired when the user chooses the column chart.
 *
 * @name sap.suite.ui.commons.ColumnMicroChart#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.ColumnMicroChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ColumnMicroChart</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the column chart.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ColumnMicroChart</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.ColumnMicroChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ColumnMicroChart#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ColumnMicroChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ColumnMicroChart#firePress
 * @function
 */


// Start of sap/suite/ui/commons/ColumnMicroChart.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ColumnMicroChart.prototype.init = function(){
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	this.setTooltip("{AltText}");
};

sap.suite.ui.commons.ColumnMicroChart.prototype.onAfterRendering = function() {
	if (this._sChartResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sChartResizeHandlerId);
	}
	
    this._sChartResizeHandlerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId()),  jQuery.proxy(this._calcColumns, this));
	this._fChartWidth = undefined;
	this._fChartHeight = undefined;
	this._aBars = [];
	
	var iColumnsNum = this.getColumns().length;
	for (var i = 0; i < iColumnsNum; i++) {
		this._aBars.push({});
	}
	
	this._calcColumns();
};

sap.suite.ui.commons.ColumnMicroChart.prototype.exit = function() {
	sap.ui.core.ResizeHandler.deregister(this._sChartResizeHandlerId);
};

sap.suite.ui.commons.ColumnMicroChart.prototype._calcColumns = function() {
	var iColumnsNum = this.getColumns().length;
	if (iColumnsNum) {
		var fChartWidth = parseFloat(this.$().css("width"));
		if (fChartWidth != this._fChartWidth) {
			this._fChartWidth = fChartWidth;
			
			var iColumnMargin = 0;
			var oBar;
			if (iColumnsNum > 1) {
				oBar = jQuery.sap.byId(this.getId() + "-bar-1");
				var bRtl = sap.ui.getCore().getConfiguration().getRTL();
				iColumnMargin = parseInt(oBar.css("margin-" + (bRtl ? "right" : "left")));
			} else {
				oBar = jQuery.sap.byId(this.getId() + "-bar-0");
			}
		
			var iColumMinWidth = parseInt(oBar.css("min-width"));
					
			this._calcColumnsWidth(iColumnMargin, iColumMinWidth, fChartWidth, this._aBars);
		}
		
		var fChartHeight = parseFloat(this.$().css("height"));
		if (fChartHeight != this._fChartHeight) {
			this._fChartHeight = fChartHeight;
			this._calcColumnsHeight(fChartHeight, this._aBars);
		}
		
		for (var i = 0; i < iColumnsNum; i++) {
			jQuery.sap.byId(this.getId() + "-bar-" + i).css(this._aBars[i]);
		}
		
		if (this._aBars.overflow) {
			jQuery.sap.log.warning(this.toString() + " Chart overflow",  "Some columns were not rendered");
		}
	}
};

sap.suite.ui.commons.ColumnMicroChart.prototype._calcColumnsWidth = function(iColumnMargin, iColumMinWidth, fChartWidth, aBars) {
	var iColumnsNum = this.getColumns().length;
	var iVisibleColumnsNum = Math.floor((fChartWidth + iColumnMargin) / (iColumMinWidth + iColumnMargin));
	var iColumnWidth = Math.floor((fChartWidth + iColumnMargin) / Math.min(iVisibleColumnsNum, iColumnsNum)) - iColumnMargin;
	
	var sColumnWidth = iColumnWidth + "px";
	
	for (var i = 0; i < iColumnsNum; i++) {
		if (i < iVisibleColumnsNum) {
			aBars[i].width = sColumnWidth;
			aBars[i].display = "inline-block";
		} else {
			aBars[i].display = "none";
		}
	}
	
	aBars.overflow = iVisibleColumnsNum != iColumnsNum;
};

sap.suite.ui.commons.ColumnMicroChart.prototype._calcColumnsHeight = function(fChartHeight, aBars) {
	var iClmnsNum = this.getColumns().length;
	
	var fMaxVal, fMinVal;
	fMaxVal = fMinVal = 0;
	
	for (var i = 0; i < iClmnsNum; i++) {
		var oClmn = this.getColumns()[i];
		if (fMaxVal < oClmn.getValue()) {
			fMaxVal = oClmn.getValue();
		} else if (fMinVal > oClmn.getValue()) {
			fMinVal = oClmn.getValue();
		}
	}
	
	var fDelta = fMaxVal - fMinVal;
	var fOnePxVal = fDelta / fChartHeight;
	
	var fDownShift, fTopShift;
	fDownShift = fTopShift = 0;
	
	for (i = 0; i < iClmnsNum; i++) {
		var fValue = this.getColumns()[i].getValue();
		
		if (Math.abs(fValue) < fOnePxVal) {
			if (fValue >= 0) {
				if (fValue == fMaxVal) {
					fTopShift = fOnePxVal - fValue;
				}
			} else {
				if (fValue == fMinVal) {
					fDownShift = fOnePxVal + fValue;
				}
			}
		}
	}
	
	if (fTopShift) {
		fMaxVal += fTopShift;
		fMinVal -= fTopShift;
	}
	
	if (fDownShift) {
		fMaxVal -= fDownShift;
		fMinVal += fDownShift;
	}
	
	var fNegativeOnePxVal =  0 - fOnePxVal;

	for (i = 0; i < iClmnsNum; i++) {
		var fValue = this.getColumns()[i].getValue();
		var fCalcVal = fValue;
		
		if (fValue >= 0) {
			fCalcVal = Math.max(fCalcVal + fTopShift - fDownShift, fOnePxVal);
		} else {
			fCalcVal = Math.min(fCalcVal + fTopShift - fDownShift, fNegativeOnePxVal);
		}
		
		aBars[i].value = fCalcVal;
	}
	
	function calcPersent(fValue) {
		return (fValue / fDelta * 100).toFixed(2) + "%";
	};
	
	var fZeroLine = calcPersent(fMaxVal);
	
	for (i = 0; i < iClmnsNum; i++) {
		var fValue = aBars[i].value;
		aBars[i].top = (fValue < 0) ? fZeroLine : calcPersent(fMaxVal - fValue);
		aBars[i].height = calcPersent(Math.abs(fValue));
	}
};

sap.suite.ui.commons.ColumnMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.ColumnMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

 sap.suite.ui.commons.ColumnMicroChart.prototype.ontap = function(oEvent) {
     if (sap.ui.Device.browser.internet_explorer) {
         this.$().focus();
     }
     this.firePress();
};

sap.suite.ui.commons.ColumnMicroChart.prototype.onkeydown = function(oEvent) {
  if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
      oEvent.preventDefault();
  }
};

sap.suite.ui.commons.ColumnMicroChart.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.ColumnMicroChart.prototype.getLocalizedColorMeaning = function(sColor) {
	return this._oRb.getText(("SEMANTIC_COLOR_"+sColor).toUpperCase());
};

sap.suite.ui.commons.ColumnMicroChart.prototype.getAltText = function() {
	var sAltText = "";
	var aColumns = this.getColumns();
	for (var i = 0; i < aColumns.length; i++) {
		var oBar = aColumns[i];
		var sMeaning = this.getLocalizedColorMeaning(oBar.getColor());
		sAltText += ((i==0) ? "" : "\n") + oBar.getLabel() + " " + oBar.getValue() + " " + sMeaning;
	}

	return sAltText;
};

sap.suite.ui.commons.ColumnMicroChart.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};
}; // end of sap/suite/ui/commons/ColumnMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ComparisonChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ComparisonChart.
jQuery.sap.declare("sap.suite.ui.commons.ComparisonChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ComparisonChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getView view} : sap.suite.ui.commons.ComparisonChartView (default: sap.suite.ui.commons.ComparisonChartView.Normal)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: [])</li>
 * <li>{@link #getShrinkable shrinkable} : boolean (default: false)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getData data} : sap.suite.ui.commons.ComparisonData[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ComparisonChart#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control shows a comparison chart.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ComparisonChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ComparisonChart", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"scale" : {type : "string", group : "Misc", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"view" : {type : "sap.suite.ui.commons.ComparisonChartView", group : "Appearance", defaultValue : sap.suite.ui.commons.ComparisonChartView.Normal},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"colorPalette" : {type : "string[]", group : "Misc", defaultValue : []},
		"shrinkable" : {type : "boolean", group : "Misc", defaultValue : false},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null}
	},
	aggregations : {
		"data" : {type : "sap.suite.ui.commons.ComparisonData", multiple : true, singularName : "data"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ComparisonChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ComparisonChart.extend
 * @function
 */

sap.suite.ui.commons.ComparisonChart.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>scale</code>.
 * The scaling suffix.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>scale</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getScale
 * @function
 */

/**
 * Setter for property <code>scale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sScale  new value for property <code>scale</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setScale
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setSize
 * @function
 */


/**
 * Getter for property <code>view</code>.
 * The view of the chart. If not set, the Normal view is used by default.
 *
 * Default value is <code>Normal</code>
 *
 * @return {sap.suite.ui.commons.ComparisonChartView} the value of property <code>view</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getView
 * @function
 */

/**
 * Setter for property <code>view</code>.
 *
 * Default value is <code>Normal</code> 
 *
 * @param {sap.suite.ui.commons.ComparisonChartView} oView  new value for property <code>view</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setView
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the chart. If it is not set, the size of the control is defined by the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setWidth
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * The color palette for the chart. If this property is set, semantic colors defined in ComparisonData are ignored. Colors from the palette are assigned to each bar consequentially. When all the palette colors are used, assignment of the colors begins from the first palette color.
 *
 * Default value is <code>[]</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setColorPalette
 * @function
 */


/**
 * Getter for property <code>shrinkable</code>.
 * If it is set to true, the height of the control is defined by its content.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>shrinkable</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getShrinkable
 * @function
 */

/**
 * Setter for property <code>shrinkable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShrinkable  new value for property <code>shrinkable</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setShrinkable
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the chart.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>data</code>.<br/>
 * The comparison chart data.
 * 
 * @return {sap.suite.ui.commons.ComparisonData[]}
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#getData
 * @function
 */


/**
 * Inserts a data into the aggregation named <code>data</code>.
 *
 * @param {sap.suite.ui.commons.ComparisonData}
 *          oData the data to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the data should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the data is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the data is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#insertData
 * @function
 */

/**
 * Adds some data <code>oData</code> 
 * to the aggregation named <code>data</code>.
 *
 * @param {sap.suite.ui.commons.ComparisonData}
 *            oData the data to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#addData
 * @function
 */

/**
 * Removes an data from the aggregation named <code>data</code>.
 *
 * @param {int | string | sap.suite.ui.commons.ComparisonData} vData the data to remove or its index or id
 * @return {sap.suite.ui.commons.ComparisonData} the removed data or null
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#removeData
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>data</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.ComparisonData[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#removeAllData
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.ComparisonData</code> in the aggregation named <code>data</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.ComparisonData}
 *            oData the data whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#indexOfData
 * @function
 */
	

/**
 * Destroys all the data in the aggregation 
 * named <code>data</code>.
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#destroyData
 * @function
 */


/**
 * The event is fired when the user chooses the comparison chart.
 *
 * @name sap.suite.ui.commons.ComparisonChart#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.ComparisonChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ComparisonChart</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the comparison chart.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ComparisonChart</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.ComparisonChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonChart#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ComparisonChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ComparisonChart#firePress
 * @function
 */


// Start of sap/suite/ui/commons/ComparisonChart.js
/*!
 * @copyright@
 */

sap.suite.ui.commons.ComparisonChart.prototype.init = function(){
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	this.setTooltip("{AltText}");
};

/**
 * Calculates the width in percents of chart bars' elements accordingly with provided chart values.
 *
 * @returns {Array} array of calculated values for each chart bar.
 * @private
 */
sap.suite.ui.commons.ComparisonChart.prototype._calculateChartData = function() {
    var aResult = [];
    var aData = this.getData();
    var iCount = aData.length;
    var iMaxValue = 0;
    var iMinValue = 0;
    var iTotal;
    var iMaxPercent;
    var iMinPercent;
    var i;

    for (i = 0; i < iCount; i++) {
    	var iDataValue = isNaN(aData[i].getValue()) ? 0 : aData[i].getValue() ;
        iMaxValue = Math.max(iMaxValue, iDataValue);
        iMinValue = Math.min(iMinValue, iDataValue);
    }

    iTotal = iMaxValue - iMinValue;
    iMaxPercent = (iTotal==0) ? 0 : Math.round(iMaxValue * 100 / iTotal);

    if (iMaxPercent == 0 && iMaxValue != 0) {
        iMaxPercent = 1;
    } else if (iMaxPercent == 100 && iMinValue != 0) {
        iMaxPercent = 99;
    }

    iMinPercent = 100 - iMaxPercent;

    for (i = 0; i < iCount; i++) {
        var oItem = {};
    	var iDataValue = isNaN(aData[i].getValue()) ? 0 : aData[i].getValue() ;

        oItem.value = (iTotal==0) ? 0 : Math.round(iDataValue * 100 / iTotal);

        if (oItem.value == 0 && iDataValue != 0) {
            oItem.value = (iDataValue > 0) ? 1 : -1;
        } else if (oItem.value == 100) {
            oItem.value = iMaxPercent;
        } else if (oItem.value == -100) {
            oItem.value = -iMinPercent;
        }

        if (oItem.value >= 0) {
            oItem.negativeNoValue = iMinPercent;
            oItem.positiveNoValue = iMaxPercent - oItem.value;
        } else {
            oItem.value = -oItem.value;
            oItem.negativeNoValue = iMinPercent - oItem.value;
            oItem.positiveNoValue = iMaxPercent;
        }

        aResult.push(oItem);
    }

    return aResult;
};

sap.suite.ui.commons.ComparisonChart.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.ComparisonChart.prototype.onkeydown = function(oEvent) {
  if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
      oEvent.preventDefault();
  }
};

sap.suite.ui.commons.ComparisonChart.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.ComparisonChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
    sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
    
    if (this.hasListeners("press")) {
            this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
    }
    
    return this;
};

sap.suite.ui.commons.ComparisonChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
    sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
    
    if (!this.hasListeners("press")) {
            this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
    }
    return this;
};


sap.suite.ui.commons.ComparisonChart.prototype.getLocalizedColorMeaning = function(sColor) {
	return this._oRb.getText(("SEMANTIC_COLOR_"+sColor).toUpperCase());
};

sap.suite.ui.commons.ComparisonChart.prototype.getAltText = function() {
	var sScale = this.getScale();
	var sAltText = "";
	
	for (var i = 0; i < this.getData().length; i++) {
		var oBar = this.getData()[i];
		var sMeaning = (this.getColorPalette().length) ? "" : this.getLocalizedColorMeaning(oBar.getColor());
		sAltText += ((i==0) ? "" : "\n") + oBar.getTitle() + " " + (oBar.getDisplayValue() ? oBar.getDisplayValue() : oBar.getValue()) + sScale + " " + sMeaning;
	}

	return sAltText;
};

sap.suite.ui.commons.ComparisonChart.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

sap.suite.ui.commons.ComparisonChart.prototype._adjustBars = function() {
	var iHeight = parseFloat(this.$().css("height"));
	var iBarCount = this.getData().length;
	var aBarContainers = this.$().find(".sapSuiteCmpChartItem");
	var iMinH = parseFloat(aBarContainers.css("min-height"));
	var iMaxH = parseFloat(aBarContainers.css("max-height"));
	var iBarHeight;
	var iBarContHeight;
	
	if(iBarCount != 0) {
		iBarContHeight = iHeight/iBarCount;
	}

	if(iBarContHeight>iMaxH) {
		iBarContHeight = iMaxH;
	} else if(iBarContHeight<iMinH) {
		iBarContHeight = iMinH;
	}
	
	aBarContainers.css("height", iBarContHeight);
	
	if(this.getView() === "Wide" ) {
		var iChartBarHeight = iBarContHeight*79/42;
		this.$().find(".sapSuiteCmpChartBar>div").css("height",iChartBarHeight + "%");
		
	} else if(this.getView() === "Normal") {
		var iChartBarHeight = iBarContHeight - 19;
		this.$().find(".sapSuiteCmpChartBar>div").css("height",iChartBarHeight);
	}
		var iChartsHeightDelta = (iHeight - iBarContHeight * iBarCount)/2;
		if(iChartsHeightDelta > 0) {
			jQuery(aBarContainers[0]).css("margin-top", iChartsHeightDelta + 7 + "px")
		}
};

sap.suite.ui.commons.ComparisonChart.prototype.onAfterRendering = function() {
	if(this.getHeight() != "") {
		var that = this;
		sap.ui.Device.media.attachHandler(function(){
			that._adjustBars();
		});
		this._adjustBars();
	}
	
};
}; // end of sap/suite/ui/commons/ComparisonChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ComparisonData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ComparisonData.
jQuery.sap.declare("sap.suite.ui.commons.ComparisonData");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ComparisonData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getColor color} : sap.suite.ui.commons.InfoTileValueColor (default: sap.suite.ui.commons.InfoTileValueColor.Neutral)</li>
 * <li>{@link #getDisplayValue displayValue} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Comparison tile value holder.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ComparisonData
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.ComparisonData", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "float", group : "Misc", defaultValue : 0},
		"color" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileValueColor.Neutral},
		"displayValue" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ComparisonData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ComparisonData.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The comparison bar title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonData#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.ComparisonData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonData#setTitle
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The float value for comparison.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonData#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.ComparisonData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonData#setValue
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The semantic color of the value.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>color</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonData#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oColor  new value for property <code>color</code>
 * @return {sap.suite.ui.commons.ComparisonData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonData#setColor
 * @function
 */


/**
 * Getter for property <code>displayValue</code>.
 * If this property is set then it will be rendered instead of value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * @name sap.suite.ui.commons.ComparisonData#getDisplayValue
 * @function
 */

/**
 * Setter for property <code>displayValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.suite.ui.commons.ComparisonData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonData#setDisplayValue
 * @function
 */


// Start of sap/suite/ui/commons/ComparisonData.js
/*!
 * @copyright@
 */
/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.ComparisonData} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ComparisonData#setValue
 * @function
 */
 sap.suite.ui.commons.ComparisonData.prototype.setValue = function(fValue, bSuppressInvalidate) {
	 this._isValueSet = this._fnIsNumber(fValue);
	 return this.setProperty("value", this._isValueSet ? fValue : NaN, bSuppressInvalidate);
 };

 sap.suite.ui.commons.ComparisonData.prototype._fnIsNumber = function(n) {
	 return typeof n == 'number' && !isNaN(n) && isFinite(n);
 };
 
}; // end of sap/suite/ui/commons/ComparisonData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.CountingNavigationItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.CountingNavigationItem.
jQuery.sap.declare("sap.suite.ui.commons.CountingNavigationItem");

jQuery.sap.require('sap.ui.ux3.NavigationItem'); // unlisted dependency retained



/**
 * Constructor for a new CountingNavigationItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getQuantity quantity} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.NavigationItem#constructor sap.ui.ux3.NavigationItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.NavigationItem control. This control can display the quantity of items on a corresponding content area. It also provides a rich tooltip that can appear and disappear after a certain delay.
 * @extends sap.ui.ux3.NavigationItem
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.ux3.NavigationItem.extend("sap.suite.ui.commons.CountingNavigationItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"quantity" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.CountingNavigationItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.CountingNavigationItem.extend
 * @function
 */


/**
 * Getter for property <code>quantity</code>.
 * Stores the number of content items associated with this navigation item. This number appears in brackets next to the navigation item name. For example, Employes (10000).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>quantity</code>
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem#getQuantity
 * @function
 */

/**
 * Setter for property <code>quantity</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQuantity  new value for property <code>quantity</code>
 * @return {sap.suite.ui.commons.CountingNavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem#setQuantity
 * @function
 */


// Start of sap/suite/ui/commons/CountingNavigationItem.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.CountingNavigationItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/CountingNavigationItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScroller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeScroller.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScroller");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeScroller.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeScroller#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The DateRangeScroller provides a method to scroll through a series of time periods, each of which is represented by a starting date and an ending date, known as the date range. The user may scroll to the previous or next date range. Several predefined ranges are supported such as day, week, work week, month, and year.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeScroller", { metadata : {

	library : "sap.suite.ui.commons",
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeScroller with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeScroller.extend
 * @function
 */

sap.suite.ui.commons.DateRangeScroller.M_EVENTS = {'change':'change'};


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * This event is fired whenever the date range is changed.
 *
 * @name sap.suite.ui.commons.DateRangeScroller#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {any} oControlEvent.getParameters.dateRange Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself. 
 *  
 * This event is fired whenever the date range is changed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'dateRange' of type <code>any</code> Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeScroller#fireChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeScroller.js
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained



(function() {

    /* Internal values for date range types. */
    var DAY = "d";
    var WEEK = "w";
    var MONTH = "m";
    var YEAR = "y";
    var CUSTOM = "c";

    var iWeekStepSize = 7;


    /**
     * Format start and end date according to default formatting option and current date range
     * 
     * @param {String}
     *                sRangeType defines the date range type for formatting
     * @param {Object}
     *                oDateRange object contains start and end date for current date range
     * @param {Date}
     *                oDateRange.startDate The start date.
     * @param {Date}
     *                oDateRange.endDate The end date.
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat The date format to use for formatting
     * @returns Formatted date range as string.
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.getFormattedDate = function(sRangeType, oDateRange, oDateFormat) {

        var oDateFormatter;
        var sFormattedDateRange;

        switch (sRangeType) {
        case (DAY):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : "MMMM d, YYYY"
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (WEEK):
        case (CUSTOM):
            var oStartDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d'
            });
            var oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d, YYYY'
            });
            if (oDateRange.startDate.getYear() !== oDateRange.endDate.getYear()) {
                oStartDateFormat = oEndDateFormat;
            } else if (oDateRange.startDate.getMonth() === oDateRange.endDate.getMonth()) {
                oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                    pattern : 'd, YYYY'
                });
            }
            var sStartDate = oStartDateFormat.format(oDateRange.startDate, false);
            var sEndDate = oEndDateFormat.format(oDateRange.endDate, false);
            sFormattedDateRange = sStartDate + " - " + sEndDate;
            break;
        case (MONTH):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (YEAR):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        default:
            sFormattedDateRange = oDateRange.startDate + " - " + oDateRange.endDate;
            break;
        }

        return sFormattedDateRange;
    };

    /**
     * Update the date range value in the label control and rerender.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue = function(sRangeType, oDateRange, oRangeLabel, oDateFormat) {

        oRangeLabel.setText(sap.suite.ui.commons.DateRangeScroller.getFormattedDate(sRangeType, oDateRange, oDateFormat));
        if (oRangeLabel.isActive()) { // Don't rerender if the control is not placed in the DOM
            oRangeLabel.rerender();
        }
    };

    /**
     * Add <code>iStep</code> days to the given date. A negative step value moves the date backward in time.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustDateByStep = function(dDate, iStep) {

        if (iStep === 0) {
            return;
        }
        dDate.setDate(dDate.getDate() + iStep);
    };

    /**
     * Adjust the start/end dates by the given step.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep = function(oRange, iStep) {

        var dStartDate = oRange.startDate;
        var dEndDate = oRange.endDate;
        dStartDate.setDate(dStartDate.getDate() + iStep);
        dEndDate.setDate(dEndDate.getDate() + iStep);
    };

    /**
     * Test if the given duration is a positive, non-infinite integer. The duration must be less than the upper limit if a limit is specified. A duration of undefined returns true.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.isValidDuration = function(iDuration, iUpperLimit) {

        var bValidDuration = false;
        
        if (iDuration === undefined) {
            bValidDuration = true;
        } else if (!isNaN(iDuration) && isFinite(iDuration)) {

            if ((iDuration >= 1) && (!iUpperLimit || iDuration <= iUpperLimit)) {
                bValidDuration = true;
            }
        }
        
        if(!bValidDuration){
            jQuery.sap.log.error("DateRangeScroller duration value ='" + iDuration + "' is invalid.");
        }
       
        return bValidDuration;
    };

    /**
     * Initialize the control.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.init = function() {

        this._sRangeType = DAY;
        this._iCustomDuration = 1;
        this._oDateFormat = null;

        this._oDateRangeLabel = new sap.ui.commons.Label(this.getId() + "-dateRangeLabel", {
            labelFor : this.getId()
        });
        this._oDateRangeLabel.addStyleClass("sapSuiteUiCommonsDateRangeScrollerLabel");

        var dStart = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStart);
        var dEnd = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dEnd);
        this._oDateRange = {
            startDate : dStart,
            endDate : dEnd
        };
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Set a date range equal to a single day, starting with the given initial date.
     * 
     * @param {Date}
     *                dInitialDate The initial date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeDay = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = DAY;
        }
        return this;
    };

    /**
     * Set a date range that steps one week at a time. The starting date is set according to the first day of the week (default is Monday) and the initial date. For example, if the
     * first day of the week is set to Tuesday and the initial date is Wednesday, January 9, 2013, then the starting date will be Tuesday, January 8, 2013.
     * 
     * The last day of the range is calculated by adding (duration - 1) days to the starting date.
     * 
     * @param {Date}
     *                dInitialDate Any date that falls on the desired week. Start/end dates will be adjusted according to the first day of the week.
     * @param {Object}
     *                [oSettings]
     * @param [oSettings.duration=7]
     *                The number of days in the range with a minimum of 1 and maximum of 7.
     * @param [oSettings.iFirstDayOfWeek=1]
     *                The starting day for the range. Valid values are 0-6, with 0=Sunday and 6=Saturday.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeWeek = function(dInitialDate, oSettings) {

        var iDuration = iWeekStepSize;
        var iFirstDayOfWeek = 1;
        if (oSettings) {
            iDuration = oSettings.duration;
            iFirstDayOfWeek = oSettings.firstDayOfWeek;
        }

        if (iDuration === undefined) {
            iDuration = iWeekStepSize;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (iFirstDayOfWeek && !isNaN(iFirstDayOfWeek)) {
            iFirstDayOfWeek = parseInt(iFirstDayOfWeek, 10);
        }

        // If first day of week is specified (defined), but invalid, do not proceed even if the passed start date is valid.
        if ((iFirstDayOfWeek === null) || iFirstDayOfWeek === "" || isNaN(iFirstDayOfWeek) || iFirstDayOfWeek < 0 || iFirstDayOfWeek > 6) {

            jQuery.sap.log.error("DateRangeScroller oSettings.firstDayOfWeek value ='" + oSettings.firstDayOfWeek + "' is invalid.");

        } else if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration, iWeekStepSize)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());

            var duration = iDuration;
            var firstDay = iFirstDayOfWeek;
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(this._oDateRange.startDate, iFirstDayOfWeek);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek(this._oDateRange.endDate, {iDuration: duration, iFirstDayOfWeek: firstDay});
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);

            this._sRangeType = WEEK;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar month at a time. The month date range begins on the first day of the month (beginning of the day) and ends on the
     * last day of the month (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired month.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeMonth = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = MONTH;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar year at a time. The year date range begins on the first day of the year (beginning of the day) and ends on the last
     * day of the year (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired year.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeYear = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = YEAR;
        }
        return this;
    };

    /**
     * Set a custom date range beginning with the specified start date that increments/decrements <code>iDuration</code> days at a time.
     * 
     * @param dInitialDate
     *                The initial date for the custom range.
     * @param [iDuration=current
     *                custom duration] The number of days in the custom range, including the start date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeCustom = function(dInitialDate, iDuration) {

        if (iDuration === undefined) {
            iDuration = this._iCustomDuration;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration)) {

            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);

            sap.suite.ui.commons.DateRangeScroller.adjustDateByStep(this._oDateRange.endDate, iDuration - 1);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = CUSTOM;
            this._iCustomDuration = iDuration;
        }
        return this;
    };

    /**
     * Increment the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.incrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, 1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, this._iCustomDuration);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() + 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() + 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }

        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Decrement the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.decrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -this._iCustomDuration); // Here the step amount equals the range duration
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() - 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() - 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }
        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Returns an object containing startDate and endDate set to the current start and end Date objects.
     * 
     * @returns The date range containing start and end Date.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.getDateRange = function() {

        var oCopyDateRange = {
            startDate : new Date(this._oDateRange.startDate.getTime()),
            endDate : new Date(this._oDateRange.endDate.getTime())
        };
        return oCopyDateRange;
    };

    /**
     * Setter for dateFormat which is used for formating the dates If passed object is null or is of incorrect type, control's default formatting will be used.
     * 
     * @param oDateFormat
     *                {sap.ui.core.format.DateFormat}
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateFormat = function(oDateFormat) {

        if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
            this._oDateFormat = oDateFormat;
        } else {
            this._oDateFormat = null;
        }
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(this._sRangeType, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Control click handler to trigger increment or decrement of the date range.
     * 
     * @param oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onclick = function(oEvent) {

        switch (oEvent.target) {
        case jQuery.sap.byId(this.getId() + '-decrementScrollButton')[0]:
            this.decrementDateRange();
            break;
        case jQuery.sap.byId(this.getId() + '-incrementScrollButton')[0]:
            this.incrementDateRange();
            break;
        }

        jQuery.sap.byId(this.getId() + "-labelarea").focus();
    };

    /**
     * Function is called when right arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapright = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when left arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapleft = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when up arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapup = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when DOWN arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapdown = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

}());

}; // end of sap/suite/ui/commons/DateRangeScroller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSlider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSlider.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSlider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeSlider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getSmallStepWidth smallStepWidth} : float</li>
 * <li>{@link #getTotalUnits totalUnits} : int</li>
 * <li>{@link #getStepLabels stepLabels} : boolean (default: false)</li>
 * <li>{@link #getLabels labels} : string[]</li>
 * <li>{@link #getMin min} : object</li>
 * <li>{@link #getMax max} : object</li>
 * <li>{@link #getValue value} : object</li>
 * <li>{@link #getValue2 value2} : object</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeSlider", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"smallStepWidth" : {type : "float", group : "Appearance", defaultValue : null},
		"totalUnits" : {type : "int", group : "Appearance", defaultValue : null},
		"stepLabels" : {type : "boolean", group : "Misc", defaultValue : false},
		"labels" : {type : "string[]", group : "Misc", defaultValue : null},
		"min" : {type : "object", group : "Behavior", defaultValue : null},
		"max" : {type : "object", group : "Behavior", defaultValue : null},
		"value" : {type : "object", group : "Behavior", defaultValue : null},
		"value2" : {type : "object", group : "Behavior", defaultValue : null},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSlider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSlider.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSlider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Width of the horizontal date range slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * This property switches the enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * This property switches the enabled state of the control. Using the date range slider interactively requires this property to be true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * This property switches the visible state of the control. Invisible date range slider are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setVisible
 * @function
 */


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>smallStepWidth</code>.
 * The grips of the control can only be moved in steps of this width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>smallStepWidth</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getSmallStepWidth
 * @function
 */

/**
 * Setter for property <code>smallStepWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fSmallStepWidth  new value for property <code>smallStepWidth</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setSmallStepWidth
 * @function
 */


/**
 * Getter for property <code>totalUnits</code>.
 * Number of units between ticks.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>totalUnits</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getTotalUnits
 * @function
 */

/**
 * Setter for property <code>totalUnits</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTotalUnits  new value for property <code>totalUnits</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setTotalUnits
 * @function
 */


/**
 * Getter for property <code>stepLabels</code>.
 * Display a date label above each tick.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stepLabels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getStepLabels
 * @function
 */

/**
 * Setter for property <code>stepLabels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStepLabels  new value for property <code>stepLabels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setStepLabels
 * @function
 */


/**
 * Getter for property <code>labels</code>.
 * Labels to be displayed instead of dates.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>labels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getLabels
 * @function
 */

/**
 * Setter for property <code>labels</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aLabels  new value for property <code>labels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setLabels
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Minimum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>min</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMin  new value for property <code>min</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * Maximum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>max</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMax  new value for property <code>max</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMax
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Date value of the left grip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue
 * @function
 */


/**
 * Getter for property <code>value2</code>.
 * Date value of the right grip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue2
 * @function
 */

/**
 * Setter for property <code>value2</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue2  new value for property <code>value2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue2
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Pin the left grip so that user cannot move it with the keyboard or mouse.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Pin the right grip so that user cannot move it with the keyboard or mouse.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes completes the selection of a new date using a grip. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property.
 *
 * @name sap.suite.ui.commons.DateRangeSlider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This event is fired when user changes completes the selection of a new date using a grip. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireChange
 * @function
 */


/**
 * This live event is fired as the user slides a grip with the mouse. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property.
 *
 * @name sap.suite.ui.commons.DateRangeSlider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This live event is fired as the user slides a grip with the mouse. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSlider.js
jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained



(function() {

    var DAY = "d";
    var MONTH = "m";

    /**
     * Initialize the DateRangeSlider.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.init = function() {

        this._oDateRangeSliderInternal = new sap.suite.ui.commons.DateRangeSliderInternal({
            id : this.getId() + "-dateRangeSliderInternal"
        });

        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);

        var oSelf = this;

        this._oDateRangeSliderInternal.attachChange(function(oEvent) {

            oSelf.handleChange(oEvent);
        });

        this._oDateRangeSliderInternal.attachLiveChange(function(oEvent) {

            oSelf.handleLiveChange(oEvent);
        });
    };
    
    /**
     * Validate if dFirstDate and dSecondDate are same day for Granularity=day or if they are same months for Granularity=month
     * 
     * @param {Date}
     *                dFirstDate The first date.
     * @param {Date}
     *                dSecondDate The second date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if two dates are same based on Granularity otherwise false
     * @private
     */

    sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity = function(dFirstDate, dSecondDate, sGranularity) {

        var bSame = false;

        switch (sGranularity) {

        case (DAY):
            bSame = sap.suite.ui.commons.util.DateUtils.dateDaysEqual(dFirstDate, dSecondDate);
            break;

        case (MONTH):
            bSame = sap.suite.ui.commons.util.DateUtils.dateMonthsEqual(dFirstDate, dSecondDate);
            break;
        }

        return bSame;
    };

    /**
     * Validate date value min and max. The max date must be after min date: max > min.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if min date is before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax = function(dMin, dMax, sGranularity) {

        var bMinBfrMax = false;

        if (dMin.getFullYear() < dMax.getFullYear()) {
            bMinBfrMax = true;
        } else if (dMin.getFullYear() === dMax.getFullYear()) {
            if (dMin.getMonth() < dMax.getMonth()) {
                bMinBfrMax = true;
            } else if (dMin.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() < dMax.getDate()) {
                    bMinBfrMax = true;
                }
            }
        }

        if (!bMinBfrMax) {
            jQuery.sap.log.error("DateRangeSlider: Min Date = " + dMin + " should be before Max Date = " + dMax);
        }

        return bMinBfrMax;
    };

    /**
     * Validate value date >= min date.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dValue The value date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value date is equal or after min date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin = function(dMin, dValue, sGranularity) {

        var bValueEqualOrAfterMin = false;

        if (dMin.getFullYear() < dValue.getFullYear()) {
            bValueEqualOrAfterMin = true;
        } else if (dMin.getFullYear() === dValue.getFullYear()) {
            if (dMin.getMonth() < dValue.getMonth()) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === MONTH) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() <= dValue.getDate()) {
                    bValueEqualOrAfterMin = true;
                }
            }
        }

        if (!bValueEqualOrAfterMin) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be after or equal to Min Date = " + dMin);
        }

        return bValueEqualOrAfterMin;
    };

    /**
     * Validate value2 date <= max date.
     * 
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value2 date is equal to before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax = function(dValue2, dMax, sGranularity) {

        var bValue2EqualOrBeforeMax = false;

        if (dValue2.getFullYear() < dMax.getFullYear()) {
            bValue2EqualOrBeforeMax = true;
        } else if (dValue2.getFullYear() === dMax.getFullYear()) {
            if (dValue2.getMonth() < dMax.getMonth()) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === MONTH) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dValue2.getDate() <= dMax.getDate()) {
                    bValue2EqualOrBeforeMax = true;
                }
            }
        }

        if (!bValue2EqualOrBeforeMax) {
            jQuery.sap.log.error("DateRangeSlider: Value2 Date = " + dValue2 + " should be before or equal to Max Date = " + dMax);
        }

        return bValue2EqualOrBeforeMax;
    };

    /**
     * Validate value date <= value2 date.
     * 
     * @param {Date}
     *                dValue The value date.
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if dValue2 date is equal or after value date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2 = function(dValue, dValue2, sGranularity) {

        var bValueBeforeOrEqualValue2 = false;

        if (dValue.getFullYear() < dValue2.getFullYear()) {
            bValueBeforeOrEqualValue2 = true;
        } else if (dValue.getFullYear() === dValue2.getFullYear()) {
            if (dValue.getMonth() < dValue2.getMonth()) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === MONTH) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === DAY) {
                if (dValue.getDate() <= dValue2.getDate()) {
                    bValueBeforeOrEqualValue2 = true;
                }
            }
        }

        if (!bValueBeforeOrEqualValue2) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be before or equal to Value2 Date = " + dValue2);
        }

        return bValueBeforeOrEqualValue2;
    };

    /**
     * Set min property for the DateRangeSlider. This sets the minimum date for the slider.
     * 
     * @param {Date}
     *                dMin
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMin = function(dMin) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMin) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(dMin, new Date(this.getMax()), this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMin()), dMin, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
            this._oDateRangeSliderInternal.setMinDate(dMin);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set max property for the DateRangeSlider. This sets the maximum date for the slider.
     * 
     * @param {Date}
     *                dMax
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMax = function(dMax) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMax) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(new Date(this.getMin()), dMax, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMax()), dMax, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
            this._oDateRangeSliderInternal.setMaxDate(dMax);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set value property for the DateRangeSlider. This sets the value date for the slider.
     * 
     * @param {Date}
     *                dValue
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue = function(dValue) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(dValue, new Date(this.getValue2()), this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin(new Date(this.getMin()), dValue, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue()), dValue, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
            this._oDateRangeSliderInternal.setValueDate(dValue);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value property for the control.  
     * 
     * @returns Date - date representing position of the grip  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue = function() {
        
        var dValue = this._oDateRangeSliderInternal.getValueDate();
        return dValue;
    };

    /**
     * Set value2 property for the DateRangeSlider. This sets the value2 date for the slider.
     * 
     * @param {Date}
     *                dValue2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue2 = function(dValue2) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue2)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(new Date(this.getValue()), dValue2, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue2()), dValue2, this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax(dValue2, new Date(this.getMax()), this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue2);
            this._oDateRangeSliderInternal.setValue2Date(dValue2);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value2 property for the control.  
     * 
     * @returns Date - date representing position of the grip2  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue2 = function() {
        
        var dValue2 = this._oDateRangeSliderInternal.getValue2Date();
        return dValue2;
    };

    /**
     * Set visible property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bVisible
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setVisible = function(bVisible) {

        this._oDateRangeSliderInternal.setVisible(bVisible);
        this.setProperty("visible", bVisible);
    };

    /**
     * Set enabled property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEnabled
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEnabled = function(bEnabled) {

        this._oDateRangeSliderInternal.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * Set labels property for the DateRangeSlider
     * 
     * @param {string[]}
     *                aLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setLabels = function(aLabels) {

        this._oDateRangeSliderInternal.setLabels(aLabels);
        this.setProperty("labels", aLabels);
    };

    /**
     * Set stepLabels property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bStepLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setStepLabels = function(bStepLabels) {

        this._oDateRangeSliderInternal.setStepLabels(bStepLabels);
        this.setProperty("stepLabels", bStepLabels);
    };

    /**
     * Set editable property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEditable
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEditable = function(bEditable) {

        this._oDateRangeSliderInternal.setEditable(bEditable);
        this.setProperty("editable", bEditable);
    };

    /**
     * Set width property for the DateRangeSlider
     * 
     * @param {sap.ui.core.CSSSize}
     *                tWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setWidth = function(tWidth) {

        this._oDateRangeSliderInternal.setWidth(tWidth);
        this.setProperty("width", tWidth);
    };

    /**
     * Set showBubbles property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bShowBubbles
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setShowBubbles = function(bShowBubbles) {

        this._oDateRangeSliderInternal.setShowBubbles(bShowBubbles);
        this.setProperty("showBubbles", bShowBubbles);
    };

    /**
     * Set smallStepWidth property for the DateRangeSlider
     * 
     * @param {float}
     *                fSmallStepWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setSmallStepWidth = function(fSmallStepWidth) {

        this._oDateRangeSliderInternal.setSmallStepWidth(fSmallStepWidth);
        this.setProperty("smallStepWidth", fSmallStepWidth);
    };

    /**
     * Set totalUnits property for the DateRangeSlider
     * 
     * @param {int}
     *                iTotalUnits
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setTotalUnits = function(iTotalUnits) {

        this._oDateRangeSliderInternal.setTotalUnits(iTotalUnits);
        this.setProperty("totalUnits", iTotalUnits);
    };

    /**
     * Set 4 base properties min, max, value and value2 for given DateRangeSlider
     * 
     * @param {sap.suite.ui.commons.DateRangeSlider}
     *                oDateRangeSlider
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal = function(oDateRangeSlider) {

        oDateRangeSlider.setProperty("min", oDateRangeSlider._oDateRangeSliderInternal.getMinDate());
        oDateRangeSlider.setProperty("max", oDateRangeSlider._oDateRangeSliderInternal.getMaxDate());
        oDateRangeSlider.setProperty("value", oDateRangeSlider._oDateRangeSliderInternal.getValueDate());
        oDateRangeSlider.setProperty("value2", oDateRangeSlider._oDateRangeSliderInternal.getValue2Date());
        oDateRangeSlider._sGranularity = oDateRangeSlider._oDateRangeSliderInternal._sGranularity;
    };

    /**
     * Set Date Range Slider Granularity to Day
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDayGranularity = function() {

        this._oDateRangeSliderInternal.setDayGranularity();
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        return this;
    };

    /**
     * Set Date Range Slider Granularity to Month
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMonthGranularity = function() {

        var iMonthsApart = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this.getMin(), this.getMax());
        if (iMonthsApart >= 1) {
            this._oDateRangeSliderInternal.setMonthGranularity();
            if (this._oDateRangeSliderInternal.isActive()) {
                this._oDateRangeSliderInternal.rerender();
            }
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        } else {
            jQuery.sap.log.error("DateRangeSlider.setMonthGranularity(): Max Date should be 1 month after Min Date.");
        }

        return this;
    };

    /**
     * Setter for dateFormat which is used to format the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type,
     * _oDateRangeSliderInternal's default formatting will be used.
     * 
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDateFormat = function(oDateFormat) {

        this._oDateRangeSliderInternal.setDateFormat(oDateFormat);
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
    };

    /**
     * Set pinGrip property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip = function(bPinGrip) {

        this._oDateRangeSliderInternal.setPinGrip(bPinGrip);
        this.setProperty("pinGrip", bPinGrip);
    };

    /**
     * Set pinGrip2 property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip2 = function(bPinGrip2) {

        this._oDateRangeSliderInternal.setPinGrip2(bPinGrip2);
        this.setProperty("pinGrip2", bPinGrip2);
    };

    /**
     * Cleans up the DateRangeSlider instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.exit = function() {

        this._oDateRangeSliderInternal.destroy();
        this._oDateRangeSliderInternal = null;
    };

    /**
     * Handles the change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

    /**
     * Handles the live change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleLiveChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireLiveChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

}());

}; // end of sap/suite/ui/commons/DateRangeSlider.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSliderInternal.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternal");

jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeSliderInternal.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.RangeSlider#constructor sap.ui.commons.RangeSlider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.commons.RangeSlider
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.commons.RangeSlider.extend("sap.suite.ui.commons.DateRangeSliderInternal", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSliderInternal with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSliderInternal.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSliderInternal.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips.
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireChange
 * @function
 */


/**
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips.
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSliderInternal.js
jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained



(function() {

	var DEFAULT_TOTAL_UNITS = 12;
	var DAY = "d";
	var MONTH = "m";

	/**
	 * Initialize the DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.init = function() {

		this.setSmallStepWidth(1);
		this._sGranularity = DAY;
		this._oDateFormat = null;

		var dMaxDate = new Date();
		this._dMinDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(dMaxDate, -365);

		if (!this.getTotalUnits()) {
			this.setTotalUnits(DEFAULT_TOTAL_UNITS);
		}

		this.setMin(0);
		this.setMax(365);
		this.setValue(0);
		this.setValue2(365);

		var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
		this._bUsingDefaultLabels = this.getStepLabels() && !bTextLabels;
		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (this.getShowBubbles()) {
			this._oBubble = new sap.ui.commons.Label({
				id : this.getId() + '-bubbleTxt'
			});
			this._oBubble2 = new sap.ui.commons.Label({
				id : this.getId() + '-bubbleTxt2'
			});

			this._oBubble.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");
			this._oBubble2.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");

			this._oBubble.setText(this.getFormattedDate(this.getValueDate()));
			this._oBubble2.setText(this.getFormattedDate(this.getValue2Date()));
		}
	};

	/**
	 * Not yet supported
	 * 
	 * @param {boolean}
	 *            bVertical - if the control is to be displayed as Vertical
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setVertical = function(bVertical) {

		jQuery.sap.log.error("DateRangeSliderInternal.setVertical method is not yet supported!");
	};

	/**
	 * Not yet supported
	 * 
	 * @param {string}
	 *            sHeight - new height of the control
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setHeight = function(sHeight) {

		jQuery.sap.log.error("DateRangeSliderInternal.setHeight method is not yet supported!");
	};

	/**
	 * Creates rail labels.
	 * 
	 * @param oDateRangeSliderInternal -
	 *            The DateRangeSliderInternal object
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels = function(oDateRangeSliderInternal) {

		var aRailLabels = [];
		var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
		var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;

		for ( var i = 0; i <= iTotalUnits; i++) {
			var iDateIndex = Math.round(parseFloat(oDateRangeSliderInternal.getMin() + i * fStepSize));
			if (iDateIndex > oDateRangeSliderInternal.getMax()) {
				iDateIndex = oDateRangeSliderInternal.getMax();
			}

			var dTmpDate = null;
			if (oDateRangeSliderInternal._sGranularity === DAY) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
			} else if (oDateRangeSliderInternal._sGranularity === MONTH) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
			}
			aRailLabels[i] = oDateRangeSliderInternal.getFormattedDate(dTmpDate);
		}

		oDateRangeSliderInternal.setProperty("labels", aRailLabels);

		return aRailLabels;
	};

	/**
	 * Reposition the bubbles based on grip positions.
	 * 
	 * @param oDateRangeSliderInternal -
	 *            The DateRangeSliderInternal object
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles = function(oDateRangeSliderInternal) {

		var sGripId = oDateRangeSliderInternal.getId() + '-grip';
		var oGrip = jQuery.sap.domById(sGripId);
		var sLeftpx = oGrip.style.left;
		var sLeftPositionOfGrip = sLeftpx.substring(0, sLeftpx.length - 2);
		var iLeftPositionOfGrip = parseInt(sLeftPositionOfGrip, 10);

		var sGrip2Id = oDateRangeSliderInternal.getId() + '-grip2';
		var oGrip2 = jQuery.sap.domById(sGrip2Id);
		var sLeftpx2 = oGrip2.style.left;
		var sLeftPositionOfGrip2 = sLeftpx2.substring(0, sLeftpx2.length - 2);
		var iLeftPositionOfGrip2 = parseInt(sLeftPositionOfGrip2, 10);

		var sBubbleId = oDateRangeSliderInternal.getId() + '-bubble';
		var oBubble = jQuery.sap.domById(sBubbleId);
		var sBubble2Id = oDateRangeSliderInternal.getId() + '-bubble2';
		var oBubble2 = jQuery.sap.domById(sBubble2Id);

		var sBubbleleft = null, sBubble2left = null;

		var sBubbleleftpx = oBubble.style.left;
		if (sBubbleleftpx) {
			sBubbleleft = sBubbleleftpx.substring(0, sBubbleleftpx.length - 2);
		}
		var sBubble2leftpx = oBubble2.style.left;
		if (sBubble2leftpx) {
			sBubble2left = sBubble2leftpx.substring(0, sBubble2leftpx.length - 2);
		}

		var sWidthOfBubblePx = jQuery(oBubble).css("width");
		var iWidthOfBubble = parseInt(sWidthOfBubblePx, 10);

		var iDiff = 41;

		if (((iLeftPositionOfGrip + iWidthOfBubble) < iLeftPositionOfGrip2) || (!sBubbleleft && !sBubble2left)) {
			oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
			oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
		}
		// CSS 2084810 2013 - Fix for bubble repositioning in RTL mode.
		if (sap.ui.getCore().getConfiguration().getRTL() && ((iLeftPositionOfGrip2 + iWidthOfBubble) < iLeftPositionOfGrip)) {
			oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
			oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
		}

		var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
		var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());

		oDateRangeSliderInternal._oBubble.setText(sValue);
		oDateRangeSliderInternal._oBubble2.setText(sValue2);

		if (oDateRangeSliderInternal.isActive()) {
			oDateRangeSliderInternal._oBubble.rerender();
			oDateRangeSliderInternal._oBubble2.rerender();
		}
	};

	/**
	 * Function is called when grip position shall be changed
	 * 
	 * @param {float}
	 *            fNewValue the new grip value
	 * @param {int}
	 *            iNewPos the new grip position
	 * @param {DOMNode}
	 *            oGrip the changed grip
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.changeGrip = function(fNewValue, iNewPos, oGrip) {

		sap.ui.commons.Slider.prototype.changeGrip.apply(this, arguments);

		if (!isNaN(fNewValue)) {
			var iDateIndex = Math.round(fNewValue);
			var dTmpDate = null;
			if (this._sGranularity === DAY) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, iDateIndex);
			} else if (this._sGranularity === MONTH) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, iDateIndex);
			}

			oGrip.title = this.getFormattedDate(dTmpDate);
		}
	};

	/**
	 * Update ARIA values when a grip moves.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setAriaState = function() {

		var dateVal = this.getFormattedDate(this.getValueDate());
		var date2Val = this.getFormattedDate(this.getValue2Date());

		if (this.oMovingGrip === this.oGrip) {
			this.oMovingGrip.setAttribute('aria-valuetext', dateVal);
			this.oMovingGrip.setAttribute('aria-valuenow', this.getValue());
			this.oGrip2.setAttribute('aria-valuemin', dateVal);
		} else {
			this.oMovingGrip.setAttribute('aria-valuetext', date2Val);
			this.oMovingGrip.setAttribute('aria-valuenow', this.getValue2());
			this.oGrip.setAttribute('aria-valuemax', date2Val);
		}
	};

	/**
	 * Format the given date based on the Granularity and DateFormat.
	 * 
	 * @param {Date}
	 *            dDate The date to be formatted.
	 * 
	 * @Return the formatted date string
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getFormattedDate = function(dDate) {

		var oFormatter = null;

		switch (this._sGranularity) {

		case (DAY):
			oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
				style : "medium"
			});
			break;

		case (MONTH):
			oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
				pattern : 'MMM YYYY'
			});
			break;
		}

		return oFormatter.format(dDate);
	};

	/**
	 * Update the Labels, Bubble text and Tool Tip values and re-render DateRangeSliderInternal control.
	 * 
	 * @param oDateRangeSliderInternal
	 *            {sap.suite.ui.commons.DateRangeSliderInternal}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues = function(oDateRangeSliderInternal) {

		// update Labels based on DateFormat
		if (oDateRangeSliderInternal._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(oDateRangeSliderInternal);
		}

		// update bubble text based on DateFormat
		if (oDateRangeSliderInternal.getShowBubbles()) {
			var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
			var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());
			oDateRangeSliderInternal._oBubble.setText(sValue);
			oDateRangeSliderInternal._oBubble2.setText(sValue2);
		}
	};

	/**
	 * Getter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips.
	 * 
	 * @return oDateFormat {sap.ui.core.format.DateFormat}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateFormat = function() {

		return this._oDateFormat;
	};

	/**
	 * Setter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type, control's default
	 * formatting will be used.
	 * 
	 * @param oDateFormat
	 *            {sap.ui.core.format.DateFormat}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDateFormat = function(oDateFormat) {

		if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
			this._oDateFormat = oDateFormat;
		} else {
			this._oDateFormat = null;
		}
		sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues(this);
	};

	/**
	 * Returns an object containing valueDate and value2Date which are set to the values based on two grips of the DateRangeSliderInternal.
	 * 
	 * @return {Object} The date range object containing valueDate and value2Date Date.
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateRange = function() {

		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();

		var oCopy = {
			valueDate : dValueDate,
			value2Date : dValue2Date
		};
		return oCopy;
	};

	/**
	 * Handles the change event fired by the range slider after reseting the date range, fires the change event of DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChange = function() {

		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange = this.getDateRange();
		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
		this.fireLiveChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * fires the change event. The liveEvent is not fired here.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChangeWithoutLive = function() {

		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange = this.getDateRange();
		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Handles the live change event fired by the range slider after reseting the date range, fires the live change event of DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.fireLiveChangeForGrip = function(oGrip, fNewValue, fOldValue) {

		if (this.getShowBubbles() && fOldValue !== fNewValue) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange;
		if (oGrip === this.oGrip) {
			if (fOldValue !== fNewValue) {
				// fire event only if value changed
				oRange = this.getDateRange();
				this.fireLiveChange({
					value : oRange.valueDate,
					value2 : oRange.value2Date
				});
			}
		} else if (oGrip === this.oGrip2) {
			if (fOldValue !== fNewValue) {
				// fire event only if value changed
				oRange = this.getDateRange();
				this.fireLiveChange({
					value : oRange.valueDate,
					value2 : oRange.value2Date
				});
			}
		}
	};

	/**
	 * This function is called after the DateRangeSliderInternal is rendered
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onAfterRendering = function() {

		sap.ui.commons.RangeSlider.prototype.onAfterRendering.apply(this);
		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
	};

	/**
	 * Function is called when window is resized
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onresize = function(oEvent) {

		sap.ui.commons.RangeSlider.prototype.onresize.apply(this, arguments);
		if (this.getDomRef()) {
			if (this.getShowBubbles()) {
				sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
			}
		}
	};

	/**
	 * Sets the stepLabels property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setStepLabels = function(bStepLabels) {

		this.setProperty("stepLabels", bStepLabels);

		if (bStepLabels === true) {
			var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
			if (!bTextLabels) {
				sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
				this._bUsingDefaultLabels = true;
			}
		}
	};

	/**
	 * Sets the labels property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setLabels = function(aLabels) {

		this.setProperty("labels", aLabels);

		var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
		if (this.getStepLabels() && !bTextLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
			this._bUsingDefaultLabels = true;
		}
	};

	/**
	 * Sets the smallStepWidth property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setSmallStepWidth = function(fSmallStepWidth) {

		this.setProperty("smallStepWidth", Math.round(fSmallStepWidth));
	};

	/**
	 * Sets the totalUnits property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setTotalUnits = function(iTotalUnits) {

		this.setProperty("totalUnits", iTotalUnits);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}
	};

	/**
	 * Getter to get the max date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} max date
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMaxDate = function() {

		var dMax = null;

		switch (this._sGranularity) {

		case (DAY):
			dMax = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getMax());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
			break;

		case (MONTH):
			dMax = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getMax());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dMax);
			break;
		}

		return dMax;
	};

	/**
	 * Setter to set the max date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            max date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMaxDate = function(dMax) {

		var dMinOld = this.getMinDate();
		var dValueOld = this.getValueDate();
		var dValue2Old = this.getValue2Date();

		var bFireEvent = false;
		var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dMax);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValue2Old);
			break;

		case (MONTH):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dMax);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValue2Old);
			break;
		}

		bFireEvent = iNewValue > iNewMax || iNewValue2 > iNewMax;
		iNewValue = iNewValue > iNewMax ? iNewMax : iNewValue;
		iNewValue2 = iNewValue2 > iNewMax ? iNewMax : iNewValue2;

		this.setProperty('min', 0, true);
		this.setProperty('max', iNewMax, true);
		this.setProperty('value', iNewValue, true);
		this.setProperty('value2', iNewValue2, true);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (bFireEvent) {
			var oRange = this.getDateRange();

			this.fireChange({
				value : oRange.valueDate,
				value2 : oRange.value2Date
			});
		}
	};

	/**
	 * Getter to get the min date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} min date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMinDate = function() {

		var dMin = new Date(this._dMinDate);

		switch (this._sGranularity) {

		case (DAY):
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
			break;

		case (MONTH):
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dMin);
			break;
		}

		return dMin;
	};

	/**
	 * Setter to set the min date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            min date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMinDate = function(dMin) {

		var dMaxOld = this.getMaxDate();
		var dValueOld = this.getValueDate();
		var dValue2Old = this.getValue2Date();

		this._dMinDate = new Date(dMin);

		var bFireEvent = false;
		var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dMaxOld);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValue2Old);
			break;

		case (MONTH):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dMaxOld);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValue2Old);
			break;
		}

		bFireEvent = iNewValue < 0 || iNewValue2 < 0;
		iNewValue = iNewValue < 0 ? 0 : iNewValue;
		iNewValue2 = iNewValue2 < 0 ? 0 : iNewValue2;

		this.setProperty('min', 0, true);
		this.setProperty('max', iNewMax, true);
		this.setProperty('value', iNewValue, true);
		this.setProperty('value2', iNewValue2, true);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (bFireEvent) {
			var oRange = this.getDateRange();

			this.fireChange({
				value : oRange.valueDate,
				value2 : oRange.value2Date
			});
		}
	};

	/**
	 * Getter to get the value2 date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} value2 date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValue2Date = function() {

		var dValue2 = null;

		switch (this._sGranularity) {

		case (DAY):
			dValue2 = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue2());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dValue2);
			break;

		case (MONTH):
			dValue2 = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue2());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dValue2);
			break;
		}

		return dValue2;
	};

	/**
	 * Setter to set the value2 date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            dValue2 date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValue2Date = function(dValue2) {

		var iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue2);
			break;

		case (MONTH):
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue2);
			break;
		}

		this.setProperty('value2', iNewValue2, true);

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Getter to get the value date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} value date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValueDate = function() {

		var dValue = null;

		switch (this._sGranularity) {

		case (DAY):
			dValue = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue());
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
			break;

		case (MONTH):
			dValue = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue());
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dValue);
			break;
		}

		return dValue;
	};

	/**
	 * Setter to set the value date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            dValue date
	 * @private
	 */

	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValueDate = function(dValue) {

		var iNewValue = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue);
			break;

		case (MONTH):
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue);
			break;
		}

		this.setProperty('value', iNewValue, true);

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Setter to set the Granularity to DAY
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDayGranularity = function() {

		var dMinDate = this.getMinDate();
		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();
		var dMaxDate = this.getMaxDate();

		var iNoOfDaysValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValueDate);
		var iNoOfDaysValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValue2Date);
		var iNoOfDaysMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dMaxDate);

		this.setProperty('min', 0, true);
		this.setProperty('value', iNoOfDaysValueDateApartFromMinDate, true);
		this.setProperty('value2', iNoOfDaysValue2DateApartFromMinDate, true);
		this.setProperty('max', iNoOfDaysMaxDateApartFromMinDate, true);

		this._sGranularity = DAY;

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Setter to set the Granularity to MONTH
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMonthGranularity = function() {

		var dMinDate = this.getMinDate();
		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();
		var dMaxDate = this.getMaxDate();

		var iNoOfMonthsValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValueDate);
		var iNoOfMonthsValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValue2Date);
		var iNoOfMonthsMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dMaxDate);

		this.setProperty('min', 0, true);
		this.setProperty('value', iNoOfMonthsValueDateApartFromMinDate, true);
		this.setProperty('value2', iNoOfMonthsValue2DateApartFromMinDate, true);
		this.setProperty('max', iNoOfMonthsMaxDateApartFromMinDate, true);

		this._sGranularity = MONTH;

		sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._dMinDate);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Function is called when DateRangeSliderInternal grip or grip2 is moved, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {DOM.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleMove = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.handleMove.apply(this, [ oEvent ]);
		}
	};

	/**
	 * Function is called when End key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapend = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapend.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Home key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaphome = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsaphome.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Ctrl+right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaprightmodifiers = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsaprightmodifiers.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Ctrl+left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleftmodifiers = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapleftmodifiers.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapright = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapright.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleft = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapleft.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when DateRangeSliderInternal is clicked. over-write base Slider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onclick = function(oEvent) {

		var oMovingGrip = this.oMovingGrip;

		if (this.getEditable() && this.getEnabled()) {

			var fMultiplicator;

			// Check for ID where the behavior depends on the clicked area.
			var sMyTargetId = oEvent.target.getAttribute('ID');

			var fNewValue = this.getValue();
			var iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;

			switch (sMyTargetId) {
			case (this.oBar.id):
			case (this.oHiLi.id):
				// Click on slide bar
				if (this.getVertical()) {
					fMultiplicator = this.getBarWidth() - this.getOffsetX(oEvent);
				} else {
					fMultiplicator = this.getOffsetX(oEvent);
				}
				if (sMyTargetId === this.oHiLi.id) {
					if (this.getVertical()) {
						fMultiplicator -= this.getOffsetLeft(this.oHiLi);
					} else {
						fMultiplicator += this.getOffsetLeft(this.oHiLi);
					}
				}
				fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator));
				iNewPos = this.getOffsetX(oEvent);
				if (sMyTargetId === this.oHiLi.id) {
					iNewPos += this.getOffsetLeft(this.oHiLi);
				}
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
			case (this.getId() + '-left'):
				// Click on left end
				iNewPos = 0;
				if (this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			case (this.getId() + '-right'):
				// Click on right end
				iNewPos = this.getBarWidth();
				if (!this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			default:
				// If target is grip return
				// Not implemented as case because RangeSlider has multiple grips, for which cases cannot be inserted afterwards
				if (this.targetIsGrip(sMyTargetId)) {
					return;
				}
				// Check whether tick is clicked
				var iTickPos = sMyTargetId.search('-tick');
				if (iTickPos >= 0) {
					var iTickNum = parseInt(sMyTargetId.slice(this.getId().length + 5), 10);
					iNewPos = this.fTickDist * iTickNum;
					fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getTotalUnits()) * iTickNum));
					if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
						oMovingGrip = this.oStartTarget;
					} else if (this.targetIsGrip(sMyTargetId)) {
						oMovingGrip = oEvent.target;
					} else {
						oMovingGrip = this.getNearestGrip(iNewPos);
					}
					break;
				}

				// Outer DIV clicked -> ID given by caller. This is the case if all other DIVs are smaller,
				// or if tick text is clicked
				var iOffsetBar = jQuery(this.oBar).offset();
				var iOffsetMe = jQuery(oEvent.target).offset();
				if (this.getVertical()) {
					iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.top - iOffsetMe.top);
				} else {
					iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.left - iOffsetMe.left);
				}
				if (iNewPos <= 0) {
					iNewPos = 0;
					if (this.getVertical()) {
						fNewValue = this.getMax();
					} else {
						fNewValue = this.getMin();
					}
				} else {
					if (iNewPos >= this.getBarWidth()) {
						iNewPos = this.getBarWidth();
						if (this.getVertical()) {
							fNewValue = this.getMin();
						} else {
							fNewValue = this.getMax();
						}
					} else {
						if (this.getVertical()) {
							fMultiplicator = this.getBarWidth() - iNewPos;
						} else {
							fMultiplicator = iNewPos;
						}
						fNewValue = this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator);
					}
				}
				fNewValue = this.convertRtlValue(fNewValue);
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
			}

			if ((oMovingGrip === this.oGrip2 && this.getPinGrip2()) || (oMovingGrip === this.oGrip && this.getPinGrip())) {
				return;
			}

			var validation = this.validateNewPosition(fNewValue, iNewPos, oMovingGrip, (this.getValueForGrip(oMovingGrip) > fNewValue));
			fNewValue = validation.fNewValue;
			iNewPos = validation.iNewPos;

			this.changeGrip(fNewValue, iNewPos, oMovingGrip);
			this.handleFireChange();

		}

		// Set focus to grip
		oMovingGrip.focus();
		this.oMovingGrip = oMovingGrip;
		this.oStartTarget = null;

	};

}());

}; // end of sap/suite/ui/commons/DateRangeSliderInternal.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DynamicContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DynamicContainer.
jQuery.sap.declare("sap.suite.ui.commons.DynamicContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DynamicContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayTime displayTime} : int (default: 5000)</li>
 * <li>{@link #getTransitionTime transitionTime} : int (default: 500)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.suite.ui.commons.GenericTile[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The control that displays multiple GenericTile controls as changing slides.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.DynamicContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DynamicContainer", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"displayTime" : {type : "int", group : "Appearance", defaultValue : 5000},
		"transitionTime" : {type : "int", group : "Appearance", defaultValue : 500}
	},
	aggregations : {
		"tiles" : {type : "sap.suite.ui.commons.GenericTile", multiple : true, singularName : "tile"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DynamicContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DynamicContainer.extend
 * @function
 */


/**
 * Getter for property <code>displayTime</code>.
 * The time of the slide display in milliseconds.
 *
 * Default value is <code>5000</code>
 *
 * @return {int} the value of property <code>displayTime</code>
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#getDisplayTime
 * @function
 */

/**
 * Setter for property <code>displayTime</code>.
 *
 * Default value is <code>5000</code> 
 *
 * @param {int} iDisplayTime  new value for property <code>displayTime</code>
 * @return {sap.suite.ui.commons.DynamicContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#setDisplayTime
 * @function
 */


/**
 * Getter for property <code>transitionTime</code>.
 * The time of the slide changing in milliseconds.
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>transitionTime</code>
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#getTransitionTime
 * @function
 */

/**
 * Setter for property <code>transitionTime</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iTransitionTime  new value for property <code>transitionTime</code>
 * @return {sap.suite.ui.commons.DynamicContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#setTransitionTime
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * The set of Generic Tiles to be shown in the control.
 * 
 * @return {sap.suite.ui.commons.GenericTile[]}
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.suite.ui.commons.GenericTile}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.DynamicContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.suite.ui.commons.GenericTile}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.DynamicContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.suite.ui.commons.GenericTile} vTile the tile to remove or its index or id
 * @return {sap.suite.ui.commons.GenericTile} the removed tile or null
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.GenericTile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.GenericTile</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.GenericTile}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.suite.ui.commons.DynamicContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DynamicContainer#destroyTiles
 * @function
 */


// Start of sap/suite/ui/commons/DynamicContainer.js
sap.suite.ui.commons.DynamicContainer.prototype.init = function() {
	this._oDelegate = {
		onAfterRendering: function(oEvent) {
			oEvent.srcControl.$().removeAttr("tabindex");
		}
	};
};

sap.suite.ui.commons.DynamicContainer.prototype.onAfterRendering = function() {
	var iTilesCount = this.getTiles().length;
	this._bAnimationPause = false;
	this._iCurrAnimationTime = 0;
	
	if (iTilesCount) {
		this._scrollToNextTile();
		if (iTilesCount > 1) {
			this._startAnimation();
		}
	}
};

sap.suite.ui.commons.DynamicContainer.prototype._toggleAnimation = function() {
	if (this.getTiles().length > 1) {
		if (this._bAnimationPause) {
			this._startAnimation();
		} else {
			this._stopAnimation();
		}
	}

	this._bAnimationPause = !this._bAnimationPause;
};

sap.suite.ui.commons.DynamicContainer.prototype._stopAnimation = function() {
	this._iCurrAnimationTime += Date.now() - this._iStartTime;
	
	clearTimeout(this._sTimerId);

	if (this._iCurrentTile != undefined) {
		var oWrapperTo = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iCurrentTile);
		oWrapperTo.stop();
	}
	
	if (this._iPrvTile != undefined) {
		var oWrapperFrom = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iPrvTile);
		oWrapperFrom.stop();
	}
};

sap.suite.ui.commons.DynamicContainer.prototype.onBeforeRendering = function() {
	this._stopAnimation();
	
	this._sWidth = this._sHeight = undefined;
	this._iCurrentTile = this._iPrvTile = undefined;
};

sap.suite.ui.commons.DynamicContainer.prototype._startAnimation = function() {
	var iDisplayTime = this.getDisplayTime() - this._iCurrAnimationTime;
	var that = this;
	
	clearTimeout(this._sTimerId);
	
	this._sTimerId = setTimeout(function() {
		that._scrollToNextTile();
	}, iDisplayTime);
	
	this._iStartTime = Date.now();
};

sap.suite.ui.commons.DynamicContainer.prototype.exit = function() {
	this._stopAnimation();
};

sap.suite.ui.commons.DynamicContainer.prototype._scrollToNextTile = function(bPause) {
	var iTransitionTime = this._iCurrAnimationTime - this.getDisplayTime();
	iTransitionTime = this.getTransitionTime() - (iTransitionTime > 0 ? iTransitionTime : 0);
	var bFirstAnimaion = iTransitionTime == this.getTransitionTime();
	
	if (bFirstAnimaion) {
		var iNxtTile = this._getNextTileIndex(this._iCurrentTile);
		
		this._iPrvTile = this._iCurrentTile;
		this._iCurrentTile = iNxtTile;
	}
	
	var oWrapperTo = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iCurrentTile);
		
	var bDoAnimate = this._iPrvTile != undefined;
	
	var sDir = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
	if (bDoAnimate) {
		var oWrapperFrom = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iPrvTile);
		var sWidthFrom = oWrapperFrom.css("width");
		
		var fWidthTo= parseFloat(oWrapperTo.css("width"));
		var fWidthFrom = parseFloat(sWidthFrom);
		var bChangeSizeBefore = fWidthFrom < fWidthTo;
		
		if (bChangeSizeBefore) {
			this._changeSizeTo(this._iCurrentTile);
		}
		
		if (bFirstAnimaion) {
			oWrapperTo.css(sDir, sWidthFrom);
		}
		
		var oDir = {};
		oDir[sDir] = "-" + sWidthFrom;
	
		var that = this;
		oWrapperFrom.animate(oDir, {
			duration: iTransitionTime,
			done: function() {
				if (!bChangeSizeBefore) {
					that._changeSizeTo(that._iCurrentTile);
				}
				oWrapperFrom.css(sDir, "");
			}
		});		
		oDir[sDir] = "0px";

		oWrapperTo.animate(oDir, {
			duration: iTransitionTime,
			done: function() {
				that._iCurrAnimationTime = 0;
				if(!bPause) {
					that._startAnimation();	
				}
			}
		});
	} else {
		this._changeSizeTo(this._iCurrentTile);
		oWrapperTo.css(sDir, "0px");
	}
	this._setAriaDescriptor();
};

sap.suite.ui.commons.DynamicContainer.prototype._scrollToPrevTile = function(bPause) {
	var iTransitionTime = this._iCurrAnimationTime - this.getDisplayTime();
	iTransitionTime = this.getTransitionTime() - (iTransitionTime > 0 ? iTransitionTime : 0);
	var bFirstAnimaion = iTransitionTime == this.getTransitionTime();
	
	if (bFirstAnimaion) {
		var iNxtTile = this._getPrevTileIndex(this._iCurrentTile);
		
		this._iPrvTile = this._iCurrentTile;
		this._iCurrentTile = iNxtTile;
	}
	
	var oWrapperTo = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iCurrentTile);
		
	var bDoAnimate = this._iPrvTile != undefined;
	
	var sDir = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
	if (bDoAnimate) {
		var oWrapperFrom = jQuery.sap.byId(this.getId() + "-wrapper-" + this._iPrvTile);
		var sWidthFrom = oWrapperFrom.css("width");
		var sWidthTo = oWrapperTo.css("width");
		
		var fWidthTo= parseFloat(sWidthTo);
		var fWidthFrom = parseFloat(sWidthFrom);
		var bChangeSizeBefore = fWidthFrom < fWidthTo;
		
		if (bChangeSizeBefore) {
			this._changeSizeTo(this._iCurrentTile);
		}
		
		if (bFirstAnimaion) {
			oWrapperTo.css(sDir, "-" + sWidthTo);
		}
		
		var that = this;

		var oDir = {};

		oDir[sDir] = "0px";		
		oWrapperTo.animate(oDir, {
			duration: iTransitionTime,
			done: function() {
				that._iCurrAnimationTime = 0;
				if(!bPause) {
					that._startAnimation();	
				}
			}
		});
	
		oDir[sDir] = sWidthTo;
		oWrapperFrom.animate(oDir, {
			duration: iTransitionTime,
			done: function() {
				if (!bChangeSizeBefore) {
					that._changeSizeTo(that._iCurrentTile);
				}
				oWrapperFrom.css(sDir, "");
			}
		});		

	} else {
		this._changeSizeTo(this._iCurrentTile);
		oWrapperTo.css(sDir, "0px");
	}
	this._setAriaDescriptor();
};

sap.suite.ui.commons.DynamicContainer.prototype._setAriaDescriptor = function() {
	this.$().attr("aria-label", this.getTiles()[this._iCurrentTile].getAltText().replace(/\s/g, " "));
};

sap.suite.ui.commons.DynamicContainer.prototype._changeSizeTo = function(iNxtTile) {
	var oNxtTile = this.getTiles()[iNxtTile];
	if (this._sFrameType) {
		this.$().removeClass(this._sFrameType);
	}
	
	if (this._sSize) {
		this.$().removeClass(this._sSize);
	}
	this.$().addClass(oNxtTile.getFrameType()).addClass(oNxtTile.getSize());

	this._sFrameType = oNxtTile.getFrameType();
	this._sSize = oNxtTile.getSize();
};

sap.suite.ui.commons.DynamicContainer.prototype._getNextTileIndex = function(iIndex) {
	if (iIndex + 1 < this.getTiles().length) {
		return iIndex + 1;
	}
	
	return 0;
};

sap.suite.ui.commons.DynamicContainer.prototype._getPrevTileIndex = function(iIndex) {
	if (iIndex - 1 >= 0) {
		return iIndex - 1;
	}
	
	return this.getTiles().length-1;
};


sap.suite.ui.commons.DynamicContainer.prototype.onsaptouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteDCHvr");
};

sap.suite.ui.commons.DynamicContainer.prototype.onsaptouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteDCHvr");
};

//ontouchstart/ontouchend are generated on iOS devices. onsaptouchstart/end is not fired on them.
sap.suite.ui.commons.DynamicContainer.prototype.ontouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteDCHvr");
};

sap.suite.ui.commons.DynamicContainer.prototype.ontouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteDCHvr");
};

sap.suite.ui.commons.DynamicContainer.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate) {
	if (sAggregationName === "tiles") {
		oObject.addDelegate(this._oDelegate);
		oObject.attachEvent = function(sEventId, oData, fnFunction, oListener) {
			sap.ui.core.Control.prototype.attachEvent.call(oObject, sEventId, oData, fnFunction, oListener);
		};
	}
	return sap.ui.core.Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex, bSuppressInvalidate);
};

sap.suite.ui.commons.DynamicContainer.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
	if (sAggregationName === "tiles") {
		oObject.addDelegate(this._oDelegate);
		oObject.attachEvent = function(sEventId, oData, fnFunction, oListener) {
			sap.ui.core.Control.prototype.attachEvent.call(oObject, sEventId, oData, fnFunction, oListener);
		};
	}
    return sap.ui.core.Control.prototype.addAggregation.call(this, sAggregationName, oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.DynamicContainer.prototype.removeAggregation = function(sAggregationName, vObject, bSuppressInvalidate) {
	var oObject = sap.ui.core.Control.prototype.removeAggregation.call(this, sAggregationName, vObject, bSuppressInvalidate);
	if (sAggregationName === "tiles") {
		oObject.removeDelegate(this._oDelegate);
		delete oObject.attachEvent;
	}
    return oObject;
};

sap.suite.ui.commons.DynamicContainer.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate) {
	var aObjects = sap.ui.core.Control.prototype.removeAllAggregation.call(this, sAggregationName, bSuppressInvalidate);
	
	if (sAggregationName === "tiles") {
		for (var i = 0; i < aObjects.length; i++) {
			aObjects[i].removeDelegate(this._oDelegate);
			delete aObjects[i].attachEvent;
		}
	}
    return aObjects;
};

sap.suite.ui.commons.DynamicContainer.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER) {
        this.getTiles()[this._iCurrentTile].firePress();
    } /*else if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
    	this._toggleAnimation();
    	oEvent.preventDefault();
    } else if(oEvent.which == jQuery.sap.KeyCodes.P && this._bAnimationPause) {
    	this._scrollToPrevTile(true);
    } else if (oEvent.which == jQuery.sap.KeyCodes.N && this._bAnimationPause) {
    	this._scrollToNextTile(true);
    }*/
};

sap.suite.ui.commons.DynamicContainer.prototype.onmouseup = function(oEvent) {
	this.removeStyleClass("sapSuiteDCHvr");
	if(jQuery.device.is.desktop) {
    	if(this._bPreventEndEvent) {
    		this._bPreventEndEvent = false;
    		oEvent.preventDefault();
    		return;
    	}
    	this.getTiles()[this._iCurrentTile].firePress();
	}
};

sap.suite.ui.commons.DynamicContainer.prototype.onmousedown = function (oEvent) {
    this.addStyleClass("sapSuiteDCHvr");
};
}; // end of sap/suite/ui/commons/DynamicContainer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FacetOverview') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FacetOverview.
jQuery.sap.declare("sap.suite.ui.commons.FacetOverview");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FacetOverview.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getQuantity quantity} : int (default: -1)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '10rem')</li>
 * <li>{@link #getRowSpan rowSpan} : int (default: 1)</li>
 * <li>{@link #getHeightType heightType} : sap.suite.ui.commons.FacetOverviewHeight (default: sap.suite.ui.commons.FacetOverviewHeight.None)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.FacetOverview#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.FacetOverview#event:heightChange heightChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display the preview of the facet content.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.FacetOverview
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.FacetOverview", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"quantity" : {type : "int", group : "Misc", defaultValue : -1},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '10rem', deprecated: true},
		"rowSpan" : {type : "int", group : "Misc", defaultValue : 1, deprecated: true},
		"heightType" : {type : "sap.suite.ui.commons.FacetOverviewHeight", group : "Misc", defaultValue : sap.suite.ui.commons.FacetOverviewHeight.None}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"press" : {}, 
		"heightChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FacetOverview with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FacetOverview.extend
 * @function
 */

sap.suite.ui.commons.FacetOverview.M_EVENTS = {'press':'press','heightChange':'heightChange'};


/**
 * Getter for property <code>title</code>.
 * This property is shown in the upper left part of control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setTitle
 * @function
 */


/**
 * Getter for property <code>quantity</code>.
 * Displays a label with the number of items in the right part of the control.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>quantity</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getQuantity
 * @function
 */

/**
 * Setter for property <code>quantity</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iQuantity  new value for property <code>quantity</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setQuantity
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the control. By default, the value is empty and the control inhertis the size from its content.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems for the correct work in the UnifiedThingInspector.
 *
 * Default value is <code>10rem</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @deprecated Since version 1.17.1. 
 * This property was replaced by heightType property.
 * @name sap.suite.ui.commons.FacetOverview#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>10rem</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.17.1. 
 * This property was replaced by heightType property.
 * @name sap.suite.ui.commons.FacetOverview#setHeight
 * @function
 */


/**
 * Getter for property <code>rowSpan</code>.
 * Defines the number of rows that the control represents in an external layout.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>rowSpan</code>
 * @public
 * @deprecated Since version 1.17.1. 
 * It is not used any more for the laoyut calculations in UnifiedThingInspector.
 * @name sap.suite.ui.commons.FacetOverview#getRowSpan
 * @function
 */

/**
 * Setter for property <code>rowSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iRowSpan  new value for property <code>rowSpan</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.17.1. 
 * It is not used any more for the laoyut calculations in UnifiedThingInspector.
 * @name sap.suite.ui.commons.FacetOverview#setRowSpan
 * @function
 */


/**
 * Getter for property <code>heightType</code>.
 * Indicates the height of the control in the predifened values. If set to None, then the height is defined by the depricated height property.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.suite.ui.commons.FacetOverviewHeight} the value of property <code>heightType</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getHeightType
 * @function
 */

/**
 * Setter for property <code>heightType</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.suite.ui.commons.FacetOverviewHeight} oHeightType  new value for property <code>heightType</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setHeightType
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content that appears in the left part of the control.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#destroyContent
 * @function
 */


/**
 * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of the chosen control.
 *
 * @name sap.suite.ui.commons.FacetOverview#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.id The control ID.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of the chosen control.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The control ID.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.FacetOverview#firePress
 * @function
 */


/**
 * This event is fired when a new value to the heightType or height property is set.
 *
 * @name sap.suite.ui.commons.FacetOverview#heightChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'heightChange' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself. 
 *  
 * This event is fired when a new value to the heightType or height property is set.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#attachHeightChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'heightChange' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#detachHeightChange
 * @function
 */

/**
 * Fire event heightChange to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.FacetOverview#fireHeightChange
 * @function
 */


// Start of sap/suite/ui/commons/FacetOverview.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.suite.ui.commons.FacetOverview.prototype.init = function(){
	var that = this;
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	
	if (jQuery.device.is.desktop) {
		this._oHoverIcon = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "-hover-icon-img",
			src: "sap-icon://slim-arrow-right"
		});
	} else {
		//Listen to orientation change to recalculate max-width value for title and qty fields.
		//sap.ui.core.ResizeHandler.register is not called on orientation change. It works only on desktops.
        sap.ui.Device.orientation.attachHandler(function (oE) {
                that._updateTitleMaxWidth(oE);
        });
	}
	
	this._oNoDataLabel = new sap.m.Label(this.getId() + "-no-content",{
		text : this._rb.getText("FACETOVERVIEW_NO_ITEMS_TEXT")
	});

};

sap.suite.ui.commons.FacetOverview.prototype.exit = function(){
	var that = this;
	if (this._oHoverIcon) {
		this._oHoverIcon.destroy();
	}
	
	sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);

	sap.ui.Device.orientation.detachHandler(function () {
        that._updateTitleMaxWidth();
    });

	this._oNoDataLabel.destroy();
};

sap.suite.ui.commons.FacetOverview.prototype._updateTitleMaxWidth = function(oE) {
	this._handleTitleResize();
};

sap.suite.ui.commons.FacetOverview.prototype._handleTitleResize = function() {
	var iTitleWidth = jQuery.sap.byId(this.getId() +  "-title").width();
	if (this._iTitleWidth != iTitleWidth) {
		var iTitleTextMaxWidth = iTitleWidth 
			- jQuery.sap.byId(this.getId() + "-qty").outerWidth()
			- 15;// width of the icon is always stable
		jQuery.sap.byId(this.getId() +  "-title-text").css("max-width", iTitleTextMaxWidth);
		this._iTitleWidth = iTitleWidth;
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onAfterRendering = function () {
	//Listen for size changes only on desktop. Resize handler is not called on phones when changing orientation.
	if (jQuery.device.is.desktop) {
		if (this._sTitleResizeHandlerId) {
			sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
		}
		var oTitle = jQuery.sap.domById(this.getId() + "-title");
		this._sTitleResizeHandlerId = sap.ui.core.ResizeHandler.register(oTitle,  jQuery.proxy(this._handleTitleResize, this));
	}
	
	this._handleTitleResize();
	
	if (jQuery.device.is.desktop) {
		var that = this;
		this.$()[0].addEventListener("focusin", function(oEvent) {
			that.$().find("[data-tabindex]").attr("tabindex", function() {
				return this.getAttribute("data-tabindex");
			});
		}, true);
		this.onsapfocusleave();
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onclick = function(oEvent) {
    if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
		this.firePress({
			id: this.getId()
		});
    }
};

sap.suite.ui.commons.FacetOverview.prototype.onkeydown = function(oEvent) {
	if (oEvent.which == jQuery.sap.KeyCodes.ENTER) {
		this.onclick(oEvent);
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onsapfocusleave = function(oEvent) {
	if (jQuery.device.is.desktop) {
		this.$().find("[data-tabindex]").removeAttr("data-tabindex");
		this.$().find("[tabindex]").attr("data-tabindex", function() {
			return this.getAttribute("tabindex");
		}).attr("tabindex", "-1");
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onsaptouchstart = function (oEvent) {
    if (this.hasListeners("press")) {
        if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
            this.addStyleClass("sapSuiteFovSelected");
        }
    }
};

sap.suite.ui.commons.FacetOverview.prototype.onsaptouchend = function (oEvent) {
    if (this.hasListeners("press")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

sap.suite.ui.commons.FacetOverview.prototype.ontouchmove = function (oEvent) {
    if (this.hasListeners("press")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

//ontouchstart/ontouchend are generated on iOS devices. onsaptouchstart/end is not fired on them.
sap.suite.ui.commons.FacetOverview.prototype.ontouchstart = function (oEvent) {
    if (this.hasListeners("press")) {
        if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
            this.addStyleClass("sapSuiteFovSelected");
        }
    }
};

sap.suite.ui.commons.FacetOverview.prototype.ontouchend = function (oEvent) {
    if (this.hasListeners("press")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

sap.suite.ui.commons.FacetOverview.prototype.ontouchmove = function (oEvent) {
    if (this.hasStyleClass("sapSuiteFovSelected")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

sap.suite.ui.commons.FacetOverview.prototype.getHeight = function(){
	switch (this.getHeightType()) {
		case sap.suite.ui.commons.FacetOverviewHeight.XS:
			return "4rem";
		case sap.suite.ui.commons.FacetOverviewHeight.S:
			return "6rem";
		case sap.suite.ui.commons.FacetOverviewHeight.M:
			return "10rem";
		case sap.suite.ui.commons.FacetOverviewHeight.L:
			return "14rem";
		case sap.suite.ui.commons.FacetOverviewHeight.XL:
			return "21rem";
		case sap.suite.ui.commons.FacetOverviewHeight.XXL:
			return "32rem";
		case sap.suite.ui.commons.FacetOverviewHeight.Auto:
			return "auto";
		case sap.suite.ui.commons.FacetOverviewHeight.None:
		default:
			return this.getProperty("height");
	}
};

sap.suite.ui.commons.FacetOverview.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	this.fireHeightChange();
    return this;
};

sap.suite.ui.commons.FacetOverview.prototype.setHeightType = function(eHeightType) {
	this.setProperty("heightType", eHeightType);
	this.fireHeightChange();
    return this;
};
}; // end of sap/suite/ui/commons/FacetOverview.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedItem.
jQuery.sap.declare("sap.suite.ui.commons.FeedItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new FeedItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getImage image} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getPublicationDate publicationDate} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element represents a news feed item.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.FeedItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.FeedItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"image" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"publicationDate" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setTitle
 * @function
 */


/**
 * Getter for property <code>image</code>.
 * The background image for the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>image</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getImage
 * @function
 */

/**
 * Setter for property <code>image</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImage  new value for property <code>image</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setImage
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The target location of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setLink
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setSource
 * @function
 */


/**
 * Getter for property <code>publicationDate</code>.
 * The date the feed was published.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>publicationDate</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getPublicationDate
 * @function
 */

/**
 * Setter for property <code>publicationDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oPublicationDate  new value for property <code>publicationDate</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setPublicationDate
 * @function
 */


// Start of sap/suite/ui/commons/FeedItem.js
/**
 * validate the url first and then set the image property
 * 
 * @param oImage
 *                {object}
 * @public
 */
sap.suite.ui.commons.FeedItem.prototype.setImage = function(oImage) {

    if (oImage) {
        var validUrl = jQuery.sap.validateUrl(oImage);
        if (validUrl) {
            this.setProperty("image", oImage);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + oImage
                    + "'. Property 'image' of FeedItem not set");
        }
    }
};

/**
 * validate the url first and then set the link property
 * 
 * @param sLink
 *                {string}
 * @public
 */
sap.suite.ui.commons.FeedItem.prototype.setLink = function(sLink) {

    if (sLink) {
        var validUrl = jQuery.sap.validateUrl(sLink);
        if (validUrl) {
            this.setProperty("link", sLink);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sLink
                    + "'. Property 'link' of FeedItem not set");
        }
    }
};
}; // end of sap/suite/ui/commons/FeedItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItemHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedItemHeader.
jQuery.sap.declare("sap.suite.ui.commons.FeedItemHeader");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new FeedItemHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getImage image} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getPublicationDate publicationDate} : object</li>
 * <li>{@link #getDescription description} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays feed item header information.
 * @extends sap.m.ListItemBase
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.FeedItemHeader
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.suite.ui.commons.FeedItemHeader", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"image" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"publicationDate" : {type : "object", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedItemHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedItemHeader.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setTitle
 * @function
 */


/**
 * Getter for property <code>image</code>.
 * The image associated with the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>image</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getImage
 * @function
 */

/**
 * Setter for property <code>image</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImage  new value for property <code>image</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setImage
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The target location of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setLink
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setSource
 * @function
 */


/**
 * Getter for property <code>publicationDate</code>.
 * The date the feed item was published.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>publicationDate</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getPublicationDate
 * @function
 */

/**
 * Setter for property <code>publicationDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oPublicationDate  new value for property <code>publicationDate</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setPublicationDate
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setDescription
 * @function
 */


// Start of sap/suite/ui/commons/FeedItemHeader.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.FeedItemHeader.prototype.init = function(){
//   // do something for initialization...
//};


sap.suite.ui.commons.FeedItemHeader.prototype.exit = function(oEvent) {

	if (this._htmlControl) {
		this._htmlControl.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * Sets the specified image URI if it is valid, otherwise an error messsage is logged.
 * 
 * @param sImageUri {String}
 * @public
 */
sap.suite.ui.commons.FeedItemHeader.prototype.setImage = function(sImageUri) {

    if (sImageUri) {
        var validUrl = jQuery.sap.validateUrl(sImageUri);
        if (validUrl) {
            this.setProperty("image", sImageUri);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sImageUri
                    + "'. Property 'image' of FeedItemHeader not set");
        }
    }
};

/**
 * Sets the specified link URL if it is valid, otherwise an error messsage is logged.
 * 
 * @param sLinkUri {String}
 * @public
 */
sap.suite.ui.commons.FeedItemHeader.prototype.setLink = function(sLinkUri) {

    if (sLinkUri) {
        var validUrl = jQuery.sap.validateUrl(sLinkUri);
        if (validUrl) {
            this.setProperty("link", sLinkUri);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sLinkUri
                    + "'. Property 'link' of FeedItemHeader not set");
        }
    }
};

/**
 * Fire press event.
 * 
 * @private
 */
sap.suite.ui.commons.FeedItemHeader.prototype.onclick = function(oEvent) {

    this.firePress({
        link : this.getLink()
    });

    // Prevent the browser from acting on events triggered by clicking on html markup inside of the description (like anchors)
    oEvent.preventDefault();
};	

/**
 * Get the HTML control used to render description content that may contain HTML markup.
 * @private
 * @returns HTML control
 */
sap.suite.ui.commons.FeedItemHeader.prototype._getHtmlControl = function() {
	if(!this._htmlControl) {
		this._htmlControl = new sap.ui.core.HTML({
			id: this.getId() + "-feedItemHeaderDescription",
			sanitizeContent: true
		});		
	}
	return this._htmlControl;
};	


}; // end of sap/suite/ui/commons/FeedItemHeader.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItemHeaderRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.FeedItemHeaderRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained



/**
 * @class FeedItemHeader renderer.
 * @static
 */
sap.suite.ui.commons.FeedItemHeaderRenderer = sap.ui.core.Renderer
        .extend(sap.m.ListItemBaseRenderer);

/**
 * Overrides the List Content Rendering to suit FeedItemHeader style
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FeedItemHeaderRenderer.renderLIContent = function(oRm,
        oFeedItemHeader) {
        
    // Change to display multiple columns on FeedItem.
    // Multi-column display for <div> elements is supported in Chrome, Safari and Firefox. Not supported in I.E 9 and lower versions. The current 
    // style will apply in those browsers.

    var multiColumnSupported = true;    
    if (jQuery.browser.msie && jQuery.browser.version.substring(0,2) < 10) {
    	multiColumnSupported = false;
    }

    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oFeedItemHeader);
    oRm.addClass("sapSuiteUiCommonsFeedItemHeader");
    oRm.addClass("sapSuiteUiCommonsPointer");
    oRm.writeClasses();
    oRm.write(">");

	    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderImage"');
	    oRm.write(" style='background-image:url(");
	    oRm.writeEscaped(oFeedItemHeader.getImage());
	    oRm.write(");'");
	    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderImage");
	    oRm.writeClasses();
	    oRm.write(">");
		       oRm.write("<div");
			    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderLowerText");
			    oRm.writeClasses();
			    oRm.write(">");
				    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderSource"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderSource");
				    oRm.writeClasses();
				    oRm.writeAttribute("tabindex", 0);
				    oRm.write(">");
				    oRm.writeEscaped(oFeedItemHeader.getSource());
				    oRm.write("</div>");
				    
				    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderAge"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderAge");
				    oRm.writeClasses();
				    oRm.writeAttribute("tabindex", 0);
				    oRm.write(">");
				    oRm.writeEscaped(sap.suite.ui.commons.util.FeedItemUtils
				            .calculateFeedItemAge(oFeedItemHeader.getPublicationDate()));
				    oRm.write("</div>");
				oRm.write("</div>");
		oRm.write("</div>");

	    oRm.write("<div");
	    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderText");
	    oRm.writeClasses();
	    oRm.write(">");    

		    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderTitleAndDesc"');
		    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderDescription");
		    if (multiColumnSupported) {
		    	oRm.addClass("sapSuiteUiCommonsFeedItemHeaderDescriptionMultiCol");
		    }
		    oRm.writeClasses();
		    oRm.write(">");
    
			    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderTitle"');
			    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderTitle");
			    if (multiColumnSupported) {
			    	oRm.addClass("sapSuiteUiCommonsFeedItemHeaderTitleMultiCol");
			    }
			    oRm.writeClasses();
			    oRm.writeAttribute("tabindex", 0);
			    oRm.write(">");
			    oRm.writeEscaped(oFeedItemHeader.getTitle());
			    oRm.write("</div>");
			    
			    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderDesc"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderHeight");
				    oRm.writeClasses();
				    oRm.writeAttribute("tabindex", 0);
				    oRm.write(">");
				    var htmlControl = oFeedItemHeader._getHtmlControl();
					//The HTML control will only render content inside of html tags, so you can't just set plain text for the content without
					//wrapping in an html tag.	
				    htmlControl.setContent('<div>' + oFeedItemHeader.getDescription() +  '</div>');
				    oRm.renderControl(htmlControl);
			    oRm.write("</div>");
		oRm.write("</div>");
 
    oRm.write("</div>"); // FeedItemHeader control
};

}; // end of sap/suite/ui/commons/FeedItemHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedTile.
jQuery.sap.declare("sap.suite.ui.commons.FeedTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FeedTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayDuration displayDuration} : int (default: 5)</li>
 * <li>{@link #getDisplayArticleImage displayArticleImage} : boolean (default: true)</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getDefaultImages defaultImages} : sap.ui.core.URI[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.suite.ui.commons.FeedItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.FeedTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays news feeds.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.FeedTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.FeedTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"displayDuration" : {type : "int", group : "Misc", defaultValue : 5},
		"displayArticleImage" : {type : "boolean", group : "Behavior", defaultValue : true},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"defaultImages" : {type : "sap.ui.core.URI[]", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"items" : {type : "sap.suite.ui.commons.FeedItem", multiple : true, singularName : "item"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedTile.extend
 * @function
 */

sap.suite.ui.commons.FeedTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>displayDuration</code>.
 * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>displayDuration</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDisplayDuration
 * @function
 */

/**
 * Setter for property <code>displayDuration</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iDisplayDuration  new value for property <code>displayDuration</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDisplayDuration
 * @function
 */


/**
 * Getter for property <code>displayArticleImage</code>.
 * To display article Image or not. If it is true, the article Image will be displayed based on precedence. If it is false, the default image will be displayed.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayArticleImage</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDisplayArticleImage
 * @function
 */

/**
 * Setter for property <code>displayArticleImage</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayArticleImage  new value for property <code>displayArticleImage</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDisplayArticleImage
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setSource
 * @function
 */


/**
 * Getter for property <code>defaultImages</code>.
 * A list of default images that is cycled by the control when no image is available for a feed item or when no feed items exist. After a random image is displayed first time, control cycles through this list of images.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI[]} the value of property <code>defaultImages</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDefaultImages
 * @function
 */

/**
 * Setter for property <code>defaultImages</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI[]} aDefaultImages  new value for property <code>defaultImages</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDefaultImages
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The feed items the control cycles through.
 * 
 * @return {sap.suite.ui.commons.FeedItem[]}
 * @public
 * @name sap.suite.ui.commons.FeedTile#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.suite.ui.commons.FeedItem} vItem the item to remove or its index or id
 * @return {sap.suite.ui.commons.FeedItem} the removed item or null
 * @public
 * @name sap.suite.ui.commons.FeedTile#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.FeedItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.FeedTile#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.FeedItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.FeedTile#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#destroyItems
 * @function
 */


/**
 * The event fired when the user clicks on the control.
 *
 * @name sap.suite.ui.commons.FeedTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.FeedTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.FeedTile</code>.<br/> itself. 
 *  
 * The event fired when the user clicks on the control.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.FeedTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.FeedTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.FeedTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/FeedTile.js
///**
// * This file defines behavior for the control,
// */

(function() {

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.init = function() {

		this._currentItemIndex = 0;
		this._stagedModel = null;
		this._defaultImageIndex = -1;
	};

	/**
	 * This function is called when displayDuration expires to cycle to the next FeedItem in the list.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.cycle = function() {

		// If the staged model is not null then update the control with the new model
		// and adjust the current item index if necessary.
		if (this._stagedModel) {
			jQuery.sap.log.debug("FeedTile: Updating news tile with new model");
			this.setModel(this._stagedModel);
			this._stagedModel = null;

			var numItems = this.getItems().length;
			if (this._currentItemIndex >= numItems) {
				this._currentItemIndex = 0;
			}
			return;
		}

		var items = this.getItems();
		this._currentItemIndex = (this._currentItemIndex + 1) % items.length;

		var $oToFeed = jQuery("#" + this.getId() + "-next-feedTileImage");
		var $oFromFeed = jQuery("#" + this.getId() + "-feedTileImage");

		var oFeedTile = this;
		if (jQuery.support.cssTransitions) {
			$oToFeed.addClass("sapSuiteFTItemRight").removeClass('sapSuiteFTItemHidden');
			$oFromFeed.addClass('sapSuiteFTItemCenter');
			setTimeout(function() {

				var bOneTransitionFinished = false;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {

					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						$oToFeed.removeClass("sapSuiteFTItemSliding");
						$oFromFeed.removeClass("sapSuiteFTItemSliding").addClass("sapSuiteFTItemHidden").removeClass("sapSuiteFTItemLeft").addClass("sapSuiteFTItemRight");

						$oFromFeed.detach();
						$oToFeed.after($oFromFeed);

						oFeedTile.flipIds($oToFeed, $oFromFeed);

						setTimeout(function() {

							oFeedTile.setNextItemValues(oFeedTile);
						}, 100);
						oFeedTile._timeoutId = setTimeout(function() {

							oFeedTile.cycle();
						}, oFeedTile.getDisplayDuration() * 1000);
					}
				};

				$oFromFeed.bind("webkitTransitionEnd transitionend", fAfterTransition);
				$oToFeed.bind("webkitTransitionEnd transitionend", fAfterTransition);

				$oFromFeed.addClass('sapSuiteFTItemSliding').removeClass('sapSuiteFTItemCenter').addClass('sapSuiteFTItemLeft');
				$oToFeed.addClass('sapSuiteFTItemSliding').removeClass('sapSuiteFTItemRight').addClass('sapSuiteFTItemCenter');
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are
					// very few
		} else {
			$oToFeed.css("left", "100%");
			$oToFeed.removeClass("sapSuiteFTItemHidden");

			$oToFeed.animate({
				left : "0%"
			}, 400);

			$oFromFeed.animate({
				left : "-100%"
			}, 400, function() {

				$oFromFeed.addClass("sapSuiteFTItemHidden");
				$oFromFeed.css("left", "0");
				oFeedTile.flipIds($oToFeed, $oFromFeed);

				setTimeout(function() {

					oFeedTile.setNextItemValues(oFeedTile);
				}, 100);
				oFeedTile._timeoutId = setTimeout(function() {

					oFeedTile.cycle();
				}, oFeedTile.getDisplayDuration() * 1000);
			});
		}

	};

	/**
	 * This function is called after the FeedTile is rendered
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.onAfterRendering = function() {

		var displayDuration = this.getDisplayDuration() * 1000;
		var that = this;

		if (this.getItems().length > 1) {
			if (typeof this._timeoutId === "number") {
				clearTimeout(this._timeoutId);
				delete this._timeoutId;
			}
			this._timeoutId = setTimeout(function() {

				that.cycle();
			}, displayDuration);
		}

	};

	/**
	 * Fire press event.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.onclick = function(oEvent) {

		//always fire the event
		var currentItem = this.getCurrentItem();
		var id = "";
		
		if (currentItem && currentItem.getId()) {
			id = currentItem.getId();
		}
		
		this.firePress({
			itemId : id
		});
		
	};

	/**
	 * Get the currently rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getCurrentItem = function() {

		var items = this.getItems();
		if (items.length) {
			return items[this._currentItemIndex];
		}
	};

	/**
	 * Get the next rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getNextItem = function() {

		var items = this.getItems();
		if (items.length && items.length > 1) {
			return items[(this._currentItemIndex + 1) % items.length];
		}
	};

	/**
	 * Get the next rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.setNextItemValues = function() {

		var oNextItem = this.getNextItem();
		var id = this.getId();

		var oBackgroundImage = oNextItem.getImage();
		if (!oBackgroundImage || !this.getDisplayArticleImage()) {
			oBackgroundImage = this.getDefaultImage();
		}

		jQuery("#" + id + "-next-feedTileImage").css("background-image", "url(" + jQuery.sap.encodeCSS(oBackgroundImage) + ")");
		jQuery("#" + id + "-next-feedTileTitle").html(jQuery.sap.encodeHTML(oNextItem.getTitle()));
		jQuery("#" + id + "-next-feedTileSource").html(jQuery.sap.encodeHTML(oNextItem.getSource()));
		jQuery("#" + id + "-next-feedTileAge").html(jQuery.sap.encodeHTML(sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge(oNextItem.getPublicationDate())));
	};

	/**
	 * Flip ids of feedTileImage, feedTileText, feedTileTitle, feedTileSource, feedTileAge.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.flipIds = function($oToFeed, $oFromFeed) {

		var id = this.getId();
		$oFromFeed.attr("id", id + "-next-feedTileImage");
		$oFromFeed.find("#" + id + "-feedTileText").attr("id", id + "-next-feedTileText");
		$oFromFeed.find("#" + id + "-feedTileTitle").attr("id", id + "-next-feedTileTitle");
		$oFromFeed.find("#" + id + "-feedTileSource").attr("id", id + "-next-feedTileSource");
		$oFromFeed.find("#" + id + "-feedTileAge").attr("id", id + "-next-feedTileAge");

		$oToFeed.attr("id", id + "-feedTileImage");
		$oToFeed.find("#" + id + "-next-feedTileText").attr("id", id + "-feedTileText");
		$oToFeed.find("#" + id + "-next-feedTileTitle").attr("id", id + "-feedTileTitle");
		$oToFeed.find("#" + id + "-next-feedTileSource").attr("id", id + "-feedTileSource");
		$oToFeed.find("#" + id + "-next-feedTileAge").attr("id", id + "-feedTileAge");
	};

	/**
	 * Set displayDuration property for the control
	 * 
	 * @param iDisplayDuration
	 *            {int}
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.setDisplayDuration = function(iDisplayDuration) {

		if (iDisplayDuration < 3) {

			iDisplayDuration = 3;
			jQuery.sap.log.error("FeedTile: displayDuration should be equal or more than 3 seconds.");
		}
		this.setProperty("displayDuration", iDisplayDuration);
	};


	/**
	 * Set a new model of feed items, such as when a feed aggregator has collected the latest feed items. This model is staged (not immediately set on the control) to avoid
	 * re-rendering before the currently displayed article is faded out. Therefore a smooth transition between the display of feed items is always maintained.
	 * 
	 * @param oModel
	 *            Model of new feed items.
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.stageModel = function(oModel) {

		this._stagedModel = oModel;
	};
	
	/**
	 * This function gets the image to display from the list of default images. If it is the first time, it gets a random image. Next times, it cycles through
	 * the list.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getDefaultImage = function() {

		var oDefaultImage = "";
		var oDefaultImages = this.getDefaultImages();
 
		if (oDefaultImages && oDefaultImages.length > 0) {
			var iLength = oDefaultImages.length;
			if (this._defaultImageIndex === -1) { //this is first time, select random image
		
				var iRandom = Math.floor(Math.random() * iLength); 
				this._defaultImageIndex = iRandom;
				oDefaultImage = oDefaultImages[iRandom];
			} else { //this is not the first time, get the next image from list
				var iIndex = (this._defaultImageIndex + 1) >= iLength ? 0 : this._defaultImageIndex + 1;
				this._defaultImageIndex = iIndex;
				oDefaultImage = oDefaultImages[iIndex];
			} 
		}
		
		return oDefaultImage; 
	};
	
	/**
	 * Validate the array of URI first and then set the defaultImages property
	 * 
	 * @param oDefaultImages
	 *            {object[]}
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.setDefaultImages = function(oDefaultImages) {

		if (oDefaultImages && oDefaultImages.length > 0) {
		
			var oValidDefaultImages = [];
			var oDefaultImage = null;
			for (var i = 0; i < oDefaultImages.length; i++) {
				oDefaultImage = oDefaultImages[i];
				var validUrl = jQuery.sap.validateUrl(oDefaultImage);
				 
				if (validUrl) {
					oValidDefaultImages.push(oDefaultImage);
				} else {
					jQuery.sap.log.error("Invalid Url:'" + oDefaultImage);
				}
			}
				
			if (oValidDefaultImages.length <= 0) {
				jQuery.sap.log.error("Default Images are not set because supplied Urls are invalid");
			} else {
				this.setProperty("defaultImages", oValidDefaultImages);
			}
		}
	};

}());

}; // end of sap/suite/ui/commons/FeedTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedTileRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.FeedTileRenderer");



/**
 * @class FeedTile renderer.
 * @static
 */
sap.suite.ui.commons.FeedTileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *            oFeedTile an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FeedTileRenderer.render = function(oRm, oFeedTile) {

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);

	var oCurrentItem = oFeedTile.getCurrentItem();		

	oRm.write("<div");
	oRm.writeControlData(oFeedTile);
	oRm.writeAttribute("tabindex", "0");
	oRm.addClass("sapSuiteUiCommonsFeedTile");
	oRm.addClass("sapSuiteUiCommonsPointer");
	oRm.writeClasses();

	var sFeedTileTitle = "";
	if (oFeedTile.getTooltip_AsString()) {
		oRm.writeAttributeEscaped("title", oFeedTile.getTooltip_AsString());
		sFeedTileTitle = oFeedTile.getTooltip_AsString();
	}
	
	var sNewsItemTitle = "";
	if(oCurrentItem){
		sNewsItemTitle = oCurrentItem.getTitle();
	}
	
	oRm.writeAccessibilityState(oFeedTile, {
		role : 'link',		
		label : sFeedTileTitle + " " + sNewsItemTitle	
	});

	oRm.write(">");

	if (oCurrentItem) {
		sap.suite.ui.commons.FeedTileRenderer.renderFeedItem(oRm, oFeedTile, oCurrentItem, oFeedTile.getId());
		var oNextItem = oFeedTile.getNextItem();
		if (oNextItem) {
			sap.suite.ui.commons.FeedTileRenderer.renderFeedItem(oRm, oFeedTile, oNextItem, oFeedTile.getId() + '-next', true);
		}
	} else { // This is a condition when no feed items exist. Add a title that displays the condition & also render the defaultImage

		var oBackgroundImage = oFeedTile.getDefaultImage();

		if (oBackgroundImage) {
			oRm.write('<div id="' + oFeedTile.getId() + '-feedTileImage"');
			oRm.write(" style='background-image:url(");
			oRm.writeEscaped(oBackgroundImage);
			oRm.write(");'");
			oRm.addClass("sapSuiteUiCommonsFeedTileBackground");
			oRm.writeClasses();
			oRm.write(">");
		}

		var sTitle = oResBundle.getText("FEEDTILE_NOARTICLE_TITLE"); // "No articles to display";

		oRm.write('<div id="' + oFeedTile.getId() + '-feedTileText"');
		oRm.addClass("sapSuiteUiCommonsFeedTileText");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write('<div id="' + oFeedTile.getId() + '-feedTileTitle"');
		oRm.addClass("sapSuiteUiCommonsFeedTileTitle");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sTitle);
		oRm.write("</div>");
		oRm.write("</div>"); // sapSuiteUiCommonsFeedTileText
		if (oBackgroundImage) {
			oRm.write("</div>"); // sapSuiteUiCommonsFeedTileBackground
		}
	}

	oRm.write("</div>"); // sapSuiteUiCommonsFeedTile
};

sap.suite.ui.commons.FeedTileRenderer.renderFeedItem = function(oRm, oFeedTile, oFeedItem, itemId, hidden) {

	var oBackgroundImage = oFeedItem.getImage();
	if (!oBackgroundImage || !oFeedTile.getDisplayArticleImage()) {
		oBackgroundImage = oFeedTile.getDefaultImage();
	}

	if (oBackgroundImage) {
		oRm.write('<div id="' + itemId + '-feedTileImage"');
		oRm.write(" style='background-image:url(");
		oRm.writeEscaped(oBackgroundImage);
		oRm.write(");'");
		oRm.addClass("sapSuiteUiCommonsFeedTileBackground");
		if (hidden) {
			oRm.addClass("sapSuiteFTItemHidden");
		}
		oRm.writeClasses();
		oRm.write(">");
	}

	oRm.write('<div id="' + itemId + '-feedTileText"');
	oRm.addClass("sapSuiteUiCommonsFeedTileText");
	oRm.writeClasses();
	oRm.write(">");

	var sTitle = oFeedItem.getTitle();
	if (sTitle) {
		oRm.write('<div id="' + itemId + '-feedTileTitle"');		
		oRm.addClass("sapSuiteUiCommonsFeedTileTitle");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sTitle);
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapSuiteUiCommonsFeedTileLowerText");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write('<div id="' + itemId + '-feedTileSource"');
		oRm.addClass("sapSuiteUiCommonsFeedTileSource");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oFeedItem.getSource());
		oRm.write("</div>");

		oRm.write('<div id="' + itemId + '-feedTileAge"');
		oRm.addClass("sapSuiteUiCommonsFeedTileAge");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge(oFeedItem.getPublicationDate()));
		oRm.write("</div>");
		oRm.write("</div>");
	}
	oRm.write("</div>"); // sapSuiteUiCommonsFeedTileText
	oRm.write("</div>"); // sapSuiteUiCommonsFeedTileBackground

};

}; // end of sap/suite/ui/commons/FeedTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.GenericTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.GenericTile.
jQuery.sap.declare("sap.suite.ui.commons.GenericTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new GenericTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * <li>{@link #getFailedText failedText} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getFrameType frameType} : sap.suite.ui.commons.FrameType (default: sap.suite.ui.commons.FrameType.OneByOne)</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getHeaderImage headerImage} : sap.ui.core.URI</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.LoadState (default: sap.suite.ui.commons.LoadState.Loaded)</li>
 * <li>{@link #getImageDescription imageDescription} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileContent tileContent} : sap.suite.ui.commons.TileContent[]</li>
 * <li>{@link #getIcon icon} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.GenericTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The tile control that displays the title, description, and customizable main area.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.GenericTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.GenericTile", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"header" : {type : "string", group : "Appearance", defaultValue : null},
		"subheader" : {type : "string", group : "Appearance", defaultValue : null},
		"failedText" : {type : "string", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"frameType" : {type : "sap.suite.ui.commons.FrameType", group : "Misc", defaultValue : sap.suite.ui.commons.FrameType.OneByOne},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"headerImage" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"state" : {type : "sap.suite.ui.commons.LoadState", group : "Misc", defaultValue : sap.suite.ui.commons.LoadState.Loaded},
		"imageDescription" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"tileContent" : {type : "sap.suite.ui.commons.TileContent", multiple : true, singularName : "tileContent"}, 
		"icon" : {type : "sap.ui.core.Control", multiple : false}, 
		"titleText" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}, 
		"failedMessageText" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.GenericTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.GenericTile.extend
 * @function
 */

sap.suite.ui.commons.GenericTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>header</code>.
 * The header of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setHeader
 * @function
 */


/**
 * Getter for property <code>subheader</code>.
 * The subheader of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subheader</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getSubheader
 * @function
 */

/**
 * Setter for property <code>subheader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubheader  new value for property <code>subheader</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setSubheader
 * @function
 */


/**
 * Getter for property <code>failedText</code>.
 * The message that appears when the control is in the Failed state.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>failedText</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getFailedText
 * @function
 */

/**
 * Setter for property <code>failedText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFailedText  new value for property <code>failedText</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setFailedText
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * The size of the tile. If not set, then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setSize
 * @function
 */


/**
 * Getter for property <code>frameType</code>.
 * The frame type: 1x1 or 2x1.
 *
 * Default value is <code>OneByOne</code>
 *
 * @return {sap.suite.ui.commons.FrameType} the value of property <code>frameType</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getFrameType
 * @function
 */

/**
 * Setter for property <code>frameType</code>.
 *
 * Default value is <code>OneByOne</code> 
 *
 * @param {sap.suite.ui.commons.FrameType} oFrameType  new value for property <code>frameType</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setFrameType
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * The URI of the background image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>headerImage</code>.
 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>headerImage</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getHeaderImage
 * @function
 */

/**
 * Setter for property <code>headerImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHeaderImage  new value for property <code>headerImage</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setHeaderImage
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {sap.suite.ui.commons.LoadState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {sap.suite.ui.commons.LoadState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setState
 * @function
 */


/**
 * Getter for property <code>imageDescription</code>.
 * Description of a header image that is used in the tooltip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageDescription</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile#getImageDescription
 * @function
 */

/**
 * Setter for property <code>imageDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageDescription  new value for property <code>imageDescription</code>
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setImageDescription
 * @function
 */


/**
 * Getter for aggregation <code>tileContent</code>.<br/>
 * The switchable view that depends on the tile type.
 * 
 * @return {sap.suite.ui.commons.TileContent[]}
 * @public
 * @name sap.suite.ui.commons.GenericTile#getTileContent
 * @function
 */


/**
 * Inserts a tileContent into the aggregation named <code>tileContent</code>.
 *
 * @param {sap.suite.ui.commons.TileContent}
 *          oTileContent the tileContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#insertTileContent
 * @function
 */

/**
 * Adds some tileContent <code>oTileContent</code> 
 * to the aggregation named <code>tileContent</code>.
 *
 * @param {sap.suite.ui.commons.TileContent}
 *            oTileContent the tileContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#addTileContent
 * @function
 */

/**
 * Removes an tileContent from the aggregation named <code>tileContent</code>.
 *
 * @param {int | string | sap.suite.ui.commons.TileContent} vTileContent the tileContent to remove or its index or id
 * @return {sap.suite.ui.commons.TileContent} the removed tileContent or null
 * @public
 * @name sap.suite.ui.commons.GenericTile#removeTileContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.TileContent[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.GenericTile#removeAllTileContent
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.TileContent</code> in the aggregation named <code>tileContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.TileContent}
 *            oTileContent the tileContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.GenericTile#indexOfTileContent
 * @function
 */
	

/**
 * Destroys all the tileContent in the aggregation 
 * named <code>tileContent</code>.
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#destroyTileContent
 * @function
 */


/**
 * Getter for aggregation <code>icon</code>.<br/>
 * An icon or image to be displayed in the control.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.GenericTile#getIcon
 * @function
 */


/**
 * Setter for the aggregated <code>icon</code>.
 * @param {sap.ui.core.Control} oIcon
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#setIcon
 * @function
 */
	

/**
 * Destroys the icon in the aggregation 
 * named <code>icon</code>.
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#destroyIcon
 * @function
 */


/**
 * The event is fired when the user chooses the tile.
 *
 * @name sap.suite.ui.commons.GenericTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.GenericTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.GenericTile</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the tile.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.GenericTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.GenericTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.GenericTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.GenericTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/GenericTile.js
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.suite.ui.commons.GenericTile.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	
	this._oTitle = new sap.m.Text(this.getId() + "-title", {maxLines: 2});
	this._oTitle.addStyleClass("sapSuiteGTTitle");
	this._oTitle.cacheLineHeight = false;
	this.setAggregation("titleText", this._oTitle);
	
	this._sFailedToLoad = this._rb.getText("INFOTILE_CANNOT_LOAD_TILE");
	this._sLoading = this._rb.getText("INFOTILE_LOADING");
	
	this._oFailed = new sap.m.Text(this.getId() + "-failed-txt", {maxLines: 2});
	this._oFailed.cacheLineHeight = false;
	this._oFailed.addStyleClass("sapSuiteGTFailed");
	this.setAggregation("failedMessageText", this._oFailed);
	
	this._oWarningIcon = new sap.ui.core.Icon(this.getId() + "-warn-icon",{
		src : "sap-icon://notification",
		size : "1.37rem"
	}); 
	
	this._oWarningIcon.addStyleClass("sapSuiteGTFtrFldIcnMrk");
	
	this._oBusy = new sap.ui.core.HTML(this.getId() + "-overlay");
	this._oBusy.addStyleClass("sapSuiteGenericTileLoading");
	this._oBusy.setBusyIndicatorDelay(0);
};

sap.suite.ui.commons.GenericTile.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.GenericTile.prototype.onkeydown = function(oEvent) {
  if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
      oEvent.preventDefault();
  }
};

sap.suite.ui.commons.GenericTile.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.GenericTile.prototype._handleOvrlClick = function(oEvent) {
	oEvent.stopPropagation();
};

sap.suite.ui.commons.GenericTile.prototype.onBeforeRendering = function() {
	var iTiles = this.getTileContent().length;
	
	for (var i = 0; i < iTiles; i++) {
		this.getTileContent()[i].setDisabled(this.getState() == "Disabled", true);
	}
	
	var sCustomFailedMsg = this.getFailedText();
	var sFailedMsg = sCustomFailedMsg ? sCustomFailedMsg : this._sFailedToLoad;
	this._oFailed.setText(sFailedMsg);
	this._oFailed.setTooltip(sFailedMsg);
};

sap.suite.ui.commons.GenericTile.prototype.onAfterRendering = function() {
	this._checkFooter(this.getState());
	
	if ("Disabled" == this.getState()) {
		this._oBusy.$().bind("tap", jQuery.proxy(this._handleOvrlClick, this));
	} else {
		this._oBusy.$().unbind("tap", this._handleOvrlClick);
	}
};

sap.suite.ui.commons.GenericTile.prototype.getHeader = function() {
	return this._oTitle.getText();
};

sap.suite.ui.commons.GenericTile.prototype.setHeader = function(sTitle) {
	this._oTitle.setProperty("text", sTitle, true);
	this.invalidate();
	
	return this;
};

sap.suite.ui.commons.GenericTile.prototype.exit = function() {
	this._oWarningIcon.destroy();
        if (this._oImage) {
            this._oImage.destroy();
        }
        
    this._oBusy.destroy();
};

sap.suite.ui.commons.GenericTile.prototype.setHeaderImage = function(sImage) {
    var bValueChanged = !jQuery.sap.equal(this.getHeaderImage(), sImage);

    if (bValueChanged) {
        if (this._oImage) {
            this._oImage.destroy();
            this._oImage = undefined;
        }

        if (sImage) {
            this._oImage = sap.ui.core.IconPool.createControlByURI( {
                id: this.getId() + "-icon-image",
                src: sImage
            }, sap.m.Image);

            this._oImage.addStyleClass("sapSuiteGTHdrIconImage");
        }
    }

    return this.setProperty("headerImage", sImage);
};

sap.suite.ui.commons.GenericTile.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press") && this.getState() != "Disabled") {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.GenericTile.prototype.setState = function(oState, isSuppressed) {
	this._checkFooter(oState);
	this.setProperty("state", oState, isSuppressed);
	return this;
};

sap.suite.ui.commons.GenericTile.prototype._checkFooter = function(oState) {
	var oTcFtr = jQuery.sap.byId(this.getId()).find(".sapSuiteTileCntFtrTxt");
	
	if(oState === "Failed" && oTcFtr.is(":visible")) {
		oTcFtr.hide();
	} else if(oTcFtr.is(":hidden")){
		oTcFtr.show();
	}
};
	
sap.suite.ui.commons.GenericTile.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};


sap.suite.ui.commons.GenericTile.prototype.onsaptouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile.prototype.onsaptouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteGTHvrOutln");
};

//ontouchstart/ontouchend are generated on iOS devices. onsaptouchstart/end is not fired on them.
sap.suite.ui.commons.GenericTile.prototype.ontouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile.prototype.ontouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile.prototype.getHeaderAltText = function() {
	var sAltText = ""; 
	var bIsFirst = true;
	if (this.getHeader()) {
		sAltText += this.getHeader();
		bIsFirst = false;
	}

	if (this.getSubheader()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getSubheader();
		bIsFirst = false;
	}
	
	if(this.getImageDescription()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getImageDescription();
	}
	return sAltText;
};

sap.suite.ui.commons.GenericTile.prototype.getBodyAltText = function() {
	var sAltText = ""; 
	var bIsFirst = true;
	var aTiles = this.getTileContent();
	
	for (var i = 0; i < aTiles.length; i++) {
		if (aTiles[i].getAltText) {
			sAltText += (bIsFirst ? "" : "\n" ) + aTiles[i].getAltText();
			bIsFirst = false;
		} else if (aTiles[i].getTooltip_AsString()){
			sAltText += (bIsFirst ? "" : "\n" ) + aTiles[i].getTooltip_AsString();
			bIsFirst = false;
		}
	}
	
	return sAltText;
};

sap.suite.ui.commons.GenericTile.prototype.getAltText = function() {
	switch (this.getState()) {
		case sap.suite.ui.commons.LoadState.Disabled:
			return "";
		case sap.suite.ui.commons.LoadState.Loading:
			return this._sLoading;
		case sap.suite.ui.commons.LoadState.Failed:
			return this._oFailed.getText();
		default:
			return this.getHeaderAltText() + "\n" + this.getBodyAltText();
	}
};


}; // end of sap/suite/ui/commons/GenericTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.GenericTile2X2') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.GenericTile2X2.
jQuery.sap.declare("sap.suite.ui.commons.GenericTile2X2");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new GenericTile2X2.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * <li>{@link #getFailedText failedText} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getHeaderImage headerImage} : sap.ui.core.URI</li>
 * <li>{@link #getFrameType frameType} : sap.suite.ui.commons.FrameType (default: sap.suite.ui.commons.FrameType.OneByOne)</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.LoadState (default: sap.suite.ui.commons.LoadState.Loaded)</li>
 * <li>{@link #getImageDescription imageDescription} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileContent tileContent} : sap.suite.ui.commons.TileContent2X2[]</li>
 * <li>{@link #getIcon icon} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.GenericTile2X2#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The tile control that displays the title, description, and customizable main area.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.24. 
 * API is not yet finished and might change completely
 * @name sap.suite.ui.commons.GenericTile2X2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.GenericTile2X2", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"header" : {type : "string", group : "Appearance", defaultValue : null},
		"subheader" : {type : "string", group : "Appearance", defaultValue : null},
		"failedText" : {type : "string", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"headerImage" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"frameType" : {type : "sap.suite.ui.commons.FrameType", group : "Misc", defaultValue : sap.suite.ui.commons.FrameType.OneByOne},
		"state" : {type : "sap.suite.ui.commons.LoadState", group : "Misc", defaultValue : sap.suite.ui.commons.LoadState.Loaded},
		"imageDescription" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"tileContent" : {type : "sap.suite.ui.commons.TileContent2X2", multiple : true, singularName : "tileContent"}, 
		"icon" : {type : "sap.ui.core.Control", multiple : false}, 
		"titleText" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}, 
		"failedMessageText" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.GenericTile2X2 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.GenericTile2X2.extend
 * @function
 */

sap.suite.ui.commons.GenericTile2X2.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>header</code>.
 * The header of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setHeader
 * @function
 */


/**
 * Getter for property <code>subheader</code>.
 * The subheader of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subheader</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getSubheader
 * @function
 */

/**
 * Setter for property <code>subheader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubheader  new value for property <code>subheader</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setSubheader
 * @function
 */


/**
 * Getter for property <code>failedText</code>.
 * The message that appears when the control is in the Failed state.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>failedText</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getFailedText
 * @function
 */

/**
 * Setter for property <code>failedText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFailedText  new value for property <code>failedText</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setFailedText
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * The size of the tile. If not set, then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setSize
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * The URI of the background image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>headerImage</code>.
 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>headerImage</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getHeaderImage
 * @function
 */

/**
 * Setter for property <code>headerImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHeaderImage  new value for property <code>headerImage</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setHeaderImage
 * @function
 */


/**
 * Getter for property <code>frameType</code>.
 * The frame type: 1x1 or 2x1.
 *
 * Default value is <code>OneByOne</code>
 *
 * @return {sap.suite.ui.commons.FrameType} the value of property <code>frameType</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getFrameType
 * @function
 */

/**
 * Setter for property <code>frameType</code>.
 *
 * Default value is <code>OneByOne</code> 
 *
 * @param {sap.suite.ui.commons.FrameType} oFrameType  new value for property <code>frameType</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setFrameType
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {sap.suite.ui.commons.LoadState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {sap.suite.ui.commons.LoadState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setState
 * @function
 */


/**
 * Getter for property <code>imageDescription</code>.
 * Description of a header image that is used in the tooltip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageDescription</code>
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getImageDescription
 * @function
 */

/**
 * Setter for property <code>imageDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageDescription  new value for property <code>imageDescription</code>
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setImageDescription
 * @function
 */


/**
 * Getter for aggregation <code>tileContent</code>.<br/>
 * The switchable view that depends on the tile type.
 * 
 * @return {sap.suite.ui.commons.TileContent2X2[]}
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getTileContent
 * @function
 */


/**
 * Inserts a tileContent into the aggregation named <code>tileContent</code>.
 *
 * @param {sap.suite.ui.commons.TileContent2X2}
 *          oTileContent the tileContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#insertTileContent
 * @function
 */

/**
 * Adds some tileContent <code>oTileContent</code> 
 * to the aggregation named <code>tileContent</code>.
 *
 * @param {sap.suite.ui.commons.TileContent2X2}
 *            oTileContent the tileContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#addTileContent
 * @function
 */

/**
 * Removes an tileContent from the aggregation named <code>tileContent</code>.
 *
 * @param {int | string | sap.suite.ui.commons.TileContent2X2} vTileContent the tileContent to remove or its index or id
 * @return {sap.suite.ui.commons.TileContent2X2} the removed tileContent or null
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#removeTileContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.TileContent2X2[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#removeAllTileContent
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.TileContent2X2</code> in the aggregation named <code>tileContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.TileContent2X2}
 *            oTileContent the tileContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#indexOfTileContent
 * @function
 */
	

/**
 * Destroys all the tileContent in the aggregation 
 * named <code>tileContent</code>.
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#destroyTileContent
 * @function
 */


/**
 * Getter for aggregation <code>icon</code>.<br/>
 * An icon or image to be displayed in the control.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#getIcon
 * @function
 */


/**
 * Setter for the aggregated <code>icon</code>.
 * @param {sap.ui.core.Control} oIcon
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#setIcon
 * @function
 */
	

/**
 * Destroys the icon in the aggregation 
 * named <code>icon</code>.
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#destroyIcon
 * @function
 */


/**
 * The event is fired when the user chooses the tile.
 *
 * @name sap.suite.ui.commons.GenericTile2X2#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.GenericTile2X2</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.GenericTile2X2</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the tile.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.GenericTile2X2</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.GenericTile2X2</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.GenericTile2X2#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.GenericTile2X2} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.GenericTile2X2#firePress
 * @function
 */


// Start of sap/suite/ui/commons/GenericTile2X2.js
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.suite.ui.commons.GenericTile2X2.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	
	this._oTitle = new sap.m.Text(this.getId() + "-title", {maxLines: 2});
	this._oTitle.addStyleClass("sapSuiteGTTitle");
	this._oTitle.cacheLineHeight = false;
	this.setAggregation("titleText", this._oTitle);
	
	this._sFailedToLoad = this._rb.getText("INFOTILE_CANNOT_LOAD_TILE");
	
	this._oFailed = new sap.m.Text(this.getId() + "-failed-txt", {maxLines: 2});
	this._oFailed.cacheLineHeight = false;
	this._oFailed.addStyleClass("sapSuiteGTFailed");
	this.setAggregation("failedMessageText", this._oFailed);
	
	this._oWarningIcon = new sap.ui.core.Icon(this.getId() + "-warn-icon",{
		src : "sap-icon://notification",
		size : "1.37rem"
	}); 
	
	this._oWarningIcon.addStyleClass("sapSuiteGTFtrFldIcnMrk");
	
	this._oBusy = new sap.ui.core.HTML(this.getId() + "-overlay");
	this._oBusy.addStyleClass("sapSuiteGenericTile2X2Loading");
	this._oBusy.setBusyIndicatorDelay(0);
};

sap.suite.ui.commons.GenericTile2X2.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.GenericTile2X2.prototype.onkeydown = function(oEvent) {
  if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
      oEvent.preventDefault();
  }
};

sap.suite.ui.commons.GenericTile2X2.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.GenericTile2X2.prototype._handleOvrlClick = function(oEvent) {
	oEvent.stopPropagation();
};

sap.suite.ui.commons.GenericTile2X2.prototype.onBeforeRendering = function() {
	var iTiles = this.getTileContent().length;
	
	for (var i = 0; i < iTiles; i++) {
		this.getTileContent()[i].setDisabled(this.getState() == "Disabled", true);
	}
	
	var sCustomFailedMsg = this.getFailedText();
	var sFailedMsg = sCustomFailedMsg ? sCustomFailedMsg : this._sFailedToLoad;
	this._oFailed.setText(sFailedMsg);
	this._oFailed.setTooltip(sFailedMsg);
};

sap.suite.ui.commons.GenericTile2X2.prototype.onAfterRendering = function() {
	this._checkFooter(this.getState());
	
	if ("Disabled" == this.getState()) {
		this._oBusy.$().bind("tap", jQuery.proxy(this._handleOvrlClick, this));
	} else {
		this._oBusy.$().unbind("tap", this._handleOvrlClick);
	}
};

sap.suite.ui.commons.GenericTile2X2.prototype.getHeader = function() {
	return this._oTitle.getText();
};

sap.suite.ui.commons.GenericTile2X2.prototype.setHeader = function(sTitle) {
	this._oTitle.setProperty("text", sTitle, true);
	this.invalidate();
	
	return this;
};

sap.suite.ui.commons.GenericTile2X2.prototype.exit = function() {
	this._oWarningIcon.destroy();
        if (this._oImage) {
            this._oImage.destroy();
        }
        
    this._oBusy.destroy();
};

sap.suite.ui.commons.GenericTile2X2.prototype.setHeaderImage = function(sImage) {
    var bValueChanged = !jQuery.sap.equal(this.getHeaderImage(), sImage);

    if (bValueChanged) {
        if (this._oImage) {
            this._oImage.destroy();
            this._oImage = undefined;
        }

        if (sImage) {
            this._oImage = sap.ui.core.IconPool.createControlByURI( {
                id: this.getId() + "-icon-image",
                src: sImage
            }, sap.m.Image);

            this._oImage.addStyleClass("sapSuiteGTHdrIconImage");
        }
    }

    return this.setProperty("headerImage", sImage);
};

sap.suite.ui.commons.GenericTile2X2.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press") && this.getState() != "Disabled") {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.GenericTile2X2.prototype.setState = function(oState, isSuppressed) {
	this._checkFooter(oState);
	this.setProperty("state", oState, isSuppressed);
	return this;
};

sap.suite.ui.commons.GenericTile2X2.prototype._checkFooter = function(oState) {
	var oTcFtr = jQuery.sap.byId(this.getId()).find(".sapSuiteTileCntFtrTxt");
	
	if(oState === "Failed" && oTcFtr.is(":visible")) {
		oTcFtr.hide();
	} else if(oTcFtr.is(":hidden")){
		oTcFtr.show();
	}
};
	
sap.suite.ui.commons.GenericTile2X2.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};


sap.suite.ui.commons.GenericTile2X2.prototype.onsaptouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile2X2.prototype.onsaptouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteGTHvrOutln");
};

//ontouchstart/ontouchend are generated on iOS devices. onsaptouchstart/end is not fired on them.
sap.suite.ui.commons.GenericTile2X2.prototype.ontouchstart = function (oEvent) {
    this.addStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile2X2.prototype.ontouchend = function (oEvent) {
    this.removeStyleClass("sapSuiteGTHvrOutln");
};

sap.suite.ui.commons.GenericTile2X2.prototype.getHeaderAltText = function() {
	var sAltText = ""; 
	var bIsFirst = true;
	if (this.getHeader()) {
		sAltText += this.getHeader();
		bIsFirst = false;
	}

	if (this.getSubheader()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getSubheader();
		bIsFirst = false;
	}
	
	if(this.getImageDescription()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getImageDescription();
	}
	return sAltText;
};

sap.suite.ui.commons.GenericTile2X2.prototype.getBodyAltText = function() {
	var sAltText = ""; 
	var bIsFirst = true;
	var aTiles = this.getTileContent();
	
	for (var i = 0; i < aTiles.length; i++) {
		if (aTiles[i].getAltText) {
			sAltText += (bIsFirst ? "" : "\n" ) + aTiles[i].getAltText();
			bIsFirst = false;
		} else if (aTiles[i].getTooltip_AsString()){
			sAltText += (bIsFirst ? "" : "\n" ) + aTiles[i].getTooltip_AsString();
			bIsFirst = false;
		}
	}
	
	return sAltText;
};

sap.suite.ui.commons.GenericTile2X2.prototype.getAltText = function() {
	return this.getHeaderAltText() + "\n" + this.getBodyAltText();
};
}; // end of sap/suite/ui/commons/GenericTile2X2.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.HeaderCell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.HeaderCell.
jQuery.sap.declare("sap.suite.ui.commons.HeaderCell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HeaderCell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeigth heigth} : sap.ui.core.CSSSize (default: '100px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '106px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getWest west} : sap.suite.ui.commons.HeaderCellItem</li>
 * <li>{@link #getNorth north} : sap.suite.ui.commons.HeaderCellItem</li>
 * <li>{@link #getEast east} : sap.suite.ui.commons.HeaderCellItem</li>
 * <li>{@link #getSouth south} : sap.suite.ui.commons.HeaderCellItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains 4 cells (West, North, East, South). It can display one or more controls in different layouts. Each aggregation must contain only one instance of HeaderCellItem.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.HeaderCell
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.HeaderCell", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"heigth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100px', deprecated: true},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '106px'}
	},
	aggregations : {
		"west" : {type : "sap.suite.ui.commons.HeaderCellItem", multiple : false}, 
		"north" : {type : "sap.suite.ui.commons.HeaderCellItem", multiple : false}, 
		"east" : {type : "sap.suite.ui.commons.HeaderCellItem", multiple : false}, 
		"south" : {type : "sap.suite.ui.commons.HeaderCellItem", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.HeaderCell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.HeaderCell.extend
 * @function
 */


/**
 * Getter for property <code>heigth</code>.
 * Height of the HeaderCell control.
 *
 * Default value is <code>100px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>heigth</code>
 * @public
 * @deprecated Since version 1.20.2. 
 * Wrong property name
 * @name sap.suite.ui.commons.HeaderCell#getHeigth
 * @function
 */

/**
 * Setter for property <code>heigth</code>.
 *
 * Default value is <code>100px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeigth  new value for property <code>heigth</code>
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.2. 
 * Wrong property name
 * @name sap.suite.ui.commons.HeaderCell#setHeigth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the HeaderCell control.
 *
 * Default value is <code>106px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.HeaderCell#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>106px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>west</code>.<br/>
 * Objecth that contains control to render in west area of the HeaderCell.
 * 
 * @return {sap.suite.ui.commons.HeaderCellItem}
 * @public
 * @name sap.suite.ui.commons.HeaderCell#getWest
 * @function
 */


/**
 * Setter for the aggregated <code>west</code>.
 * @param {sap.suite.ui.commons.HeaderCellItem} oWest
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#setWest
 * @function
 */
	

/**
 * Destroys the west in the aggregation 
 * named <code>west</code>.
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#destroyWest
 * @function
 */


/**
 * Getter for aggregation <code>north</code>.<br/>
 * Objecth that contains control to render in north area of the HeaderCell.
 * 
 * @return {sap.suite.ui.commons.HeaderCellItem}
 * @public
 * @name sap.suite.ui.commons.HeaderCell#getNorth
 * @function
 */


/**
 * Setter for the aggregated <code>north</code>.
 * @param {sap.suite.ui.commons.HeaderCellItem} oNorth
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#setNorth
 * @function
 */
	

/**
 * Destroys the north in the aggregation 
 * named <code>north</code>.
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#destroyNorth
 * @function
 */


/**
 * Getter for aggregation <code>east</code>.<br/>
 * Objecth that contains control to render in east area of the HeaderCell.
 * 
 * @return {sap.suite.ui.commons.HeaderCellItem}
 * @public
 * @name sap.suite.ui.commons.HeaderCell#getEast
 * @function
 */


/**
 * Setter for the aggregated <code>east</code>.
 * @param {sap.suite.ui.commons.HeaderCellItem} oEast
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#setEast
 * @function
 */
	

/**
 * Destroys the east in the aggregation 
 * named <code>east</code>.
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#destroyEast
 * @function
 */


/**
 * Getter for aggregation <code>south</code>.<br/>
 * Objecth that contains control to render in south area of the HeaderCell.
 * 
 * @return {sap.suite.ui.commons.HeaderCellItem}
 * @public
 * @name sap.suite.ui.commons.HeaderCell#getSouth
 * @function
 */


/**
 * Setter for the aggregated <code>south</code>.
 * @param {sap.suite.ui.commons.HeaderCellItem} oSouth
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#setSouth
 * @function
 */
	

/**
 * Destroys the south in the aggregation 
 * named <code>south</code>.
 * @return {sap.suite.ui.commons.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCell#destroySouth
 * @function
 */


// Start of sap/suite/ui/commons/HeaderCell.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.HeaderCell.prototype.init = function(){
//
//
//};

}; // end of sap/suite/ui/commons/HeaderCell.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.HeaderCellItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.HeaderCellItem.
jQuery.sap.declare("sap.suite.ui.commons.HeaderCellItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new HeaderCellItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Object that contains instance of control and infomation about height. It should be used inside sap.suite.ui.commons.HeaderCell
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.HeaderCellItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.HeaderCellItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.HeaderCellItem.extend
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of area to occupy by control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.HeaderCellItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Instance of UI5 Control that is used as content.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.HeaderCellItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.HeaderCellItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderCellItem#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/HeaderCellItem.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.HeaderCellItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/HeaderCellItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.HeaderContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.HeaderContainer.
jQuery.sap.declare("sap.suite.ui.commons.HeaderContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HeaderContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScrollStep scrollStep} : int (default: 300)</li>
 * <li>{@link #getScrollTime scrollTime} : int (default: 500)</li>
 * <li>{@link #getShowDividers showDividers} : boolean (default: true)</li>
 * <li>{@link #getView view} : sap.suite.ui.commons.HeaderContainerView (default: sap.suite.ui.commons.HeaderContainerView.Horizontal)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Container that provides horizontal layout. Provides horizontal scroll on tablet and phone. On desktop provides scroll left and scroll right buttons. This control supports keyboard navigation. You can use left and right arrow keys to navigate through the inner contents. The Home key puts focus on the first control and the End key puts focus on the last control. Use Enter or Space to choose the control.
 * @extends sap.ui.core.Control
 * @implements sap.m.ObjectHeaderContainer
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.HeaderContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.HeaderContainer", { metadata : {

	interfaces : [
		"sap.m.ObjectHeaderContainer"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"scrollStep" : {type : "int", group : "Misc", defaultValue : 300},
		"scrollTime" : {type : "int", group : "Misc", defaultValue : 500},
		"showDividers" : {type : "boolean", group : "Misc", defaultValue : true},
		"view" : {type : "sap.suite.ui.commons.HeaderContainerView", group : "Misc", defaultValue : sap.suite.ui.commons.HeaderContainerView.Horizontal},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"scrollContainer" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}, 
		"buttonPrev" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"buttonNext" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.HeaderContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.HeaderContainer.extend
 * @function
 */


/**
 * Getter for property <code>scrollStep</code>.
 * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
 *
 * Default value is <code>300</code>
 *
 * @return {int} the value of property <code>scrollStep</code>
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getScrollStep
 * @function
 */

/**
 * Setter for property <code>scrollStep</code>.
 *
 * Default value is <code>300</code> 
 *
 * @param {int} iScrollStep  new value for property <code>scrollStep</code>
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#setScrollStep
 * @function
 */


/**
 * Getter for property <code>scrollTime</code>.
 * Scroll animation time miliseconds.
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>scrollTime</code>
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getScrollTime
 * @function
 */

/**
 * Setter for property <code>scrollTime</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iScrollTime  new value for property <code>scrollTime</code>
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#setScrollTime
 * @function
 */


/**
 * Getter for property <code>showDividers</code>.
 * If set to true, shows dividers between scrollable items.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showDividers</code>
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getShowDividers
 * @function
 */

/**
 * Setter for property <code>showDividers</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowDividers  new value for property <code>showDividers</code>
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#setShowDividers
 * @function
 */


/**
 * Getter for property <code>view</code>.
 * Experimental. The view of the HeaderContainer.
 *
 * Default value is <code>Horizontal</code>
 *
 * @return {sap.suite.ui.commons.HeaderContainerView} the value of property <code>view</code>
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getView
 * @function
 */

/**
 * Setter for property <code>view</code>.
 *
 * Default value is <code>Horizontal</code> 
 *
 * @param {sap.suite.ui.commons.HeaderContainerView} oView  new value for property <code>view</code>
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#setView
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Experimental. The height of the HeaderContainer in the Vertical view.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items to add to HeaderContainer.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.suite.ui.commons.HeaderContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.HeaderContainer#destroyItems
 * @function
 */


// Start of sap/suite/ui/commons/HeaderContainer.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.suite.ui.commons.HeaderContainer.prototype.init = function(){
   this._bRtl = sap.ui.getCore().getConfiguration().getRTL();
   this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
   this._oScrollCntr = new sap.m.ScrollContainer(this.getId() + "-scrl-cntnr", {
	   width : "100%",
	   horizontal: !jQuery.device.is.desktop,
	   height: "100%"
   });

   this.setAggregation("scrollContainer", this._oScrollCntr);
   var that = this;

   var iWidth = 0;
   sap.ui.Device.resize.attachHandler(function(oObj){
  	 if(iWidth != oObj.width) {
  		 //that._oScrollCntr.getScrollDelegate().refresh();
  		 iWidth = oObj.width;
  	 }
   });
   
   if(jQuery.device.is.desktop) {
		this._oArrowPrev = new sap.m.Button( {
			id : this.getId() + "-scrl-prev-button",
//			icon: "sap-icon://navigation-left-arrow", 
			type:sap.m.ButtonType.Transparent,
			tooltip: this._rb.getText("HEADERCONTAINER_BUTTON_PREV_SECTION"),
			press : function(oE) {
				that._scroll(-that.getScrollStep(), that.getScrollTime());
			}
		});
		this._oArrowPrev.addStyleClass("sapSuiteHdrCntrBtn").addStyleClass("sapSuiteHdrCntrLeft");
		this.setAggregation("buttonPrev", this._oArrowPrev);
		
		this._oArrowNext = new sap.m.Button({
			id : this.getId() + "-scrl-next-button",
//			icon:"sap-icon://navigation-right-arrow", 
			type:sap.m.ButtonType.Transparent,
			tooltip: this._rb.getText("HEADERCONTAINER_BUTTON_NEXT_SECTION"),
			press : function(oE) {
				that._scroll(that.getScrollStep(), that.getScrollTime());
			}
		});
		
		this._oArrowNext.addStyleClass("sapSuiteHdrCntrBtn").addStyleClass("sapSuiteHdrCntrRight");
		this.setAggregation("buttonNext", this._oArrowNext);
		
	    this._oScrollCntr.addDelegate({
		    onAfterRendering:function(oObj) {
		 	   if(jQuery.device.is.desktop) {
		 				var oFocusRef = jQuery.sap.domById(that.getId() + "-scrl-cntnr-scroll");
						var oFocusObj = jQuery.sap.byId(that.getId() + "-scrl-cntnr-scroll");
						var aDomRefs = oFocusObj.find("[tabindex=0]");
	
						if (!that._oItemNavigation) {
							that._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
							that.addDelegate(that._oItemNavigation);
							that._oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.BorderReached, that._handleBorderReached, that);
							that._oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, that._handleBorderReached, that);
						}
			
						that._oItemNavigation.setRootDomRef(oFocusRef);
						that._oItemNavigation.setItemDomRefs(aDomRefs);
						that._oItemNavigation.setCycling(false);	
			   }
		    },
		    
		    onBeforeRendering: function(oObj) {
		    	if (jQuery.device.is.desktop) { 
					jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
					that._oScrollCntr._oScroller = new sap.ui.core.delegate.ScrollEnablement(that._oScrollCntr, that._oScrollCntr.getId() + "-scroll", {
						horizontal: true,
						vertical: true,
						zynga: true,
						preventDefault: false,
						nonTouchScrolling: "scrollbar"
					});
		    	}
		    }
	    }); 
   }
   
};

sap.suite.ui.commons.HeaderContainer.prototype._scroll = function(iDelta, iDuration) {
	this.bScrollInProcess = true;
	var that = this;
	setTimeout(function(){
		that.bScrollInProcess = false;
	}, iDuration + 300);
	
	if (this.getView() == "Horizontal") {
		this._hScroll(iDelta, iDuration);
	} else {
		this._vScroll(iDelta, iDuration);
	}

};

sap.suite.ui.commons.HeaderContainer.prototype._vScroll = function(iDelta, iDuration) {
	var oDomRef = jQuery.sap.domById(this.getId() + "-scrl-cntnr");
	var iScrollTop = oDomRef.scrollTop;
	var iScrollTarget = iScrollTop + iDelta;
	this._oScrollCntr.scrollTo(0, iScrollTarget, iDuration);
};

sap.suite.ui.commons.HeaderContainer.prototype._hScroll = function(iDelta, iDuration) {
	var oDomRef = jQuery.sap.domById(this.getId() + "-scrl-cntnr");
	if (!this._bRtl) {
		var iScrollLeft = oDomRef.scrollLeft;
		var iScrollTarget = iScrollLeft + iDelta;
		this._oScrollCntr.scrollTo(iScrollTarget, 0, iDuration);
	}
	else {
		var iScrollTarget = jQuery(oDomRef).scrollRightRTL() + iDelta;
		this._oScrollCntr.scrollTo((iScrollTarget > 0) ? iScrollTarget : 0, 0, iDuration);
	}	
};

sap.suite.ui.commons.HeaderContainer.prototype._checkOverflow = function() {
	if (this.getView() == "Horizontal") {
		this._checkHOverflow();
	} else {
		this._checkVOverflow();
	}
};

sap.suite.ui.commons.HeaderContainer.prototype._checkVOverflow = function() {
	var oBarHead = jQuery.sap.domById(this.getId() + "-scrl-cntnr");
	
	var bScrolling = false;

	if (oBarHead) {
		if (oBarHead.scrollHeight > oBarHead.clientHeight) {
			// scrolling possible
			bScrolling = true;
		}
	}

	this._lastVScrolling = bScrolling;

	if (oBarHead) {
		var iScrollTop = oBarHead.scrollTop;

		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;

		var realHeight = oBarHead.scrollHeight;
		var availableHeight = oBarHead.clientHeight;

		if (Math.abs(realHeight - availableHeight) == 1) { // Avoid rounding issues see CSN 1316630 2013
			realHeight = availableHeight;
		}

		if (iScrollTop > 0) {
			bScrollBack = true;
		}
		if ((realHeight > availableHeight) && (iScrollTop + availableHeight + 32 < realHeight)) {
			bScrollForward = true;
		}
		
		var oScrl = jQuery.sap.byId(this.getId() + "-scroll-area");
	    if(!bScrollBack) {
	    	jQuery.sap.byId(this._oArrowPrev.getId()).hide();
	    	oScrl.css("padding-top", "0px");
	    } else {
	    	jQuery.sap.byId(this._oArrowPrev.getId()).show();
	    	oScrl.css("padding-top", "32px");
	    }
	    
	    if(!bScrollForward) {
	    	jQuery.sap.byId(this._oArrowNext.getId()).hide();
	    	oScrl.css("padding-bottom", "0px");
	    } else {
	    	jQuery.sap.byId(this._oArrowNext.getId()).show();
	    	oScrl.css("padding-bottom", "32px");
	    }
	}
};

sap.suite.ui.commons.HeaderContainer.prototype._checkHOverflow = function() {
	var oBarHead = jQuery.sap.domById(this.getId() + "-scrl-cntnr");
	var oBarHeadContainer = jQuery.sap.byId(this.getId() + "-scroll-area");
	var bScrolling = false;

	if (oBarHead) {
		if (oBarHead.scrollWidth > oBarHead.clientWidth) {
			// scrolling possible
			bScrolling = true;
		}
	}

	this._lastScrolling = bScrolling;

	if (oBarHead) {
		var iScrollLeft = oBarHead.scrollLeft;

		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;

		var realWidth = oBarHead.scrollWidth;
		var availableWidth = oBarHead.clientWidth;

		if (Math.abs(realWidth - availableWidth) == 1) { // Avoid rounding issues see CSN 1316630 2013
			realWidth = availableWidth;
		}
		if (this._bRtl) {
			var iScrollLeftRTL = jQuery(oBarHead).scrollLeftRTL();
			if (iScrollLeftRTL > (sap.ui.Device.browser.internet_explorer ? 1 : 0)) {
				bScrollForward = true;
			}
		} else {
			if (iScrollLeft > 0) {
				bScrollBack = true;
			}
		}
			
		var fnRightMarginCalc = function() {
			var iPadding = parseFloat(oBarHeadContainer.css("padding-right"));
			return sap.ui.Device.browser.internet_explorer ? iPadding+1 : iPadding;
		};
			
		if (realWidth > availableWidth) {
			if (this._bRtl) { 
				if (jQuery(oBarHead).scrollRightRTL() > 0) {
					bScrollBack = true;
				} 
			} else {
				if (Math.abs(iScrollLeft + availableWidth - realWidth) > fnRightMarginCalc()) {
					bScrollForward = true;
				}
			}
		}

		var oScrl = jQuery.sap.byId(this.getId() + "-scroll-area");
		var oOldScrollBack = this._oArrowPrev.$().is(":visible");
		var oScrlDelegate =  this._oScrollCntr.getScrollDelegate();
		var bRefresh = false;
	    if(oOldScrollBack && !bScrollBack) {
	    	jQuery.sap.byId(this._oArrowPrev.getId()).hide();
	    	oScrl.css(this._bRtl ? "padding-right" : "padding-left", "0rem");
			//oScrlDelegate.refresh();
	    	bRefresh = true;
	    } 
	    if (!oOldScrollBack && bScrollBack){
	    	jQuery.sap.byId(this._oArrowPrev.getId()).show();
	    	oScrl.css(this._bRtl ? "padding-right" : "padding-left", "2rem");
			//oScrlDelegate.refresh();
	    	bRefresh = true;
	    }

		var oOldScrollForward = this._oArrowNext.$().is(":visible");
	    if(oOldScrollForward && !bScrollForward) {
	    	jQuery.sap.byId(this._oArrowNext.getId()).hide();
	    	oScrl.css(this._bRtl ? "padding-left" : "padding-right", "0rem");
			//oScrlDelegate.refresh();
	    	bRefresh = true;
	    } 
	    if (!oOldScrollForward && bScrollForward) {
	    	jQuery.sap.byId(this._oArrowNext.getId()).show();
	    	oScrl.css(this._bRtl ? "padding-left" : "padding-right", "2rem");
			//oScrlDelegate.refresh();
	    	bRefresh = true;
	    }

	    if(bRefresh) {
	    	this._refreshScroll();
	    }
	}
};

sap.suite.ui.commons.HeaderContainer.prototype._handleBorderReached = function(oObj){
	var iIndex = oObj.getParameter("index");
	if(iIndex == 0) {
		this._scroll(-this.getScrollStep(), this.getScrollTime());
	} else if(iIndex == this.getItems().length - 1){
		this._scroll(this.getScrollStep(), this.getScrollTime());
	}
};

sap.suite.ui.commons.HeaderContainer.prototype.addItem = function(oItem, bSuppressInvalidate) {
	var oResult =  this._oScrollCntr.addContent(oItem.addStyleClass("sapSuiteHrdrCntrInner"), bSuppressInvalidate);
	return oResult;
};

sap.suite.ui.commons.HeaderContainer.prototype.insertItem = function(oItem, iIndex, bSuppressInvalidate) {
	var oResult = this._oScrollCntr.insertContent(oItem.addStyleClass("sapSuiteHrdrCntrInner"), iIndex, bSuppressInvalidate);
	return oResult;
};

sap.suite.ui.commons.HeaderContainer.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName){
    var that = this;
	  var args = Array.prototype.slice.call(arguments);
    if(sAggregationName === "items"){
        args[1] = "content";
        return this._oScrollCntr[sFunctionName].apply(this._oScrollCntr, args.slice(1));
    } else {
        return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, args.slice(1));
    }
    
};

sap.suite.ui.commons.HeaderContainer.prototype.onBeforeRendering = function() {
	if (jQuery.device.is.desktop) {
		sap.ui.getCore().attachIntervalTimer(this._checkOverflow, this); // proxy() is needed for the additional parameters, not for "this"
		this._oArrowPrev.setIcon(this.getView() == "Horizontal" ? "sap-icon://navigation-left-arrow" : "sap-icon://navigation-up-arrow");
		this._oArrowNext.setIcon(this.getView() == "Horizontal" ? "sap-icon://navigation-right-arrow" : "sap-icon://navigation-down-arrow");
		this.$().unbind("click", this.handleSwipe);
	}
};

sap.suite.ui.commons.HeaderContainer.prototype.onAfterRendering = function() {
	jQuery.sap.byId(this.getId() + "-scrl-next-button").attr("tabindex","-1");
	jQuery.sap.byId(this.getId() + "-scrl-prev-button").attr("tabindex","-1");
	if (jQuery.device.is.desktop) { 
		this.$().bind("swipe", jQuery.proxy(this.handleSwipe, this));		
	}
	
	if (this._sScrollResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sScrollResizeHandlerId);
	}
	
    var oScroll = jQuery.sap.domById(this.getId() + "-scrl-cntnr");
    //this._sScrollResizeHandlerId = sap.ui.core.ResizeHandler.register(oScroll,  jQuery.proxy(this._refreshScroll, this));
};

sap.suite.ui.commons.HeaderContainer.prototype._refreshScroll = function() {
	if(!this.bScrollInProcess) {
		this._oScrollCntr.getScrollDelegate().refresh();		
	}
};

sap.suite.ui.commons.HeaderContainer.prototype.handleSwipe = function(oE) {
	oE.preventDefault();
	oE.stopPropagation();
	this._isDragEvent = true;
};

sap.suite.ui.commons.HeaderContainer.prototype.exit = function() {
	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
	}
};

sap.suite.ui.commons.HeaderContainer.prototype.onclick = function(oE) {
	if(this._isDragEvent) {
		oE.preventDefault();
		oE.stopPropagation();
		this._isDragEvent = false;
	}
};

sap.suite.ui.commons.HeaderContainer.prototype.setView = function(oObj) {
  this.setProperty("view", oObj);
	if(oObj == sap.suite.ui.commons.HeaderContainerView.Horizontal && !jQuery.device.is.desktop) {
		this._oScrollCntr.setHorizontal(true);
		this._oScrollCntr.setVertical(false);
	} else if(!jQuery.device.is.desktop) {
		this._oScrollCntr.setHorizontal(false);
		this._oScrollCntr.setVertical(true);
	}
	return this;
};

///**************************************************************
// * START - forward aggregation related methods to the inner aggregation
// **************************************************************/
sap.suite.ui.commons.HeaderContainer.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple){
    return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.suite.ui.commons.HeaderContainer.prototype.getAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    return this._callMethodInManagedObject("getAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.HeaderContainer.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.HeaderContainer.prototype.indexOfAggregation = function(sAggregationName, oObject){
    return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.suite.ui.commons.HeaderContainer.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate){
    this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.HeaderContainer.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.HeaderContainer.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.HeaderContainer.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.suite.ui.commons.HeaderContainer.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
    this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
    return this;
};


}; // end of sap/suite/ui/commons/HeaderContainer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.InfoTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.InfoTile.
jQuery.sap.declare("sap.suite.ui.commons.InfoTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new InfoTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getFooter footer} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: "Auto")</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.LoadState (default: sap.suite.ui.commons.LoadState.Loading)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.InfoTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The tile control that displays the title, description, footer, and customizable main area.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.InfoTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.InfoTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"description" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"footer" : {type : "string", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : "Auto"},
		"state" : {type : "sap.suite.ui.commons.LoadState", group : "Misc", defaultValue : sap.suite.ui.commons.LoadState.Loading}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}, 
		"titleText" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.InfoTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.InfoTile.extend
 * @function
 */

sap.suite.ui.commons.InfoTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>description</code>.
 * Shows the description of the selected tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.InfoTile#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setDescription
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.InfoTile#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setTitle
 * @function
 */


/**
 * Getter for property <code>footer</code>.
 * The footer text of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footer</code>
 * @public
 * @name sap.suite.ui.commons.InfoTile#getFooter
 * @function
 */

/**
 * Setter for property <code>footer</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooter  new value for property <code>footer</code>
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setFooter
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Updates the size of the tile. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>"Auto"</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.InfoTile#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>"Auto"</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setSize
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Indicates the load status.
 *
 * Default value is <code>Loading</code>
 *
 * @return {sap.suite.ui.commons.LoadState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.InfoTile#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loading</code> 
 *
 * @param {sap.suite.ui.commons.LoadState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setState
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The switchable view that depends on the tile type.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.InfoTile#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#destroyContent
 * @function
 */


/**
 * The event is fired when the user chooses the tile.
 *
 * @name sap.suite.ui.commons.InfoTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.InfoTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.InfoTile</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the tile.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.InfoTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.InfoTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.InfoTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.InfoTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.InfoTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/InfoTile.js
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained


sap.suite.ui.commons.InfoTile.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	
	this._oTitle = new sap.m.Text(this.getId() + "-title", {maxLines: 2});
	this.setAggregation("titleText", this._oTitle);
	
	this._sFailedToLoad = this._rb.getText("INFOTILE_CANNOT_LOAD_TILE");
	
	this._oWarningIcon = new sap.ui.core.Icon(this.getId() + "-warn-icon",{
		src : "sap-icon://notification"
	}); 
};

sap.suite.ui.commons.InfoTile.prototype.ontap = function(oEvent) {
	this.firePress();
};

sap.suite.ui.commons.InfoTile.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
    }
};

sap.suite.ui.commons.InfoTile.prototype.getTitle = function() {
	return this._oTitle.getText();
};

sap.suite.ui.commons.InfoTile.prototype.setTitle = function(sDesc) {
	this._oTitle.setProperty("text", sDesc, true);
	this.invalidate();
	
	return this;
};

sap.suite.ui.commons.InfoTile.prototype.exit = function() {
	this._oWarningIcon.destroy();
};
}; // end of sap/suite/ui/commons/InfoTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.JamContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.JamContent.
jQuery.sap.declare("sap.suite.ui.commons.JamContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new JamContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getContentText contentText} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getValueColor valueColor} : sap.suite.ui.commons.InfoTileValueColor</li>
 * <li>{@link #getTruncateValueTo truncateValueTo} : int (default: 4)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.JamContent#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays the jam content text, subheader, and numeric value in a tile.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.JamContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.JamContent", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"contentText" : {type : "string", group : "Misc", defaultValue : null},
		"subheader" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"valueColor" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : null},
		"truncateValueTo" : {type : "int", group : "Misc", defaultValue : 4}
	},
	aggregations : {
		"contentTextAgr" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.JamContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.JamContent.extend
 * @function
 */

sap.suite.ui.commons.JamContent.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setSize
 * @function
 */


/**
 * Getter for property <code>contentText</code>.
 * The content text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>contentText</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getContentText
 * @function
 */

/**
 * Setter for property <code>contentText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sContentText  new value for property <code>contentText</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setContentText
 * @function
 */


/**
 * Getter for property <code>subheader</code>.
 * The subheader.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subheader</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getSubheader
 * @function
 */

/**
 * Setter for property <code>subheader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubheader  new value for property <code>subheader</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setSubheader
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setValue
 * @function
 */


/**
 * Getter for property <code>valueColor</code>.
 * The semantic color of the value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>valueColor</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getValueColor
 * @function
 */

/**
 * Setter for property <code>valueColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oValueColor  new value for property <code>valueColor</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setValueColor
 * @function
 */


/**
 * Getter for property <code>truncateValueTo</code>.
 * The number of characters to display for the value property.
 *
 * Default value is <code>4</code>
 *
 * @return {int} the value of property <code>truncateValueTo</code>
 * @public
 * @name sap.suite.ui.commons.JamContent#getTruncateValueTo
 * @function
 */

/**
 * Setter for property <code>truncateValueTo</code>.
 *
 * Default value is <code>4</code> 
 *
 * @param {int} iTruncateValueTo  new value for property <code>truncateValueTo</code>
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#setTruncateValueTo
 * @function
 */


/**
 * The event is fired when the user chooses the jam content.
 *
 * @name sap.suite.ui.commons.JamContent#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.JamContent</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.JamContent</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the jam content.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.JamContent</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.JamContent</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.JamContent#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.JamContent} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.JamContent#firePress
 * @function
 */


// Start of sap/suite/ui/commons/JamContent.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.JamContent.prototype.init = function() {
	this._oCText = new sap.m.Text(this.getId() + "-content-text", {maxLines: 3});
	this._oCText.cacheLineHeight = false;
	this.setAggregation("contentTextAgr", this._oCText);
	this.setTooltip("{AltText}");
};

sap.suite.ui.commons.JamContent.prototype.ontap = function(oEvent) {
        if (sap.ui.Device.browser.internet_explorer) {
            this.$().focus();
        }
	this.firePress();
};

sap.suite.ui.commons.JamContent.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.JamContent.prototype.getContentText = function() {
	return this._oCText.getText();
};

sap.suite.ui.commons.JamContent.prototype.setContentText = function(sText) {
	this._oCText.setText(sText);
	return this;
};

sap.suite.ui.commons.JamContent.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.JamContent.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.JamContent.prototype.getAltText = function() {
	var sAltText = "";
	var bIsFirst = true;
	if (this.getContentText()) {
		sAltText += this.getContentText();
		bIsFirst = false;
	}
	if (this.getSubheader()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getSubheader();
		bIsFirst = false;
	}
	if (this.getValue()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getValue();
	}
	return sAltText;
};

sap.suite.ui.commons.JamContent.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

}; // end of sap/suite/ui/commons/JamContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.KpiTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.KpiTile.
jQuery.sap.declare("sap.suite.ui.commons.KpiTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new KpiTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getDoubleFontSize doubleFontSize} : boolean (default: true)</li>
 * <li>{@link #getValueUnit valueUnit} : string</li>
 * <li>{@link #getValueScale valueScale} : string</li>
 * <li>{@link #getValueStatus valueStatus} : sap.suite.ui.commons.ValueStatus (default: sap.suite.ui.commons.ValueStatus.Neutral)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display object-related KPIs in a factsheet.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.KpiTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.KpiTile", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"doubleFontSize" : {type : "boolean", group : "Misc", defaultValue : true},
		"valueUnit" : {type : "string", group : "Misc", defaultValue : null},
		"valueScale" : {type : "string", group : "Misc", defaultValue : null},
		"valueStatus" : {type : "sap.suite.ui.commons.ValueStatus", group : "Misc", defaultValue : sap.suite.ui.commons.ValueStatus.Neutral}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.KpiTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.KpiTile.extend
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The Value field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValue
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The Description field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setDescription
 * @function
 */


/**
 * Getter for property <code>doubleFontSize</code>.
 * If true, the value text will have 2 rem, if false - 1 rem.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>doubleFontSize</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getDoubleFontSize
 * @function
 */

/**
 * Setter for property <code>doubleFontSize</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDoubleFontSize  new value for property <code>doubleFontSize</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setDoubleFontSize
 * @function
 */


/**
 * Getter for property <code>valueUnit</code>.
 * The percent sign, currency symbol, or unit for a value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueUnit</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueUnit
 * @function
 */

/**
 * Setter for property <code>valueUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueUnit  new value for property <code>valueUnit</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueUnit
 * @function
 */


/**
 * Getter for property <code>valueScale</code>.
 * The scale of a value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueScale</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueScale
 * @function
 */

/**
 * Setter for property <code>valueScale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueScale  new value for property <code>valueScale</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueScale
 * @function
 */


/**
 * Getter for property <code>valueStatus</code>.
 * The status color of the value. Depending on the status the tile is displayed in different colors.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.ValueStatus} the value of property <code>valueStatus</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueStatus
 * @function
 */

/**
 * Setter for property <code>valueStatus</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.ValueStatus} oValueStatus  new value for property <code>valueStatus</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueStatus
 * @function
 */


// Start of sap/suite/ui/commons/KpiTile.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.KpiTile.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/KpiTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LaunchTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.LaunchTile.
jQuery.sap.declare("sap.suite.ui.commons.LaunchTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new LaunchTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.LaunchTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control launches a URL.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * API is not yet finished and might change completely
 * @name sap.suite.ui.commons.LaunchTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.LaunchTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.LaunchTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.LaunchTile.extend
 * @function
 */

sap.suite.ui.commons.LaunchTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * Descriptive title of the launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon associated with the launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setIcon
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setLink
 * @function
 */


/**
 * The event fired when the user clicks on the control.
 *
 * @name sap.suite.ui.commons.LaunchTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.LaunchTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.LaunchTile</code>.<br/> itself. 
 *  
 * The event fired when the user clicks on the control.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.LaunchTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.LaunchTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.LaunchTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/LaunchTile.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



// sap.suite.ui.commons.LaunchTile.prototype.init = function() {

// do something for initialization...
// };

/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.suite.ui.commons.LaunchTile.prototype.exit = function() {

    if (this._iconImage) {
        this._iconImage.destroy();
        this._iconImage = undefined;
    }

};

/**
 * Sets the launch tile's image.
 * 
 */
sap.suite.ui.commons.LaunchTile.prototype.setIcon = function(sURI) {

    this.setProperty("icon", sURI, true);

    var sImgId = this.getId() + "-img";
	var sSize = "72px";
	
	var mProperties = { 
		src : sURI,
		height : sSize,
		width : sSize,
		size: sSize		
	};
	
	this._iconImage = sap.m.ImageHelper.getImageControl(sImgId, this._iconImage, this, mProperties);
    
    return this;
};

/**
 * Fire press event.
 * 
 * @private
 */
sap.suite.ui.commons.LaunchTile.prototype.onclick = function(oEvent) {

    this.firePress({
        title : this.getTitle(),
        link : this.getLink()
    });

};
}; // end of sap/suite/ui/commons/LaunchTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LinkActionSheet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.LinkActionSheet.
jQuery.sap.declare("sap.suite.ui.commons.LinkActionSheet");

jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained



/**
 * Constructor for a new LinkActionSheet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.LinkActionSheet#event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ActionSheet#constructor sap.m.ActionSheet}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains one or more sap.m.Button controls or sap.ui.commons.Link controls. The LinkActionSheet control is closed if the user chooses one of the buttons or links. It looks similar to sap.m.Dialog in iPhone and Android, and to sap.m.Popover in iPad.
 * @extends sap.m.ActionSheet
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ActionSheet.extend("sap.suite.ui.commons.LinkActionSheet", { metadata : {

	library : "sap.suite.ui.commons",
	aggregations : {
		"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
	},
	events : {
		"itemPress" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.LinkActionSheet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.LinkActionSheet.extend
 * @function
 */

sap.suite.ui.commons.LinkActionSheet.M_EVENTS = {'itemPress':'itemPress'};


/**
 * Getter for aggregation <code>items</code>.<br/>
 * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses a button or a link, the LinkActionSheet is closed before the event listener is called.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#destroyItems
 * @function
 */


/**
 * The event is fired when the user chooses any item.
 *
 * @name sap.suite.ui.commons.LinkActionSheet#itemPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.item The object that initiated the event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'itemPress' event of this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses any item.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#attachItemPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'itemPress' event of this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#detachItemPress
 * @function
 */

/**
 * Fire event itemPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.ui.core.Control</code> The object that initiated the event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.LinkActionSheet#fireItemPress
 * @function
 */


// Start of sap/suite/ui/commons/LinkActionSheet.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.LinkActionSheet.prototype.init = function() {
	if (jQuery.device.is.desktop) {
		sap.m.ActionSheet.prototype.init.apply(this);
		this.getButtons = this.getItems;
	} else {
		this._setItemNavigation = function() {};
		this.attachBeforeOpen(function() {
			this.onclick = function(e) {
				e.preventDefault();
			};
		}).attachAfterOpen(function() {
			this.onclick = function(e) {};
		});
	}
};

sap.suite.ui.commons.LinkActionSheet.prototype._preProcessActionItem = function(oItem){
	if( oItem.getType  &&  oItem.getType() !== sap.m.ButtonType.Accept &&  oItem.getType() !== sap.m.ButtonType.Reject){
		oItem.setType(sap.m.ButtonType.Transparent);
		oItem.addStyleClass("sapMBtnInverted"); // dark background
	}
	oItem.onsapenter = function() {
		this._bEnterWasPressed = true;
	};

	return this;
};

sap.suite.ui.commons.LinkActionSheet.prototype._itemSelected = function(event){
	var oItem = event.getSource();
	
	if (this.fireItemPress({item: oItem})) {
		if(!(jQuery.device.is.ipad || (!jQuery.device.is.phone)) && this._parent){
			this._parent._oCloseTrigger = this;
		}
		this.close();
	}
	oItem._bEnterWasPressed = undefined;
};

/* Override API methods */
sap.suite.ui.commons.LinkActionSheet.prototype.addItem = function(oItem) {
	this.addAggregation("items",oItem, false);
	this._preProcessActionItem(oItem);
	oItem.attachPress(this._itemSelected, this);
	return this;
};
sap.suite.ui.commons.LinkActionSheet.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items",oItem, iIndex, false);
	this._preProcessActionItem(oItem);
	oItem.attachPress(this._itemSelected, this);
	return this;
};
sap.suite.ui.commons.LinkActionSheet.prototype.removeItem = function(oItem) {
	var result = this.removeAggregation("items",oItem, false);
	if (result) {
		result.detachPress(this._itemSelected, this);
		oItem.onsapenter = undefined;
	}
	return result;
};
sap.suite.ui.commons.LinkActionSheet.prototype.removeAllItems = function() {
	var result = this.removeAllAggregation("items", false);
	var that=this;
	jQuery.each(result, function(i, oItem) {
		oItem.detachPress(that._itemSelected, that);
		oItem.onsapenter = undefined;
	});
	return result;
};
sap.suite.ui.commons.LinkActionSheet.prototype.clone = function() {
	var aItems = this.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		var oItem = aItems[i];
		oItem.detachPress(this._itemSelected, this);
	}

	var oClone = sap.ui.core.Control.prototype.clone.apply(this, arguments);

	for ( var i = 0; i < aItems.length; i++) {
		var oItem = aItems[i];
		oItem.attachPress(this._itemSelected, this);
	}

	return oClone;
};
}; // end of sap/suite/ui/commons/LinkActionSheet.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MicroAreaChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MicroAreaChart.
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MicroAreaChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '200px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '190px')</li>
 * <li>{@link #getMaxXValue maxXValue} : float</li>
 * <li>{@link #getMinXValue minXValue} : float</li>
 * <li>{@link #getMaxYValue maxYValue} : float</li>
 * <li>{@link #getMinYValue minYValue} : float</li>
 * <li>{@link #getView view} : sap.suite.ui.commons.MicroAreaChartView (default: sap.suite.ui.commons.MicroAreaChartView.Normal)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getChart chart} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getMaxThreshold maxThreshold} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getInnerMaxThreshold innerMaxThreshold} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getInnerMinThreshold innerMinThreshold} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getMinThreshold minThreshold} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getTarget target} : sap.suite.ui.commons.MicroAreaChartItem</li>
 * <li>{@link #getFirstXLabel firstXLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li>
 * <li>{@link #getFirstYLabel firstYLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li>
 * <li>{@link #getLastXLabel lastXLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li>
 * <li>{@link #getLastYLabel lastYLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li>
 * <li>{@link #getMaxLabel maxLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li>
 * <li>{@link #getMinLabel minLabel} : sap.suite.ui.commons.MicroAreaChartLabel</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.MicroAreaChart#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays the history of values as a line mini chart or an area mini chart.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.MicroAreaChart", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '200px'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '190px'},
		"maxXValue" : {type : "float", group : "Misc", defaultValue : null},
		"minXValue" : {type : "float", group : "Misc", defaultValue : null},
		"maxYValue" : {type : "float", group : "Misc", defaultValue : null},
		"minYValue" : {type : "float", group : "Misc", defaultValue : null},
		"view" : {type : "sap.suite.ui.commons.MicroAreaChartView", group : "Appearance", defaultValue : sap.suite.ui.commons.MicroAreaChartView.Normal}
	},
	aggregations : {
		"chart" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"maxThreshold" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"innerMaxThreshold" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"innerMinThreshold" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"minThreshold" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"target" : {type : "sap.suite.ui.commons.MicroAreaChartItem", multiple : false}, 
		"firstXLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}, 
		"firstYLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}, 
		"lastXLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}, 
		"lastYLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}, 
		"maxLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}, 
		"minLabel" : {type : "sap.suite.ui.commons.MicroAreaChartLabel", multiple : false}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MicroAreaChart.extend
 * @function
 */

sap.suite.ui.commons.MicroAreaChart.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>width</code>.
 * The width of the chart.
 *
 * Default value is <code>200px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>200px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the chart.
 *
 * Default value is <code>190px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>190px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setHeight
 * @function
 */


/**
 * Getter for property <code>maxXValue</code>.
 * If this property is set it indicates the value X axis ends with.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>maxXValue</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMaxXValue
 * @function
 */

/**
 * Setter for property <code>maxXValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMaxXValue  new value for property <code>maxXValue</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMaxXValue
 * @function
 */


/**
 * Getter for property <code>minXValue</code>.
 * If this property is set it indicates the value X axis starts with.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>minXValue</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMinXValue
 * @function
 */

/**
 * Setter for property <code>minXValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMinXValue  new value for property <code>minXValue</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMinXValue
 * @function
 */


/**
 * Getter for property <code>maxYValue</code>.
 * If this property is set it indicates the value Y axis ends with.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>maxYValue</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMaxYValue
 * @function
 */

/**
 * Setter for property <code>maxYValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMaxYValue  new value for property <code>maxYValue</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMaxYValue
 * @function
 */


/**
 * Getter for property <code>minYValue</code>.
 * If this property is set it indicates the value Y axis starts with.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>minYValue</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMinYValue
 * @function
 */

/**
 * Setter for property <code>minYValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fMinYValue  new value for property <code>minYValue</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMinYValue
 * @function
 */


/**
 * Getter for property <code>view</code>.
 * The view of the chart.
 *
 * Default value is <code>Normal</code>
 *
 * @return {sap.suite.ui.commons.MicroAreaChartView} the value of property <code>view</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getView
 * @function
 */

/**
 * Setter for property <code>view</code>.
 *
 * Default value is <code>Normal</code> 
 *
 * @param {sap.suite.ui.commons.MicroAreaChartView} oView  new value for property <code>view</code>
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setView
 * @function
 */


/**
 * Getter for aggregation <code>chart</code>.<br/>
 * The configuration of the actual values line. The color property defines the color of the line. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getChart
 * @function
 */


/**
 * Setter for the aggregated <code>chart</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oChart
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setChart
 * @function
 */
	

/**
 * Destroys the chart in the aggregation 
 * named <code>chart</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyChart
 * @function
 */


/**
 * Getter for aggregation <code>maxThreshold</code>.<br/>
 * The configuration of the max threshold area. The color property defines the color of the area above the max threshold line. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMaxThreshold
 * @function
 */


/**
 * Setter for the aggregated <code>maxThreshold</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oMaxThreshold
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMaxThreshold
 * @function
 */
	

/**
 * Destroys the maxThreshold in the aggregation 
 * named <code>maxThreshold</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyMaxThreshold
 * @function
 */


/**
 * Getter for aggregation <code>innerMaxThreshold</code>.<br/>
 * The configuration of the upper line of the inner threshold area. The color property defines the color of the area between inner thresholds. For rendering of the inner threshold area, both innerMaxThreshold and innerMinThreshold aggregations must be defined. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getInnerMaxThreshold
 * @function
 */


/**
 * Setter for the aggregated <code>innerMaxThreshold</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oInnerMaxThreshold
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setInnerMaxThreshold
 * @function
 */
	

/**
 * Destroys the innerMaxThreshold in the aggregation 
 * named <code>innerMaxThreshold</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyInnerMaxThreshold
 * @function
 */


/**
 * Getter for aggregation <code>innerMinThreshold</code>.<br/>
 * The configuration of the bottom line of the inner threshold area. The color property is ignored. For rendering of the inner threshold area, both innerMaxThreshold and innerMinThreshold aggregations must be defined. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getInnerMinThreshold
 * @function
 */


/**
 * Setter for the aggregated <code>innerMinThreshold</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oInnerMinThreshold
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setInnerMinThreshold
 * @function
 */
	

/**
 * Destroys the innerMinThreshold in the aggregation 
 * named <code>innerMinThreshold</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyInnerMinThreshold
 * @function
 */


/**
 * Getter for aggregation <code>minThreshold</code>.<br/>
 * The configuration of the min threshold area. The color property defines the color of the area below the min threshold line. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMinThreshold
 * @function
 */


/**
 * Setter for the aggregated <code>minThreshold</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oMinThreshold
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMinThreshold
 * @function
 */
	

/**
 * Destroys the minThreshold in the aggregation 
 * named <code>minThreshold</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyMinThreshold
 * @function
 */


/**
 * Getter for aggregation <code>target</code>.<br/>
 * The configuration of the target values line. The color property defines the color of the line. Points are rendered in the same sequence as in this aggregation.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartItem}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getTarget
 * @function
 */


/**
 * Setter for the aggregated <code>target</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartItem} oTarget
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setTarget
 * @function
 */
	

/**
 * Destroys the target in the aggregation 
 * named <code>target</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyTarget
 * @function
 */


/**
 * Getter for aggregation <code>firstXLabel</code>.<br/>
 * The label on X axis for the first point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getFirstXLabel
 * @function
 */


/**
 * Setter for the aggregated <code>firstXLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oFirstXLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setFirstXLabel
 * @function
 */
	

/**
 * Destroys the firstXLabel in the aggregation 
 * named <code>firstXLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyFirstXLabel
 * @function
 */


/**
 * Getter for aggregation <code>firstYLabel</code>.<br/>
 * The label on Y axis for the first point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getFirstYLabel
 * @function
 */


/**
 * Setter for the aggregated <code>firstYLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oFirstYLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setFirstYLabel
 * @function
 */
	

/**
 * Destroys the firstYLabel in the aggregation 
 * named <code>firstYLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyFirstYLabel
 * @function
 */


/**
 * Getter for aggregation <code>lastXLabel</code>.<br/>
 * The label on X axis for the last point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getLastXLabel
 * @function
 */


/**
 * Setter for the aggregated <code>lastXLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oLastXLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setLastXLabel
 * @function
 */
	

/**
 * Destroys the lastXLabel in the aggregation 
 * named <code>lastXLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyLastXLabel
 * @function
 */


/**
 * Getter for aggregation <code>lastYLabel</code>.<br/>
 * The label on Y axis for the last point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getLastYLabel
 * @function
 */


/**
 * Setter for the aggregated <code>lastYLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oLastYLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setLastYLabel
 * @function
 */
	

/**
 * Destroys the lastYLabel in the aggregation 
 * named <code>lastYLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyLastYLabel
 * @function
 */


/**
 * Getter for aggregation <code>maxLabel</code>.<br/>
 * The label for the maximum point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMaxLabel
 * @function
 */


/**
 * Setter for the aggregated <code>maxLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oMaxLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMaxLabel
 * @function
 */
	

/**
 * Destroys the maxLabel in the aggregation 
 * named <code>maxLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyMaxLabel
 * @function
 */


/**
 * Getter for aggregation <code>minLabel</code>.<br/>
 * The label for the minimum point of the chart.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartLabel}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#getMinLabel
 * @function
 */


/**
 * Setter for the aggregated <code>minLabel</code>.
 * @param {sap.suite.ui.commons.MicroAreaChartLabel} oMinLabel
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#setMinLabel
 * @function
 */
	

/**
 * Destroys the minLabel in the aggregation 
 * named <code>minLabel</code>.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#destroyMinLabel
 * @function
 */


/**
 * The event is fired when the user chooses the micro area chart.
 *
 * @name sap.suite.ui.commons.MicroAreaChart#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.MicroAreaChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.MicroAreaChart</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the micro area chart.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.MicroAreaChart</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.MicroAreaChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChart#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.MicroAreaChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.MicroAreaChart#firePress
 * @function
 */


// Start of sap/suite/ui/commons/MicroAreaChart.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.MicroAreaChart.prototype.init = function(){
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	this.setTooltip("{AltText}");
};

sap.suite.ui.commons.MicroAreaChart.prototype._getCssValues = function() {
	this._cssHelper.className = Array.prototype.slice.call(arguments).join(" ");
	var oCsses = window.getComputedStyle(this._cssHelper);
	
	if (oCsses.backgroundColor == undefined) {
		oCsses.backgroundColor = oCsses["background-color"];
	}

	if (oCsses.outlineStyle == undefined) {
		oCsses.outlineStyle = oCsses["outline-style"];
	}

	if (oCsses.outlineWidth == undefined) {
		oCsses.outlineWidth = oCsses["outline-width"];
	}
	return oCsses;
};

sap.suite.ui.commons.MicroAreaChart.prototype._fillThresholdArea = function(c, aPoints1, aPoints2, color) {
	c.beginPath();
	c.moveTo(aPoints1[0].x, aPoints1[0].y);
	
	for(var i = 1, length = aPoints1.length; i < length; i++) {
		c.lineTo(aPoints1[i].x, aPoints1[i].y);
	}
	
	for(var i = aPoints2.length - 1; i >= 0 ; i--) {
		c.lineTo(aPoints2[i].x, aPoints2[i].y);
	}
	
	c.closePath();
	
	c.fillStyle = "white";
	c.fill();
	
	c.fillStyle = color;
	c.fill();
	
	c.lineWidth = 1;
	c.strokeStyle = "white";
	c.stroke();
	
	c.strokeStyle = color;
	c.stroke();
};

sap.suite.ui.commons.MicroAreaChart.prototype._renderDashedLine = function(c, aPoints, d, aDashes) {
	if (c.setLineDash) {
		c.setLineDash(aDashes);
		this._renderLine(c, aPoints, d);
		c.setLineDash([]);
	} else {
		c.beginPath();
		for(var i = 0, length = aPoints.length - 1; i < length; i++) {
			c._dashedLine(aPoints[i].x, aPoints[i].y, aPoints[i + 1].x, aPoints[i + 1].y, aDashes);
		}
		c.stroke();
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype._renderLine = function(c, aPoints, d) {
	c.beginPath();
	c.moveTo(aPoints[0].x, aPoints[0].y);
	
	for(var i = 1, length = aPoints.length; i < length; i++) {
		c.lineTo(aPoints[i].x, aPoints[i].y);
	}
	
	c.stroke();
};

sap.suite.ui.commons.MicroAreaChart.prototype.renderTarget = function(c, d) {
	if (d.target.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacTarget", this.getTarget().getColor());
		c.strokeStyle = oCsses.color;
		c.lineWidth = parseFloat(oCsses.width);
		
		if (oCsses.outlineStyle == "dotted") {
			this._renderDashedLine(c, d.target, d, [parseFloat(oCsses.outlineWidth), 3]);
		} else {
			this._renderLine(c, d.target, d);
		}
	} else if (d.target.length == 1) {
		jQuery.sap.log.warning("Target is not rendered because only 1 point was given");
	}
};
		
sap.suite.ui.commons.MicroAreaChart.prototype.renderThresholdLine = function(c, aPoints, d) {
	if (aPoints && aPoints.length) {
		var oCsses = this._getCssValues("sapSuiteMacThreshold");
	
		c.strokeStyle = oCsses.color;
		c.lineWidth = oCsses.width;
		this._renderLine(c, aPoints, d);
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.fillMaxThreshold = function(c, d) {
	if (d.maxThreshold.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacThreshold", this.getMaxThreshold().getColor());
		this._fillThresholdArea(c, d.maxThreshold, [
			{x: d.maxThreshold[0].x, y: d.minY}, 
			{x: d.maxThreshold[d.maxThreshold.length - 1].x, y: d.minY}
		], oCsses.backgroundColor);
		this.renderThresholdLine(c, d.maxThreshold, d);
	} else if (d.maxThreshold.length == 1) {
		jQuery.sap.log.warning("Max Threshold is not rendered because only 1 point was given");
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.fillMinThreshold = function(c, d) {
	if (d.minThreshold.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacThreshold", this.getMinThreshold().getColor());
		this._fillThresholdArea(c, d.minThreshold, [
			{x: d.minThreshold[0].x, y: d.maxY}, 
			{x: d.minThreshold[d.minThreshold.length - 1].x, y: d.maxY}
		], oCsses.backgroundColor);
	} else if (d.minThreshold.length == 1) {
		jQuery.sap.log.warning("Min Threshold is not rendered because only 1 point was given");
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.fillThresholdArea = function(c, d) {
	if (d.minThreshold.length > 1 && d.maxThreshold.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacThreshold", "Critical");
		
		this._fillThresholdArea(c, d.maxThreshold, d.minThreshold, oCsses.backgroundColor);
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.fillInnerThresholdArea = function(c, d) {
	if (d.innerMinThreshold.length > 1 && d.innerMaxThreshold.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacThreshold", this.getInnerMaxThreshold().getColor());
		
		this._fillThresholdArea(c, d.innerMaxThreshold, d.innerMinThreshold, oCsses.backgroundColor);
	} else if (d.innerMinThreshold.length || d.innerMaxThreshold.length) {
		jQuery.sap.log.warning("Inner threshold area is not rendered because inner min and max threshold were not correctly set");
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.renderChart = function(c, d) {
	if (d.chart.length > 1) {
		var oCsses = this._getCssValues("sapSuiteMacChart", this.getChart().getColor());
		c.strokeStyle = oCsses.color;
		c.lineWidth = parseFloat(oCsses.width);
		
		this._renderLine(c, d.chart, d);
	} else if (d.chart.length == 1) {
		jQuery.sap.log.warning("Actual values are not rendered because only 1 point was given");
	}
};

sap.suite.ui.commons.MicroAreaChart.prototype.renderCanvas = function() {
	this._cssHelper = document.getElementById(this.getId() + "-css-helper");
	
	var sLabelsWidth = this.$().find(".sapSuiteMacSideLabels").css("width");
	this.$().find(".sapSuiteMacCanvas, .sapSuiteMacLabels").css("right", sLabelsWidth).css("left", sLabelsWidth);
	
	var canvas = document.getElementById(this.getId() + "-canvas");
	var canvasSettings = window.getComputedStyle(canvas);
	canvas.setAttribute("width", parseFloat(canvasSettings.width));
	canvas.setAttribute("height", parseFloat(canvasSettings.height));
	
	var c = canvas.getContext("2d");
	
	c.lineJoin = "round";
	
	c._dashedLine = function(x, y, x2, y2, dashArray) {
	    var dashCount = dashArray.length;
	    this.moveTo(x, y);
	    var dx = (x2 - x), dy = (y2 - y);
	    var slope = dx ? dy/dx : 1e15;
	    var distRemaining = Math.sqrt(dx*dx + dy*dy);
	    var dashIndex = 0, draw = true;
	    while (distRemaining >= 0.1) {
			var dashLength = dashArray[dashIndex++ % dashCount];
			if (dashLength > distRemaining) {
				dashLength = distRemaining;
			}
			var xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
			if (dx < 0) {
				xStep = -xStep;
			}
			x += xStep
			y += slope * xStep;
			this[draw ? 'lineTo' : 'moveTo'](x, y);
			distRemaining -= dashLength;
			draw = !draw;
	    }
	};    
	var d = this._calculateDimensions(canvas.width, canvas.height);

	this.fillMaxThreshold(c, d);
	this.fillMinThreshold(c, d);
	this.fillThresholdArea(c, d);
	this.renderThresholdLine(c, d.minThreshold, d);
	this.renderThresholdLine(c, d.maxThreshold, d);
	this.fillInnerThresholdArea(c, d);
	this.renderThresholdLine(c, d.innerMinThreshold, d);
	this.renderThresholdLine(c, d.innerMaxThreshold, d);
	this.renderTarget(c, d);
	this.renderChart(c, d);
};

sap.suite.ui.commons.MicroAreaChart.prototype._calculateDimensions = function(fWidth, fHeight) {
	var maxX, maxY, minX, minY;
	maxX = maxY = minX = minY = undefined;
	var that = this;
	
	function calculateExtremums() {
		if (!that._isMinXValue || !that._isMaxXValue || !that._isMinYValue || !that._isMaxYValue) {
			var lines = [];
			if (that.getMaxThreshold()) {
				lines.push(that.getMaxThreshold());
			}
			
			if (that.getMinThreshold()) {
				lines.push(that.getMinThreshold());
			}
			
			if (that.getChart()) {
				lines.push(that.getChart());
			}
			
			if (that.getTarget()) {
				lines.push(that.getTarget());
			}
			
			if (that.getInnerMaxThreshold()) {
				lines.push(that.getInnerMaxThreshold());
			}
			
			if (that.getInnerMinThreshold()) {
				lines.push(that.getInnerMinThreshold());
			}
			
			for (var i = 0, numOfLines = lines.length; i < numOfLines; i++) {
				var aPoints = lines[i].getPoints();
		        
		        for (var counter = 0, a = aPoints.length; counter < a; counter++) {
		        	var tmpVal = aPoints[counter].getXValue();
			        if (tmpVal > maxX || maxX === undefined) {
			        	maxX = tmpVal;
			        }
			        if (tmpVal < minX || minX === undefined) {
			        	minX = tmpVal;
			        }
	
		        	tmpVal = aPoints[counter].getYValue();
			        if (tmpVal > maxY || maxY === undefined) {
			        	maxY = tmpVal;
			        }
			        if (tmpVal < minY || minY === undefined) {
			        	minY = tmpVal;
			        }
			    }
			}
		}
		if (that._isMinXValue) {
			minX = that.getMinXValue();
		}
		
		if (that._isMaxXValue) {
			maxX = that.getMaxXValue();
		}
		
		if (that._isMinYValue) {
			minY = that.getMinYValue();
		}
		
		if (that._isMaxYValue) {
			maxY = that.getMaxYValue();
		}
	};
	
	calculateExtremums();
	
	var oResult = {
		minY: 0,
		minX: 0,
		maxY: fHeight,
		maxX: fWidth
	};
	
	var kx = undefined;
	var fDeltaX = maxX - minX;
	
	if (fDeltaX > 0) {
		kx = fWidth / fDeltaX;
	} else if (fDeltaX == 0) {
		kx = 0;
		oResult.maxX /= 2;
	} else {
		jQuery.sap.log.warning("Min X is more than max X");
	}
	
	var ky = undefined;
	var fDeltaY = maxY - minY;
	
	if (fDeltaY > 0) {
		ky = fHeight / (maxY - minY);
	} else if (fDeltaY == 0) {
		ky = 0;
		oResult.maxY /= 2;
	} else {
		jQuery.sap.log.warning("Min Y is more than max Y");
	}

	function calculateCoordinates(line) {
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();

		var fnCalcX = function(fValue) {
			var x = kx * (fValue - minX);
			
			if (bRtl) {
				x = oResult.maxX - x;
			}
			return x;
		};
		
		var fnCalcY = function(fValue) {
			return oResult.maxY - ky * (fValue - minY);
		};

		var aResult = [];
		if (line && kx != undefined && ky != undefined) {
			var aPoints = line.getPoints();
			var iLength = aPoints.length;
			var xi, yi, tmpXValue, tmpYValue;
			
			if (iLength == 1) {
				tmpXValue = aPoints[0].getXValue();
				tmpYValue = aPoints[0].getYValue();
				
				if (tmpXValue == undefined ^ tmpYValue == undefined) {
					var xn, yn;
					if (tmpXValue == undefined) {
						yn = yi = fnCalcY(tmpYValue);
						xi = oResult.minX;
						xn = oResult.maxX;
					} else {
						xn = xi = fnCalcX(tmpXValue);
						yi = oResult.minY;
						yn = oResult.maxY;
					}
					
					aResult.push({x: xi, y: yi}, {x: xn, y: yn});
				} else {
					jQuery.sap.log.warning("Point with coordinates [" + tmpXValue + " " + tmpYValue + "] ignored");
				}
			} else {
				for (var i = 0; i < iLength; i++) {
					tmpXValue = aPoints[i].getXValue();
					tmpYValue = aPoints[i].getYValue();
					
					if (tmpXValue != undefined && tmpYValue != undefined) {
						xi = fnCalcX(tmpXValue);
						yi = fnCalcY(tmpYValue);
						
						aResult.push({x: xi, y: yi});				
					} else {
						jQuery.sap.log.warning("Point with coordinates [" + tmpXValue + " " + tmpYValue + "] ignored");
					}
				}
			}
		}
		return aResult;
	};
	
	oResult.maxThreshold = calculateCoordinates(that.getMaxThreshold());
	oResult.minThreshold = calculateCoordinates(that.getMinThreshold());
	oResult.chart = calculateCoordinates(that.getChart());
	oResult.target = calculateCoordinates(that.getTarget());
	oResult.innerMaxThreshold = calculateCoordinates(that.getInnerMaxThreshold());
	oResult.innerMinThreshold = calculateCoordinates(that.getInnerMinThreshold());
	
	return oResult;
};

sap.suite.ui.commons.MicroAreaChart.prototype.setMinXValue = function(value, bSuppressInvalidate) {
	this._isMinXValue = this._isNumber(value);

	return this.setProperty("minXValue", this._isMinXValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChart.prototype.setMaxXValue = function(value, bSuppressInvalidate) {
	this._isMaxXValue = this._isNumber(value);

	return this.setProperty("maxXValue", this._isMaxXValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChart.prototype.setMinYValue = function(value, bSuppressInvalidate) {
	this._isMinYValue = this._isNumber(value);

	return this.setProperty("minYValue", this._isMinYValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChart.prototype.setMaxYValue = function(value, bSuppressInvalidate) {
	this._isMaxYValue = this._isNumber(value);

	return this.setProperty("maxYValue", this._isMaxYValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChart.prototype._isNumber = function(n) {
    return typeof n == 'number' && !isNaN(n) && isFinite(n);
};

sap.suite.ui.commons.MicroAreaChart.prototype.onAfterRendering = function() {
	this.renderCanvas();
};

sap.suite.ui.commons.MicroAreaChart.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.MicroAreaChart.prototype.onkeydown = function(oEvent) {
  if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
      oEvent.preventDefault();
  }
};

sap.suite.ui.commons.MicroAreaChart.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.MicroAreaChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.MicroAreaChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.MicroAreaChart.prototype.getLocalizedColorMeaning = function(sColor) {
	return this._oRb.getText(("SEMANTIC_COLOR_"+sColor).toUpperCase());
};

sap.suite.ui.commons.MicroAreaChart.prototype.getAltText = function() {
	var sAltText = "";
	var oFirstXLabel = this.getFirstXLabel();
	var oFirstYLabel = this.getFirstYLabel();
	var oLastXLabel = this.getLastXLabel();
	var oLastYLabel = this.getLastYLabel();
	var oMinLabel = this.getMinLabel();
	var oMaxLabel = this.getMaxLabel();
	var oActual = this.getChart();
	var oTarget = this.getTarget();
	var bIsFirst = true;
	if (oFirstXLabel && oFirstXLabel.getLabel() || oFirstYLabel && oFirstYLabel.getLabel()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_START")) + ": " + oFirstXLabel.getLabel() + " " + oFirstYLabel.getLabel() + " " + this.getLocalizedColorMeaning(oFirstYLabel.getColor());  
		bIsFirst = false;
	}
	if (oLastXLabel && oLastXLabel.getLabel() || oLastYLabel && oLastYLabel.getLabel()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_END")) + ": " + oLastXLabel.getLabel() + " " + oLastYLabel.getLabel() + " " + this.getLocalizedColorMeaning(oLastYLabel.getColor());  
		bIsFirst = false;
	}
	if (oMinLabel && oMinLabel.getLabel()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_MINIMAL_VALUE")) + ": " + oMinLabel.getLabel() + " " + this.getLocalizedColorMeaning(oMinLabel.getColor());  
		bIsFirst = false;
	}
	if (oMaxLabel && oMaxLabel.getLabel()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_MAXIMAL_VALUE")) + ": " + oMaxLabel.getLabel() + " " + this.getLocalizedColorMeaning(oMaxLabel.getColor());  
		bIsFirst = false;
	}
	if (oActual && oActual.getPoints()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_ACTUAL_VALUES")) + ":";
		bIsFirst = false;
		var aActual = oActual.getPoints();
		for (var i=0; i<aActual.length; i++) {
			sAltText += " " + aActual[i].getY();
		}
	}
	if (oTarget && oTarget.getPoints()) {
		sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("MICRO_AREA_CHART_TARGET_VALUES")) + ":";
		var aTarget = oTarget.getPoints();
		for (var i=0; i<aTarget.length; i++) {
			sAltText += " " + aTarget[i].getY();
		}
	}

	return sAltText;
};


sap.suite.ui.commons.MicroAreaChart.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

}; // end of sap/suite/ui/commons/MicroAreaChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MicroAreaChartItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MicroAreaChartItem.
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChartItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new MicroAreaChartItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : sap.suite.ui.commons.InfoTileValueColor (default: sap.suite.ui.commons.InfoTileValueColor.Neutral)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPoints points} : sap.suite.ui.commons.MicroAreaChartPoint[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The configuration of the graphic element on the chart.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.MicroAreaChartItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"color" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileValueColor.Neutral}
	},
	aggregations : {
		"points" : {type : "sap.suite.ui.commons.MicroAreaChartPoint", multiple : true, singularName : "point", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MicroAreaChartItem.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The graphic element color.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>color</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oColor  new value for property <code>color</code>
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#setColor
 * @function
 */


/**
 * Getter for aggregation <code>points</code>.<br/>
 * The set of points for this graphic element.
 * 
 * @return {sap.suite.ui.commons.MicroAreaChartPoint[]}
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#getPoints
 * @function
 */


/**
 * Inserts a point into the aggregation named <code>points</code>.
 *
 * @param {sap.suite.ui.commons.MicroAreaChartPoint}
 *          oPoint the point to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the point should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the point is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the point is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#insertPoint
 * @function
 */

/**
 * Adds some point <code>oPoint</code> 
 * to the aggregation named <code>points</code>.
 *
 * @param {sap.suite.ui.commons.MicroAreaChartPoint}
 *            oPoint the point to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#addPoint
 * @function
 */

/**
 * Removes an point from the aggregation named <code>points</code>.
 *
 * @param {int | string | sap.suite.ui.commons.MicroAreaChartPoint} vPoint the point to remove or its index or id
 * @return {sap.suite.ui.commons.MicroAreaChartPoint} the removed point or null
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#removePoint
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>points</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.MicroAreaChartPoint[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#removeAllPoints
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.MicroAreaChartPoint</code> in the aggregation named <code>points</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.MicroAreaChartPoint}
 *            oPoint the point whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#indexOfPoint
 * @function
 */
	

/**
 * Destroys all the points in the aggregation 
 * named <code>points</code>.
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#destroyPoints
 * @function
 */


/**
 * Binder for aggregation <code>points</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#bindPoints
 * @function
 */

/**
 * Unbinder for aggregation <code>points</code>.
 *
 * @return {sap.suite.ui.commons.MicroAreaChartItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartItem#unbindPoints
 * @function
 */


// Start of sap/suite/ui/commons/MicroAreaChartItem.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.MicroAreaChartItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/MicroAreaChartItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MicroAreaChartLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MicroAreaChartLabel.
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChartLabel");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new MicroAreaChartLabel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getColor color} : sap.suite.ui.commons.InfoTileValueColor (default: "Neutral")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element contains data for a label in MicroAreaChart control.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartLabel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.MicroAreaChartLabel", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"color" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : "Neutral"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartLabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MicroAreaChartLabel.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * The text of the label.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartLabel#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.suite.ui.commons.MicroAreaChartLabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartLabel#setLabel
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The color of the label.
 *
 * Default value is <code>"Neutral"</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>color</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartLabel#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>"Neutral"</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oColor  new value for property <code>color</code>
 * @return {sap.suite.ui.commons.MicroAreaChartLabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartLabel#setColor
 * @function
 */


// Start of sap/suite/ui/commons/MicroAreaChartLabel.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.MicroAreaChartLabel.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/MicroAreaChartLabel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MicroAreaChartPoint') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MicroAreaChartPoint.
jQuery.sap.declare("sap.suite.ui.commons.MicroAreaChartPoint");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new MicroAreaChartPoint.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getX x} : float</li>
 * <li>{@link #getY y} : float</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains data for the point.
 * @extends sap.ui.core.Element
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartPoint
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.MicroAreaChartPoint", { metadata : {

	publicMethods : [
		// methods
		"getXValue", "getYValue"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"x" : {type : "float", group : "Misc", defaultValue : null},
		"y" : {type : "float", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartPoint with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MicroAreaChartPoint.extend
 * @function
 */


/**
 * Getter for property <code>x</code>.
 * X value for the given point.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>x</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartPoint#getX
 * @function
 */

/**
 * Setter for property <code>x</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fX  new value for property <code>x</code>
 * @return {sap.suite.ui.commons.MicroAreaChartPoint} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartPoint#setX
 * @function
 */


/**
 * Getter for property <code>y</code>.
 * Y value for the given point.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>y</code>
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartPoint#getY
 * @function
 */

/**
 * Setter for property <code>y</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fY  new value for property <code>y</code>
 * @return {sap.suite.ui.commons.MicroAreaChartPoint} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MicroAreaChartPoint#setY
 * @function
 */


/**
 * Returns x value including undefined if the x property was not set or an invalid number was set.
 *
 * @name sap.suite.ui.commons.MicroAreaChartPoint#getXValue
 * @function
 * @type float
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Returns y value including undefined if the y property was not set or an invalid number was set.
 *
 * @name sap.suite.ui.commons.MicroAreaChartPoint#getYValue
 * @function
 * @type float
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/MicroAreaChartPoint.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.MicroAreaChartPoint.prototype.setX = function(value, bSuppressInvalidate) {
	this._isXValue = this._isNumber(value);
	
	return this.setProperty("x", this._isXValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChartPoint.prototype.setY = function(value, bSuppressInvalidate) {
	this._isYValue = this._isNumber(value);
	
	return this.setProperty("y", this._isYValue ? value : NaN, bSuppressInvalidate);
};

sap.suite.ui.commons.MicroAreaChartPoint.prototype.getXValue = function() {
	return this._isXValue ? this.getX() : undefined;
};

sap.suite.ui.commons.MicroAreaChartPoint.prototype.getYValue = function() {
	return this._isYValue ? this.getY() : undefined;
};

sap.suite.ui.commons.MicroAreaChartPoint.prototype._isNumber = function(n) {
    return typeof n == 'number' && !isNaN(n) && isFinite(n);
};
}; // end of sap/suite/ui/commons/MicroAreaChartPoint.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MonitoringContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MonitoringContent.
jQuery.sap.declare("sap.suite.ui.commons.MonitoringContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MonitoringContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getIconSrc iconSrc} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.LoadState (default: sap.suite.ui.commons.LoadState.Loaded)</li>
 * <li>{@link #getAnimateTextChange animateTextChange} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.Icon</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.MonitoringContent#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in a tile or any other place to display numeric values and an icon.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.NumericContent.
 * @name sap.suite.ui.commons.MonitoringContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.MonitoringContent", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"iconSrc" : {type : "string", group : "Misc", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"state" : {type : "sap.suite.ui.commons.LoadState", group : "Misc", defaultValue : sap.suite.ui.commons.LoadState.Loaded},
		"animateTextChange" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
		"icon" : {type : "sap.ui.core.Icon", multiple : false}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MonitoringContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MonitoringContent.extend
 * @function
 */

sap.suite.ui.commons.MonitoringContent.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setValue
 * @function
 */


/**
 * Getter for property <code>iconSrc</code>.
 * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon name parameter and optional collection parameter. The collection parameter is required when the application extended icons are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconSrc</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setIconSrc
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setSize
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Indicates the load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {sap.suite.ui.commons.LoadState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {sap.suite.ui.commons.LoadState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setState
 * @function
 */


/**
 * Getter for property <code>animateTextChange</code>.
 * If set to true, changing of the value is animated.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>animateTextChange</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getAnimateTextChange
 * @function
 */

/**
 * Setter for property <code>animateTextChange</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAnimateTextChange  new value for property <code>animateTextChange</code>
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setAnimateTextChange
 * @function
 */


/**
 * Getter for aggregation <code>icon</code>.<br/>
 * The icon that is displayed in the content.
 * 
 * @return {sap.ui.core.Icon}
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#getIcon
 * @function
 */


/**
 * Setter for the aggregated <code>icon</code>.
 * @param {sap.ui.core.Icon} oIcon
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#setIcon
 * @function
 */
	

/**
 * Destroys the icon in the aggregation 
 * named <code>icon</code>.
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#destroyIcon
 * @function
 */


/**
 * The event is fired when the user chooses the monitoring content.
 *
 * @name sap.suite.ui.commons.MonitoringContent#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.MonitoringContent</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.MonitoringContent</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the monitoring content.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.MonitoringContent</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.MonitoringContent</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringContent#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.MonitoringContent} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.MonitoringContent#firePress
 * @function
 */


// Start of sap/suite/ui/commons/MonitoringContent.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.MonitoringContent.prototype.init = function(){
    this._oIcon = new sap.ui.core.Icon(this.getId() + "-icon"); 
    this.setAggregation("icon", this._oIcon);
};

sap.suite.ui.commons.MonitoringContent.prototype.onAfterRendering = function() {
	if (sap.suite.ui.commons.LoadState.Loaded == this.getState() || this.getAnimateTextChange()) {
		jQuery.sap.byId(this.getId()).animate({opacity: "1"}, 1000);
    }
};

sap.suite.ui.commons.MonitoringContent.prototype.setIconSrc = function(sIconSrc) {
    this._oIcon.setSrc(sIconSrc);
    return this;
};

sap.suite.ui.commons.MonitoringContent.prototype.getIconSrc = function() {
    return this._oIcon.getImageSrc();
};

sap.suite.ui.commons.MonitoringContent.prototype.ontap = function(oEvent) {
	this.firePress();
};

sap.suite.ui.commons.MonitoringContent.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

}; // end of sap/suite/ui/commons/MonitoringContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.MonitoringTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.MonitoringTile.
jQuery.sap.declare("sap.suite.ui.commons.MonitoringTile");




/**
 * Constructor for a new MonitoringTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getIconSrc iconSrc} : string</li>
 * <li>{@link #getFooterColor footerColor} : sap.suite.ui.commons.InfoTileTextColor (default: sap.suite.ui.commons.InfoTileTextColor.Positive)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.suite.ui.commons.InfoTile#constructor sap.suite.ui.commons.InfoTile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is the implementation of the InfoTile to show a numeric value and an icon.
 * @extends sap.suite.ui.commons.InfoTile
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.MonitoringTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTile.extend("sap.suite.ui.commons.MonitoringTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"iconSrc" : {type : "string", group : "Misc", defaultValue : null},
		"footerColor" : {type : "sap.suite.ui.commons.InfoTileTextColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileTextColor.Positive}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.MonitoringTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.MonitoringTile.extend
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.MonitoringTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#setValue
 * @function
 */


/**
 * Getter for property <code>iconSrc</code>.
 * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon name parameter and optional collection parameter. The collection parameter is required when the application extended icons are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconSrc</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.suite.ui.commons.MonitoringTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#setIconSrc
 * @function
 */


/**
 * Getter for property <code>footerColor</code>.
 * The color of the tile footer text.
 *
 * Default value is <code>Positive</code>
 *
 * @return {sap.suite.ui.commons.InfoTileTextColor} the value of property <code>footerColor</code>
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#getFooterColor
 * @function
 */

/**
 * Setter for property <code>footerColor</code>.
 *
 * Default value is <code>Positive</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileTextColor} oFooterColor  new value for property <code>footerColor</code>
 * @return {sap.suite.ui.commons.MonitoringTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.MonitoringTile#setFooterColor
 * @function
 */


// Start of sap/suite/ui/commons/MonitoringTile.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.MonitoringTile.prototype.init = function() {
	this._oTileCnt = new sap.suite.ui.commons.MonitoringContent(this.getId() + "-monitoring-tile-cnt");
	this.setContent(this._oTileCnt);
	
    sap.suite.ui.commons.InfoTile.prototype.init.apply(this);
};

sap.suite.ui.commons.MonitoringTile.prototype.setScale = function(sText) {
	this._oTileCnt.setScale(sText);
	return this;
};

sap.suite.ui.commons.MonitoringTile.prototype.getScale = function() {
	return this._oTileCnt.getScale();
};

sap.suite.ui.commons.MonitoringTile.prototype.setValue = function(sText) {
	this._oTileCnt.setValue(sText);
	return this;
};

sap.suite.ui.commons.MonitoringTile.prototype.getValue = function() {
	return this._oTileCnt.getValue();
};

sap.suite.ui.commons.MonitoringTile.prototype.setSize = function(oSize) {
	this._oTileCnt.setSize(oSize);
	return this;
};

sap.suite.ui.commons.MonitoringTile.prototype.getSize = function() {
	return this._oTileCnt.getSize();
};

sap.suite.ui.commons.MonitoringTile.prototype.setState = function(oState) {
	this._oTileCnt.setProperty("state", oState, true);
	this.setProperty("state", oState);
	
	return this;
};

sap.suite.ui.commons.MonitoringTile.prototype.getState = function() {
	return this._oTileCnt.getState();
};

sap.suite.ui.commons.MonitoringTile.prototype.setIconSrc = function(sIconSrc) {
	this._oTileCnt.setIconSrc(sIconSrc);
    return this;
};

sap.suite.ui.commons.MonitoringTile.prototype.getIconSrc = function() {
    return this._oTileCnt.getIconSrc();
};
}; // end of sap/suite/ui/commons/MonitoringTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NewsContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NewsContent.
jQuery.sap.declare("sap.suite.ui.commons.NewsContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NewsContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getContentText contentText} : string</li>
 * <li>{@link #getSubheader subheader} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NewsContent#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays the news content text and subheader in a tile.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.NewsContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NewsContent", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"contentText" : {type : "string", group : "Misc", defaultValue : null},
		"subheader" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"contentTextAgr" : {type : "sap.m.Text", multiple : false, visibility : "hidden"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NewsContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NewsContent.extend
 * @function
 */

sap.suite.ui.commons.NewsContent.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.NewsContent#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NewsContent#setSize
 * @function
 */


/**
 * Getter for property <code>contentText</code>.
 * The content text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>contentText</code>
 * @public
 * @name sap.suite.ui.commons.NewsContent#getContentText
 * @function
 */

/**
 * Setter for property <code>contentText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sContentText  new value for property <code>contentText</code>
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NewsContent#setContentText
 * @function
 */


/**
 * Getter for property <code>subheader</code>.
 * The subheader.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subheader</code>
 * @public
 * @name sap.suite.ui.commons.NewsContent#getSubheader
 * @function
 */

/**
 * Setter for property <code>subheader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubheader  new value for property <code>subheader</code>
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NewsContent#setSubheader
 * @function
 */


/**
 * The event is fired when the user chooses the news content.
 *
 * @name sap.suite.ui.commons.NewsContent#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.NewsContent</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NewsContent</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the news content.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NewsContent</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NewsContent#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.NewsContent</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NewsContent#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NewsContent} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NewsContent#firePress
 * @function
 */


// Start of sap/suite/ui/commons/NewsContent.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.NewsContent.prototype.init = function() {
	this._oCText = new sap.m.Text(this.getId() + "-content-text", {maxLines: 2});
	this._oCText.cacheLineHeight = false;
	this.setAggregation("contentTextAgr", this._oCText);
	this.setTooltip("{AltText}");
};

sap.suite.ui.commons.NewsContent.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.NewsContent.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.NewsContent.prototype.getContentText = function() {
	return this._oCText.getText();
};

sap.suite.ui.commons.NewsContent.prototype.setContentText = function(sText) {
	this._oCText.setText(sText);
	return this;
};

sap.suite.ui.commons.NewsContent.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.NewsContent.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.NewsContent.prototype.getAltText = function() {
	var sAltText = "";
	var bIsFirst = true;
	if (this.getContentText()) {
		sAltText += this.getContentText();
		bIsFirst = false;
	}
	if (this.getSubheader()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getSubheader();
	}
	return sAltText;
};

sap.suite.ui.commons.NewsContent.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

}; // end of sap/suite/ui/commons/NewsContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTaker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTaker.
jQuery.sap.declare("sap.suite.ui.commons.NoteTaker");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTaker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleNotes visibleNotes} : int (default: 2)</li>
 * <li>{@link #getCardViewAllTrigger cardViewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getFilterCriteria filterCriteria} : object</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCards cards} : sap.suite.ui.commons.NoteTakerCard[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:addCard addCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:deleteCard deleteCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:editCard editCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to create and store your notes for further reference.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.NoteTaker
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTaker", { metadata : {

	publicMethods : [
		// methods
		"getAllTags", "setNextCardUid", "uploadAttachment", "setAttachmentData", "handleAttachmentUploadFail", "setNextCardAttachmentUrl"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"visibleNotes" : {type : "int", group : "Misc", defaultValue : 2},
		"cardViewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"filterCriteria" : {type : "object", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	aggregations : {
		"cards" : {type : "sap.suite.ui.commons.NoteTakerCard", multiple : true, singularName : "card"}, 
		"carousel" : {type : "sap.ui.commons.Carousel", multiple : false, visibility : "hidden"}
	},
	events : {
		"addCard" : {}, 
		"deleteCard" : {}, 
		"editCard" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTaker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTaker.extend
 * @function
 */

sap.suite.ui.commons.NoteTaker.M_EVENTS = {'addCard':'addCard','deleteCard':'deleteCard','editCard':'editCard','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>visibleNotes</code>.
 * Number of notes to display.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>visibleNotes</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getVisibleNotes
 * @function
 */

/**
 * Setter for property <code>visibleNotes</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iVisibleNotes  new value for property <code>visibleNotes</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setVisibleNotes
 * @function
 */


/**
 * Getter for property <code>cardViewAllTrigger</code>.
 * The View All link appears in the Note Taker card when length of a card body text exceeds the specified value. The updated value of this property is not applied to the existing cards.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>cardViewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCardViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>cardViewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iCardViewAllTrigger  new value for property <code>cardViewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setCardViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>filterCriteria</code>.
 * A composite object containing criteria for filtering cards in the Note Taker.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>filterCriteria</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getFilterCriteria
 * @function
 */

/**
 * Setter for property <code>filterCriteria</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFilterCriteria  new value for property <code>filterCriteria</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setFilterCriteria
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Defines a path on the server where the attached files are uploaded.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentName
 * @function
 */


/**
 * Getter for aggregation <code>cards</code>.<br/>
 * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
 * 
 * @return {sap.suite.ui.commons.NoteTakerCard[]}
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCards
 * @function
 */


/**
 * Inserts a card into the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *          oCard the card to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the card should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the card is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the card is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#insertCard
 * @function
 */

/**
 * Adds some card <code>oCard</code> 
 * to the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @function
 */

/**
 * Removes an card from the aggregation named <code>cards</code>.
 *
 * @param {int | string | sap.suite.ui.commons.NoteTakerCard} vCard the card to remove or its index or id
 * @return {sap.suite.ui.commons.NoteTakerCard} the removed card or null
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeCard
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cards</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.NoteTakerCard[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeAllCards
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.NoteTakerCard</code> in the aggregation named <code>cards</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.NoteTaker#indexOfCard
 * @function
 */
	

/**
 * Destroys all the cards in the aggregation 
 * named <code>cards</code>.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#destroyCards
 * @function
 */


/**
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model.
 *
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {int} oControlEvent.getParameters.viewAllTrigger The View All link appears in the Note Taker card when length of a body text exceeds the specified value.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for a new card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for a new card.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the name of the file attached to the card.
 * @param {string} oControlEvent.getParameters.uid The unique ID if available.
 * @param {string} oControlEvent.getParameters.attachmentUrl Stores the URL of the file attached to the card.
 * @param {sap.suite.ui.commons.NoteTakerCard} oControlEvent.getParameters.card A newly created card if no data binding is available. If data binding is available, this parameter is empty.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAddCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAddCard
 * @function
 */

/**
 * Fire event addCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'viewAllTrigger' of type <code>int</code> The View All link appears in the Note Taker card when length of a body text exceeds the specified value.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for a new card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for a new card.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the name of the file attached to the card.</li>
 * <li>'uid' of type <code>string</code> The unique ID if available.</li>
 * <li>'attachmentUrl' of type <code>string</code> Stores the URL of the file attached to the card.</li>
 * <li>'card' of type <code>sap.suite.ui.commons.NoteTakerCard</code> A newly created card if no data binding is available. If data binding is available, this parameter is empty.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAddCard
 * @function
 */


/**
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model.
 *
 * @name sap.suite.ui.commons.NoteTaker#deleteCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid The unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachDeleteCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachDeleteCard
 * @function
 */

/**
 * Fire event deleteCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> The unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireDeleteCard
 * @function
 */


/**
 * The event is fired when a new card has been edited.
 *
 * @name sap.suite.ui.commons.NoteTaker#editCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.title The title of the edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card has been edited.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachEditCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachEditCard
 * @function
 */

/**
 * Fire event editCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireEditCard
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed.
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentSelect
 * @function
 */


/**
 * Fire event uploadComplete to attached listeners.
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.response The response message of the String type that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * Fire event uploadComplete to attached listeners.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message of the String type  that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired, when user deletes the attached file.
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired, when user deletes the attached file.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link.
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @param {string} oControlEvent.getParameters.isCardAttachment If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * <li>'isCardAttachment' of type <code>string</code> If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.</li>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentClick
 * @function
 */


/**
 * Returns tags from all cards in the control.
 *
 * @name sap.suite.ui.commons.NoteTaker#getAllTags
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Sets an unique ID of the next card.
 *
 * @name sap.suite.ui.commons.NoteTaker#setNextCardUid
 * @function
 * @param {string} sSUid
 * @type sap.suite.ui.commons.NoteTaker
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Uploads the attached file to the server. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker#uploadAttachment
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Additional data that is sent to the back end service. Data will be transmitted as a value of a hidden input where the name is derived from the name property with suffix -data. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentData
 * @function
 * @param {string} sAdditionalData
 *         Actual additional data.
 * @type sap.suite.ui.commons.NoteTaker
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Must be called when the file upload to the server fail and it is needed to remove the attachment panel from the Feeder card.
 *
 * @name sap.suite.ui.commons.NoteTaker#handleAttachmentUploadFail
 * @function
 * @type sap.suite.ui.commons.NoteTaker
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Sets a URL for downloading the attachment. It must be called in the attachmentUploadComplete event handler.
 *
 * @name sap.suite.ui.commons.NoteTaker#setNextCardAttachmentUrl
 * @function
 * @param {string} sSUrl
 *         The download URL of attachment for a card that will be added when a user chooses the Add button.
 * @type sap.suite.ui.commons.NoteTaker
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/NoteTaker.js
jQuery.sap.require('sap.ui.commons.Carousel'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained


(function() {

   /**
    * The NoteTaker initialization hook.
    * Creates a carousel control initializing it with required parameters.
    * Adds NoteTakerFeeder to the created carousel control.
    * 
    * @private
    */ 
    sap.suite.ui.commons.NoteTaker.prototype.init = function() {
        this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
        this._bFilterTagPopupOpen = false;
        this._bSearchPopupOpen = false;
        var that = this;

        this._carousel = new sap.ui.commons.Carousel({
            id: this.getId() + "-carousel",
            height: "540px"
        });

        this.setAggregation("carousel", this._carousel);

        this._carousel.addContent(this._createFeederAndAddToThis());

        this._notFilteredCards = [];

        this._oHomeButton = new sap.ui.commons.Button({
            id: this.getId() + "-home-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_HOME_TOOLTIP"),
            press: function() {
                that._handleHomeButton();
            }
        });
        this._oHomeButton.addStyleClass("sapSuiteUiCommonsNoteTakerHomeButton");

        this._oFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterTag-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"),
            press : function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterTagButton");

        this._oFilterThumbUpButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-up-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_UP_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbUp();
            }
        });
        this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbUpButton");

        this._oFilterThumbDownButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-down-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_DOWN_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbDown();
            }
        });
        this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbDownButton");

        this._oFilterAllButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterAll-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TOOLTIP"),
            press: function() {
                that._handleResetFilters();
            }
        });
        this._oFilterAllButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterAllButton");

        this._oSearchButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-search-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            press: function() {
                that._handleSearchPopup();
            }
        });
        this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerSearchBtn");
        
        this._oFilterSearchField = new sap.ui.commons.SearchField({
            id: this.getId() + "-filter-searchField",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            showListExpander: false,
            enableFilterMode: true,
            enableListSuggest: false,
            search: function(oEvent) {
                that._handleSearchingByText(oEvent.getParameter("query"));
            }
        });
        this._oFilterSearchField.addStyleClass("suiteUiNtFilterSearchField");

        this._oFilterTagList = new sap.ui.commons.ListBox({
            id: this.getId() + "-filterTag-listBox",
            allowMultiSelect: true,
            visibleItems: 10,
            width: "100%",
            height: "194px"
        });

        this._oCancelFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-cancel-filterTags-button",
            text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
            tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oCancelFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerCancelFilterTagButton");

        this._oApplyFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-apply-filterTags-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
                setTimeout( function() {
                    that._handleFilteringByTags();
                }, 400);
            }
        });
    };

    /**
     * Required adaptations before rendering.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onBeforeRendering = function() {
        this._carousel.setVisibleItems(this.getVisibleNotes());
        this._adjustFilteringButtonsStyle();
        this._feeder.setAttachmentName(this.getAttachmentName());
    };

    /**
     * Required adaptations after rendering.
     *
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onAfterRendering = function() {
        this._adjustPopupState();
        if(!this.getAttachmentUploadUrl()) {
            jQuery.sap.byId(this._feeder._oAddAttachButton.getId()).hide();
        };
        
        jQuery.sap.byId(this._oFilterThumbUpButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbUp);
        jQuery.sap.byId(this._oFilterThumbDownButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbDown);
    };

    /**
     * Destroys this instance of NoteTaker.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.exit = function() {
        this.destroyAggregation("carousel", true);
        this._carousel = null;
        this._oHomeButton.destroy();
        this._oHomeButton = null;
        this._oFilterTagButton.destroy();
        this._oFilterTagButton = null;
        this._oFilterThumbUpButton.destroy();
        this._oFilterThumbUpButton = null;
        this._oFilterThumbDownButton.destroy();
        this._oFilterThumbDownButton = null;
        this._oFilterAllButton.destroy();
        this._oFilterAllButton = null;
        this._oFilterTagList.destroy();
        this._oFilterTagList = null;
        this._oCancelFilterTagButton.destroy();
        this._oCancelFilterTagButton = null;
        this._oApplyFilterTagButton.destroy();
        this._oApplyFilterTagButton = null;
        this._oFilterSearchField.destroy();
        this._oFilterSearchField = null;
        this._oSearchButton.destroy();
        this._oSearchButton = null;
    };
    
    /**
    * Handles the Add button press event generated by NoteTakerFeeder.
    *
    * @param {jQuery.EventObject} oEvent The event object
    *
    * @private
    */    
    sap.suite.ui.commons.NoteTaker.prototype._handleAddNote = function(oEvent) {
        var title = oEvent.getParameter("title");
        var body = oEvent.getParameter("body");
        var timestamp = oEvent.getParameter("timestamp");
        var tags = oEvent.getParameter("tags");
        var thumbUp = oEvent.getParameter("thumbUp");
        var thumbDown = oEvent.getParameter("thumbDown");
        var attachmentFilename = oEvent.getParameter("attachmentFilename");
        
        var eData = {};
        eData.title = title;
        eData.body = body;
        eData.timestamp = timestamp;
        eData.viewAllTrigger = this.getCardViewAllTrigger();
        eData.tags = tags;
        eData.thumbUp = thumbUp;
        eData.thumbDown = thumbDown;
        eData.attachmentFilename = attachmentFilename;
        eData.uid = this._nextCardUid;
        eData.attachmentUrl = this._nextCardAttachmentUrl;

        var oBinding = this.getBinding("cards");
        if (oBinding) {
            //in case of data binding model has to be updated
            this.fireAddCard(eData);
            //sorting should happen when model is updated
            var oTimestampSorter = new sap.ui.model.Sorter("timestamp", true);
            oBinding.sort(oTimestampSorter);
        } else {
            var oNoteCard = new sap.suite.ui.commons.NoteTakerCard();
            oNoteCard.setBody(body);
            oNoteCard.setHeader(title);
            oNoteCard.setTimestamp(timestamp);
            oNoteCard.setViewAllTrigger(this.getCardViewAllTrigger());
            oNoteCard.setTags(tags);
            oNoteCard.setThumbUp(thumbUp);
            oNoteCard.setThumbDown(thumbDown);
            oNoteCard.setAttachmentFilename(attachmentFilename);
            oNoteCard.setUid(this._nextCardUid);
            oNoteCard.setAttachmentUrl(this._nextCardAttachmentUrl);

            this.insertCard(oNoteCard, 0);

            eData.card = oNoteCard;
            this.fireAddCard(eData);
        }
        
        this._nextCardUid = null;
        this._nextCardAttachmentUrl = null;
        
        this._filter();
    };
    
    /**
     * Adds a note card to the cards aggregation.
     * 
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.addCard = function(oCard) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        this._carousel.addContent(oCard);
        this._sortIfNeeded();
        this._spreadTagList();
        return this;
    };
    
    /**
     * Gets a list of the note cards. It does not return NoteTakerFeeder to the list.
     */
    sap.suite.ui.commons.NoteTaker.prototype.getCards = function() {
        return this._carousel.getContent().slice(1);
    };
    
    /**
     * Inserts a note card in the specified position.
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     * @param {int} iIndex. The position of the object it is inserted into.
     */
    sap.suite.ui.commons.NoteTaker.prototype.insertCard = function(oCard, iIndex) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        this._carousel.insertContent(oCard, ++iIndex);
        this._spreadTagList();
        return this;
    };

    /**
     * Removes a specified note card from the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which will be removed.
     * 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeCard = function(oCard) {
        this._spreadTagList();
        return this._carousel.removeContent(oCard);
    };
    
    /**
     * Removes all the note cards from the cards aggregation. 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeAllCards = function() {
        var aContent = this._carousel.removeAllContent();
        this._feeder.setTags([]);
        this._carousel.addContent(this._feeder);
        return aContent.slice(1);
    };
    
    /**
     * Returns a position of the note card in the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which position is returned.
     */
    sap.suite.ui.commons.NoteTaker.prototype.indexOfCard = function(oCard) {
        var iIndex = this._carousel.indexOfContent(oCard);
        return (iIndex > 0) ? --iIndex : -1;
    };

    /**
     * Destroys the cards aggregation. After the cards aggregation is destroyed a new instance of NoteTakerFeeder is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.destroyCards = function() {
        this._carousel.destroyContent();
        this._carousel.addContent(this._createFeederAndAddToThis());
        return this;
    };

    /**
     * The utility method which creates NoteTakerFeeder. 
     * Minimizes code duplication.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._createFeederAndAddToThis = function() {
        var that = this;
        this._feeder = new sap.suite.ui.commons.NoteTakerFeeder({
            id : this.getId() + "-feeder",
            attachmentName : that.getAttachmentName(),
            addNote: function(e){
                that._handleAddNote(e);
            },
            attachmentUploadUrl: that.getAttachmentUploadUrl(),
            attachmentSelect : function(e){
                var eData = {filename : e.getParameter("filename")};
                that.fireAttachmentSelect(eData);
            },
            attachmentUploadComplete : function(e) {
                var eData = {
                        response: e.getParameter("response"),
                        uid : that._nextCardUid
                };
                that.fireAttachmentUploadComplete(eData);
                this._oAttachmentLink.setHref(that._nextCardAttachmentUrl);
                this._oAttachmentLink.rerender();
            },
            attachmentDelete : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid
                };
                
                that.fireAttachmentDelete(eData);
            },
            attachmentClick : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid,
                        isCardAttachment : false
                };
                
                that.fireAttachmentClick(eData);
            }
        });
        this._spreadTagList();
        return this._feeder;
    };

    /**
     * Method for sorting cards inside NoteTaker. 
     * It is called only when databinding is undefined.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._sortIfNeeded = function() {
        var oBinding = this.getBinding();
        if(oBinding == undefined) {
            var aCards = this.getCards();
            aCards.sort(function(oCard1, oCard2) {
                // descending sort
                return oCard2.getTimestamp().getTime() - oCard1.getTimestamp().getTime();
            });
            
            this.removeAllCards();
            
            for(var i = 0; i<aCards.length; i++) {
                this._carousel.addContent(aCards[i]); 
            }
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getAllTags = function() {
        var oBinding = this.getBinding("cards");
        var aCards = oBinding ? this.getCards() : this.getNotFilteredCards();
        var oTagSet = {};
        var aResult = [];
        for (var i = 0; i<aCards.length; i++) {
            var aTags = aCards[i].getTags();
            for (var j = 0; j<aTags.length; j++) {
                if (aTags[j] != "") {
                    oTagSet[aTags[j]] = true;
                }
            }
        }

        for (var tag in oTagSet) {
            aResult.push(tag);
        }

        return aResult.sort();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleDeleteNote = function(oEvent) {
        var oBinding = this.getBinding("cards");
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        
        if(oBinding) {
            this.fireDeleteCard(eData);
        } else {
            var card2Delete = oEvent.getParameter("cardId");
            var allCards = this.getNotFilteredCards();
            for (var i=0; i<allCards.length; i++) {
                if (allCards[i].getId() == card2Delete) {
                    allCards.splice(i, 1);
                }
            }
            this.removeCard(card2Delete);
            this.fireDeleteCard(eData);
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleEditNote = function(oEvent) {
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        eData.tags = oEvent.getParameter("tags");
        
        this.fireEditCard(eData);
        
        this._sortIfNeeded();

        this._spreadTagList();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addDeleteDelegate = function(oCard) {
        var that = this;
        oCard.attachDeleteNote(function(oEvent) { 
            that._handleDeleteNote(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addEditDelegate = function(oCard) {
        var that = this;
        oCard.attachEditNote(function(oEvent) { 
            that._handleEditNote(oEvent);
        });
    };

    /**
     * Handles home button click. Scrolls carousel to its first element that is a feeder.
     */
    sap.suite.ui.commons.NoteTaker.prototype._handleHomeButton = function() {
        this._carousel.setFirstVisibleIndex(0);
        this._feeder._focusDefaultControl();
    };

    /*
     * Override to automatically apply filter
     */
    sap.suite.ui.commons.NoteTaker.prototype.setFilterCriteria = function(oFilterCriteria) {
        this.setProperty("filterCriteria", oFilterCriteria);
        this._filter();
        return this;
    };

    sap.suite.ui.commons.NoteTaker.prototype._toggleFilterTagPopup = function() {
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._bFilterTagPopupOpen = false;
        } else {
            this._addTagsToFilterListBox(this.getAllTags());
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._oFilterTagList.focus();
            this._bFilterTagPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._addTagsToFilterListBox = function(aTags) {
        var aSelectedItems = [];
        var aFilterTags = this._getFilterTags();
        var aListItems = jQuery.map(aTags, function(v, i) {

            // The Array.indexOf() method is not supported in Internet Explorer 8
            if (aFilterTags.indexOf) {
                if (aFilterTags.indexOf(v) >= 0) {
                    aSelectedItems.push(i);
                }
            } else {
                for (var k in aFilterTags) {
                    if (aFilterTags[k] == v) {
                        aSelectedItems.push(i);
                        break;
                    }
                }
            }

            return new sap.ui.core.ListItem({text: v});
        });

        this._oFilterTagList.setItems(aListItems, true);
        this._oFilterTagList.setSelectedIndices(aSelectedItems);
        this._oFilterTagList.rerender();
    };

    sap.suite.ui.commons.NoteTaker.prototype._cloneFilterCriteria = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = {};

        if (oFilterCriteria) {
            for (var pName in oFilterCriteria) {
                oNewCriteria[pName] = oFilterCriteria[pName];
            }
        }

        return oNewCriteria;
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByTags = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSelectedItems = this._oFilterTagList.getSelectedItems();
        var aTags = [];

        for (var i in aSelectedItems) {
            aTags.push(aSelectedItems[i].getText());
        }

        oFilterCriteria.tags = aTags;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbUp = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbUp = !oFilterCriteria.thumbUp;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbDown = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbDown = !oFilterCriteria.thumbDown;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleResetFilters = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = null;

        if (oFilterCriteria && oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            oNewCriteria = {};
            oNewCriteria.search = oFilterCriteria.search;
        }

        this.setFilterCriteria(oNewCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleSearchingByText = function(sSearchText) {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSearchWords = [];
        var aNewWords = sSearchText.split(new RegExp("\\s+"));

        for (var i = 0; i < aNewWords.length; i++) {
            if (aNewWords[i].length > 0) {
                aSearchWords.push(aNewWords[i]);
            }
        }

        oFilterCriteria.search = aSearchWords;

        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilterTagButton = function() {
        var aFilterTags = this._getFilterTags();

        if (aFilterTags.length) {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_SELECTED_TOOLTIP") + ": " + aFilterTags.join(" "));
            this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"));
            this._oFilterTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleSearchPopup = function() {
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").slideToggle();
            this._bSearchPopupOpen = false;
        } else {
            var oPosition = jQuery.sap.byId(this.getId() + "-filter-search-button").position();
            jQuery.sap.byId(this.getId() + "-search-panel").css("right", oPosition.right - 20).slideToggle();
            this._oFilterSearchField.focus();
            this._bSearchPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustSearchButton = function() {
        var sSearchText = this._oFilterSearchField.getValue();

        if (sSearchText.length) {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oSearchButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    /**
     * Extracts array of filtering tags from a filtering criteria object
     */
    sap.suite.ui.commons.NoteTaker.prototype._getFilterTags = function() {
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria && oFilterCriteria.tags && oFilterCriteria.tags.length) {
            return oFilterCriteria.tags;
        } else {
            return [];
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustPopupState = function() {
        var oTagPosition = jQuery.sap.byId(this.getId() + "-filterTag-button").position();
        jQuery.sap.byId(this.getId() + "-filterTag-panel").css("left", oTagPosition.left - 20);
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").show();
        }
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").show();
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringButtonsStyle = function() {
        this._adjustFilterTagButton();
        this._adjustFilteringByThumbUpButtonStyle();
        this._adjustFilteringByThumbDownButtonStyle();
        this._adjustSearchButton();
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbUpButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbUp) {
            this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
            
        } else {
            this._oFilterThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbDownButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbDown) {
            this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getNotFilteredCards = function() {
        if(!this._notFilteredCards) {
            this._notFilteredCards = [];
        }
      return this._notFilteredCards;
    };

    // Update all cards including feeder with new list of tags available to choose.
    sap.suite.ui.commons.NoteTaker.prototype._spreadTagList = function() {
        var aAllTags = this.getAllTags();
        this._feeder.setTags(aAllTags);
        var aCards = this.getCards();
        for (var i=0; i<aCards.length; i++) {
            aCards[i].setAllTags(aAllTags);
        }
    };

    /**
     * Filters note taker cards using filterCriteria property. Two different filtering methods implemented for control
     * with and without binding.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filter = function() {
        var oBinding = this.getBinding("cards");
        var oCard;
        var i;

        if (oBinding) {
            var aModelCards = this.getModel().oData['cards'];

            for (i = 0; i < aModelCards.length; i++) {
                oCard = aModelCards[i];
                oCard.isFiltered = this._applyFilters(oCard);
            }

            this.getModel().updateBindings();
            oBinding.filter([new sap.ui.model.Filter("isFiltered", sap.ui.model.FilterOperator.EQ, false)]);
        } else {
            var aNotFilteredCards = this.getNotFilteredCards();
            var aVisibleCards = this.getCards();

            //for newly created taker notFilteredCards may not be set
            if (aNotFilteredCards.length == 0 && aVisibleCards.length > 0) {
                this.setNotFilteredCards(aVisibleCards);
                aNotFilteredCards = aVisibleCards;
            }

            for (i = 0; i < aNotFilteredCards.length; i++) {
                oCard = aNotFilteredCards[i];
                oCard.setIsFiltered(this._applyFilters(oCard));

                if (oCard.getIsFiltered()) {
                    this.removeCard(oCard);
                } else if (this.indexOfCard(oCard) < 0) {
                    this.addCard(oCard);
                }
            }
        }
    };

    /**
     * Iterates through the list of filtering criteria and checks if given card should be filtered out and thus
     * should be hidden from a user in the note taker.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyFilters = function(oCard) {
        var bFilterPassed = true;

        if (this.getFilterCriteria()) {
            for (var i = 0; (i < this._filters.length) && bFilterPassed; i++) {
                var fnFilter = this._filters[i];
                bFilterPassed = fnFilter.call(this, oCard);
            }
        }

        return !bFilterPassed;    // filter not passed means card is filtered out
    };

    /**
     * Validates whether given card passes filter by thumbs.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter = function(oCard) {
        if (oCard.getThumbUp && oCard.getThumbDown) {
            return this._applyThumbsFilter(oCard.getThumbUp(), oCard.getThumbDown());
        } else {
            return this._applyThumbsFilter(oCard.thumbUp, oCard.thumbDown);
        }
    };

    /**
     * Validates whether given card passes filter by tags.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter = function(oCard) {
        if (oCard.getTags) {
            return this._applyTagsFilter(oCard.getTags());
        } else {
            return this._applyTagsFilter(oCard.tags);
        }
    };

    /**
     * Validates whether given card passes search by text.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch = function(oCard) {
        if (oCard.getBody) {
            return this._applyTextSearch(oCard.getBody(), oCard.getHeader());
        } else {
            return this._applyTextSearch(oCard.body, oCard.header);
        }
    };

    /**
     * Implements filtering criteria by thumbs. Validates whether given parameters conform to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyThumbsFilter = function(bThumbUp, bThumbDown) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.thumbUp && oFilterCriteria.thumbDown) {
            bResult = bThumbUp || bThumbDown;
        } else if (oFilterCriteria.thumbUp) {
            bResult = bThumbUp;
        } else if (oFilterCriteria.thumbDown) {
            bResult = bThumbDown;
        }

        return bResult;
    };

    /**
     * Implements filtering criteria by tags. Validates whether given parameter conforms to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTagsFilter = function(aTags) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.tags && oFilterCriteria.tags.length > 0) {
            var i, j;
            var aTagCriteria = oFilterCriteria.tags;

            bResult = false;     //  assume initially no tag matches

            //iterate since IE8 doesn't support Array.indexOf() method.
            for (i = 0; i < aTagCriteria.length && !bResult; i++) {
                for (j = 0; aTags && (j < aTags.length); j++) {
                    if (aTagCriteria[i] == aTags[j]) {
                        bResult = true;
                        break;
                    }
                }
            }
        }

        return bResult;
    };

    /**
     * Implements searching by text. Validates whether given strings contain text given in filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTextSearch = function(sBody, sHeader) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            var aSearchCriteria = oFilterCriteria.search;

            bResult = false;     // assume initially search found nothing
            sBody = sBody.toLowerCase();
            sHeader = sHeader ? sHeader.toLowerCase() : null;

            for (var i = 0; i < aSearchCriteria.length; i++) {
                var sWord = aSearchCriteria[i].toLowerCase();
                if ((sBody.indexOf(sWord) >= 0) || (sHeader && sHeader.indexOf(sWord) >= 0)) {
                    bResult = true;
                    break;
                }
            }
        }

        return bResult;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentUploadUrl = function(sUrl) {
        this.setProperty("attachmentUploadUrl", sUrl, true);
        this._feeder.setAttachmentUploadUrl(sUrl);
        return this;
    };

    /**
     * Array of methods that implements validation by filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filters = [
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch
    ];
    
    //TODO: add jsdocs
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardUid = function(sUid) {
        this._nextCardUid = sUid;
        return this;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addAttachmentDelegate = function(oCard) {
        var that = this;
        oCard.attachAttachmentClick(function(oEvent) { 
            that._handleCardAttachmentClick(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleCardAttachmentClick = function(oEvent) {
        var eData = {
                filename : oEvent.getParameter("filename"),
                uid :  oEvent.getParameter("uid"),
                isCardAttachment : true
        };
        
        this.fireAttachmentClick(eData);
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.uploadAttachment = function() {
        this._feeder._oFileUploader.upload();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentData = function(sAdditionalData) {
        this._feeder._oFileUploader.setAdditionalData(sAdditionalData);
        return this;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.handleAttachmentUploadFail = function() {
        this._feeder._handleDeleteAttachUI();
        return this;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardAttachmentUrl = function(sUrl) {
        this._nextCardAttachmentUrl = sUrl;
        return this;
    };
}());

}; // end of sap/suite/ui/commons/NoteTaker.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerCard.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTakerCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTimestamp timestamp} : object (default: new Date())</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getViewAllTrigger viewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getUid uid} : string</li>
 * <li>{@link #getIsFiltered isFiltered} : boolean (default: false)</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAllTags allTags} : object (default: [])</li>
 * <li>{@link #getAttachmentFilename attachmentFilename} : string</li>
 * <li>{@link #getAttachmentUrl attachmentUrl} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:editNote editNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:deleteNote deleteNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to store Note Taker card header and body text.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerCard", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"header" : {type : "string", group : "Misc", defaultValue : null},
		"body" : {type : "string", group : "Misc", defaultValue : null},
		"timestamp" : {type : "object", group : "Misc", defaultValue : new Date()},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"viewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"uid" : {type : "string", group : "Misc", defaultValue : null},
		"isFiltered" : {type : "boolean", group : "Misc", defaultValue : false},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"allTags" : {type : "object", group : "Misc", defaultValue : []},
		"attachmentFilename" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentUrl" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"editNote" : {}, 
		"deleteNote" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerCard.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerCard.M_EVENTS = {'editNote':'editNote','deleteNote':'deleteNote','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>header</code>.
 * Stores the Note Taker card header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setHeader
 * @function
 */


/**
 * Getter for property <code>body</code>.
 * Stores the Note Taker card body text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setBody
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Stores a timestamp of the Note Taker card.
 *
 * Default value is <code>new Date()</code>
 *
 * @return {object} the value of property <code>timestamp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is <code>new Date()</code> 
 *
 * @param {object} oTimestamp  new value for property <code>timestamp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTimestamp
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * Contains an array of the String type tags applied to the current card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTags
 * @function
 */


/**
 * Getter for property <code>viewAllTrigger</code>.
 * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>viewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>viewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iViewAllTrigger  new value for property <code>viewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>uid</code>.
 * The card ID. This property should be set by an application developer.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uid</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getUid
 * @function
 */

/**
 * Setter for property <code>uid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUid  new value for property <code>uid</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setUid
 * @function
 */


/**
 * Getter for property <code>isFiltered</code>.
 * Shows whether the note card is hidden by the applied filter.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isFiltered</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getIsFiltered
 * @function
 */

/**
 * Setter for property <code>isFiltered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsFiltered  new value for property <code>isFiltered</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setIsFiltered
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Indicates positive information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Indicates negative information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbDown
 * @function
 */


/**
 * Getter for property <code>allTags</code>.
 * Contains an array of the String type tags available for selection during the card update.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>allTags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAllTags
 * @function
 */

/**
 * Setter for property <code>allTags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oAllTags  new value for property <code>allTags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAllTags
 * @function
 */


/**
 * Getter for property <code>attachmentFilename</code>.
 * Stores the name of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentFilename</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentFilename
 * @function
 */

/**
 * Setter for property <code>attachmentFilename</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentFilename  new value for property <code>attachmentFilename</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentFilename
 * @function
 */


/**
 * Getter for property <code>attachmentUrl</code>.
 * Stores the address of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUrl  new value for property <code>attachmentUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentUrl
 * @function
 */


/**
 * The event is fired when a user chooses the Edit button in the note card.
 *
 * @name sap.suite.ui.commons.NoteTakerCard#editNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.title The title of edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Edit button in the note card.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachEditNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachEditNote
 * @function
 */

/**
 * Fire event editNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireEditNote
 * @function
 */


/**
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
 *
 * @name sap.suite.ui.commons.NoteTakerCard#deleteNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.cardId The HTML ID of a card that needs to be deleted.
 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachDeleteNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachDeleteNote
 * @function
 */

/**
 * Fire event deleteNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'cardId' of type <code>string</code> The HTML ID of a card that needs to be deleted.</li>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireDeleteNote
 * @function
 */


/**
 * The event is fired when a user chooses the attachment download link.
 *
 * @name sap.suite.ui.commons.NoteTakerCard#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {string} oControlEvent.getParameters.url The address of the file attached to the card.
 * @param {string} oControlEvent.getParameters.filename The name of the file attached to the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the attachment download link.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'url' of type <code>string</code> The address of the file attached to the card.</li>
 * <li>'filename' of type <code>string</code> The name of the file attached to the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerCard.js
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.OverlayContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MessageBox'); // unlisted dependency retained


///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.NoteTakerCard.prototype.init = function(){
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    var that = this;
    this._oEditButton = new sap.ui.commons.Button({
        id: this.getId() + "-edit-button",
        press: function(e){
            that._handleEdit();
        },
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_OPEN_EDIT_TOOLTIP")
    });
    this._oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");

    this._oDeleteButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-button",
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press: function() {
            that._handleDelete();
        }
    });
    this._oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");

    this._oViewAllLink = new sap.ui.commons.Link({
    	id: this.getId() + "-viewAll-link",
    	text: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TEXT"),
    	tooltip: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TOOLTIP"),
    	press: function() {
			that._openOverlay();
		}
	});
    
    this._oOverlayCard = new sap.ui.ux3.OverlayContainer(this.getId() + "-overlay", {
        openButtonVisible: false,
        close: function(oEvent) {
            that._handleOverlayCloseEvent(oEvent.getSource());
            oEvent.preventDefault();    // close overlay functionality already handled so prevent default close
        }
    });
    
    this._oOverlayCard.addDelegate({onAfterRendering:function(){
        var oOvrlTmpst = jQuery.sap.byId(that.getId() + "-overlayTimestamp");
        if(oOvrlTmpst) {
            oOvrlTmpst.html(that.getFormattedTimestamp());
        }
    }});
    
    // fixed unwanted scrolling of underlying content
    this._oOverlayCard._superOnsapselect = this._oOverlayCard.onsapselect;
    this._oOverlayCard.onsapselect = function(oEvent) {
        var controlId = oEvent.srcControl.getId();

        if (controlId.indexOf("-overlayBody") < 0 && controlId.indexOf("-inputTag") < 0 && controlId.indexOf("-overlayCardTitle") < 0) {
            oEvent.stopPropagation();
            oEvent.preventDefault();
        }

        //this is needed for Firefox
        setTimeout( function() {
            that._oOverlayCard._superOnsapselect(oEvent);
        }, 10);
    };
    
    this._oOverlayCard.addStyleClass("sapSuiteCommonsNoteTakerCardOverlayWindow");
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype.exit = function() {
	this._oDeleteButton.destroy();
	this._oDeleteButton = null;
	
	this._oEditButton.destroy();
    this._oEditButton = null;

    this._oViewAllLink.destroy();
    this._oViewAllLink = null;
    
    this._oOverlayCard.destroy();
    this._oOverlayCard = null;
};

/**
 * Formats timestamp using medium format style and current locale.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.getFormattedTimestamp = function() {
    var oLocale = sap.ui.getCore().getConfiguration().getLocale();
    var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style: "medium"}, oLocale);

    return oDateFormat.format(this.getTimestamp());
};

/**
 * Closes overlay. If overlay is in edit mode then shows confirmation dialog before closing.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._handleOverlayCloseEvent = function(oControl) {
    if (oControl.bEditMode) {
        var that = this;
        sap.ui.commons.MessageBox.show(this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_MESSAGE"),
                                       sap.ui.commons.MessageBox.Icon.QUESTION,
                                       this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_TITLE"),
                                       [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                                       function(sResult) {
                                           if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                                               that._closeOverlay();
                                               that._oEditButton.focus();
                                           } else {
                                               jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
                                           }
                                       },
                                       sap.ui.commons.MessageBox.Action.NO);
    } else {
        this._closeOverlay();
    }
};

/**
 * Destroys overlay content and closes overlay
 */
sap.suite.ui.commons.NoteTakerCard.prototype._closeOverlay = function() {
    this._oOverlayCard.close();
    this._destroyTagControls();
    this._oOverlayCard.bEditMode = false;
    this._oOverlayCard.destroyContent();
};

sap.suite.ui.commons.NoteTakerCard.prototype._openOverlay = function(bEditMode) {
    var sInitiallyFocusedId;

    if (!this._oOverlayCard.isOpen()) {

        this._oOverlayCard.bThumbUp = this.getThumbUp();
        this._oOverlayCard.bThumbDown = this.getThumbDown();

        this._prepareOverlayLayouts();
        this._prepareOverlayToolbar(bEditMode);
        this._prepareOverlayHeaderBtns(bEditMode);
        this._prepareOverlayBody();
        this._prepareOverlayButtons(bEditMode);

        if (bEditMode) {
            sInitiallyFocusedId = this.getId() + "-overlayBody";
        } else {
            sInitiallyFocusedId = this.getId() + "-overlay-close";
        }

        this._oOverlayCard.open(sInitiallyFocusedId);
        
        jQuery.sap.byId(this.getId() + "-overlay-thumb-down-button").attr("aria-pressed", this.getThumbDown());
        jQuery.sap.byId(this.getId() + "-overlay-thumb-up-button").attr("aria-pressed", this.getThumbUp());
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedBody = function() {
    var aBuffer = [];
    var sText = this.getBody();
    do {
        var iPos = sText.search(/[\s<>]/); //search for whitespace character
        var sSpace = "",
            sWord = "";

        if (iPos < 0) {
            // only 1 word
            sWord = sText;
        } else {
            sWord = sText.slice(0, iPos);
            sSpace = sText.slice(iPos, iPos + 1);
            sText = sText.slice(iPos + 1);
        }

        // check for special strings
        switch (true) {
            case (this._isFullUrl(sWord)) :
                this.wrapFullUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isShortUrl(sWord)) :
                this._wrapShortUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isEmail(sWord)) :
                this._wrapEmail(aBuffer, sWord, sSpace);
                break;

            default :
                // regular word
                //rm.writeEscaped(sWord + sSpace, true);
                aBuffer.push(jQuery.sap.encodeHTML(sWord + sSpace));
        }
    } while(iPos >= 0);
    
    return aBuffer.join("");
};

/**
 * Verifies if the given word is a valid URL address starting with HTTP, HTTPS or FTP protocol.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with http, https or ftp and is a valid URL.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isFullUrl = function(sWord) {
    return /^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord);
};

/**
 * Verifies if the given word is a valid URL address starting with WWW.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with www and is a valid URL for http request.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isShortUrl = function (sWord) {
    return /^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://" + sWord);
};

/**
 * Verifies if the given word is a valid e-mail address.
 * The check is case-insensitive. E-mail address is valid if contains @-sign, and 2-6 chars long domain extension.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word is a valid e-mail address.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isEmail = function (sWord) {
    return /^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord);
};

/*
 * Renders full URL (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.wrapFullUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders short URL (without protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapShortUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML("http://" + sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders Email (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as email address.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapEmail = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = "mailto:' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapBodyToDiv = function(sText) {
    return "<div class='sapSuiteUiCommonsNoteTakerCardBody'>" + sText + "</div>";
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapTagPanelToDiv = function(sText, bEditMode) {
    if(bEditMode) {
        return "<div class='suiteUiNtcOverlayTagPanelEditMode'>" + sText + "</div>";
    }
    else {
        return "<div class='suiteUiNtcOverlayTagPanelViewMode'>" + sText + "</div>";
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleEdit = function() {
    this._openOverlay(true);
};

/*
 * Prepares tag list as HTML code for rendering.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags = function() {
    var aBuffer = [];
    var aTags;

    if (this._oOverlayCard.isOpen()) {
        aTags = this._oOverlayCard._selectedTags;
    } else {
        aTags = this.getTags();
    }

    aBuffer.push("<div id='" + this.getId() + "-tag-list' class='sapSuiteUiCommonsNoteTakerCardTagList'>");

    if (aTags.length==0) {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_EMPTY"));
    } else {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_FULL") + ": ");
        var sTags = jQuery.sap.encodeHTML(aTags.sort().join(" "));
        aBuffer.push("<span title='" + sTags + "'>");
        aBuffer.push(sTags);
        aBuffer.push("</span>");
    }
    aBuffer.push("</div>");
    return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDelete = function(bCloseOverlay) {
    var that = this;
    sap.ui.commons.MessageBox.show(
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_MESSAGE"),
            sap.ui.commons.MessageBox.Icon.QUESTION,
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_TITLE"),
            [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
            function(sResult) {
                if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                    if (bCloseOverlay) {
                        that._closeOverlay();
                    }
                    that._handleDeleteClick();
                }
            },
            sap.ui.commons.MessageBox.Action.NO
    );
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDeleteClick = function() {
    var eData = {};
    eData.uid = this.getUid();
    eData.cardId = this.getId();
    eData.title = this.getHeader();
    eData.timestamp = this.getTimestamp();
    eData.body = this.getBody();
    eData.thumbUp = this.getThumbUp();
    eData.thumbDown = this.getThumbDown();

    this.fireDeleteNote(eData);
};

sap.suite.ui.commons.NoteTakerCard.prototype.setUid = function(sUid) {
    this.setProperty("uid", sUid, true); // no automatic rerendering
    return this;
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapThumbToDiv = function(sId) {
	var sClassName = null;
	var sTooltip = null;
	
	if (this.getThumbUp() && !this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbUp";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
	} else if (!this.getThumbUp() && this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbDown";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
	} else {
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
    }
	var aBuffer = [];
	aBuffer.push("<div");
	if (sId) {
		aBuffer.push(" id='");
		aBuffer.push(sId);
		aBuffer.push("'");
	}
	if (sClassName) {
		aBuffer.push(" class='");
		aBuffer.push(sClassName);
		aBuffer.push("'");

		aBuffer.push(" title='");
		aBuffer.push(sTooltip);
		aBuffer.push("'");
	}
	
	aBuffer.push("></div>");
	
	return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAddTag = function(sTag) {
    this._oOverlayCard._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};

    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._oOverlayCard._selectedTags.push(field);
    }

    // Update tag panel with new values
    var oTagPanel = sap.ui.getCore().byId(this.getId() + '-overlayTagPanel');
    oTagPanel.setContent(this._wrapTagPanelToDiv(this._getFormattedTags(), true));
    this._adjustTagButton();
};

sap.suite.ui.commons.NoteTakerCard.prototype._adjustTagButton = function() {
    var oTagButton = this._oOverlayCard._tagControls.tagButton;
    if (this._oOverlayCard._selectedTags.length) {
        oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._toggleTagPopup = function() {
    var aSelectedTags = this._oOverlayCard._selectedTags;

    if (this._bTagPopupOpen) {
    	jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getAllTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(aSelectedTags.length == 0 ? "" : aSelectedTags.join(" ") + " ");
        this._oOverlayCard._tagControls.tagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._focusDefaultControl = function() {
    this._oOverlayCard._tagControls.tagButton.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerCard.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getAllTags());
        return;
    }

    var aFiltered = jQuery.grep(this.getAllTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });

    this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerCard.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oOverlayCard._tagControls.tagList.setItems(aListItems, true);
    this._oOverlayCard._tagControls.tagList.rerender();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var oTagInput = this._oOverlayCard._tagControls.tagInput;
    var sTemp = oTagInput.getValue();
    var aNewTags = sTemp.split(" ");

    aNewTags.pop();

    if(aNewTags.length == 0) {
        oTagInput.setValue(sSelectedTag + " ");
    } else {
        oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }

    this._oOverlayCard._tagControls.tagList.setSelectedIndex(-1);
    oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._destroyTagControls = function() {
    var tagControls = this._oOverlayCard._tagControls;
    for (var controlName in tagControls) {
        tagControls[controlName].destroy();
    }
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype._createTagSelectorControl = function() {

    var oTagControls = this._oOverlayCard._tagControls;

    var oTagSelectorLayout = new sap.ui.commons.layout.VerticalLayout({
        id: this.getId() + "-selectTag-panel"
    });
    oTagSelectorLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
    oTagSelectorLayout.addStyleClass("sapUiShd");
    oTagControls.tagSelectorLayout = oTagSelectorLayout;

    // Arrow
    oTagSelectorLayout.addContent(new sap.ui.core.HTML(this.getId() + "-selectTag-arrow", {
        content: "<div class='sapSuiteUiCommonsNoteTakerFeederSelectTagArrow' ></div>"
    }));

    // Title
    oTagSelectorLayout.addContent(new sap.ui.core.HTML(this.getId() + "-selectTag-header", {
        content: ["<div class='sapSuiteUiCommonsNoteTakerFeederSelectTagHeader' >",
                    this._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"),
                  "</div>"].join("")
    }));

    oTagSelectorLayout.addContent(oTagControls.tagInput);
    oTagSelectorLayout.addContent(oTagControls.tagList);

    //Buttons
    var oTagSelectorButtonsLayout = new sap.ui.commons.layout.HorizontalLayout();
    oTagSelectorButtonsLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
    oTagSelectorButtonsLayout.addContent(oTagControls.tagApplyBtn);
    oTagSelectorButtonsLayout.addContent(oTagControls.tagCancelBtn);
    oTagSelectorLayout.addContent(oTagSelectorButtonsLayout);

    return oTagSelectorLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareAttachmentPanel = function(bIsInOverlay) {
    var sIdPrefix = bIsInOverlay ? "-overlay" : "";
    var sCssPrefix = bIsInOverlay ? "Overlay" : "";

    var sId = [this.getId(), sIdPrefix, "-attachmentPanel"].join("");
    var oCurrentControl = sap.ui.getCore().byId(sId);
    if (oCurrentControl) {
        oCurrentControl.destroy();
    }

    var oAttachmentLayout = new sap.ui.commons.layout.HorizontalLayout(sId);
    oAttachmentLayout.addStyleClass(["suiteUiNtc", sCssPrefix, "AttachmentPanel"].join(""));
    oAttachmentLayout.addContent( new sap.ui.core.HTML({content: "<div class='suiteUiNtcAttachmentIcon'></div>"}) );
    var oAttachmentLink = new sap.ui.commons.Link({
        id: [this.getId(), sIdPrefix, "-attachmentLink"].join(""),
        text: this.getAttachmentFilename(),
        tooltip: this._rb.getText("NOTETAKERCARD_LINK_ATTACHMENT_TOOLTIP"),
        press: this._handleAttachmentDownload,
        href: this.getAttachmentUrl()
    });
    oAttachmentLink._ntc = this;
    oAttachmentLayout.addContent( oAttachmentLink );
    return oAttachmentLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayLayouts = function() {

    var oTopSectionLayout = new sap.ui.commons.layout.VerticalLayout();
    
    // Header&Timestamp (left side)
    var oHeaderLeftSideLayout = new sap.ui.commons.layout.VerticalLayout();
    oHeaderLeftSideLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayTitle");
    
    // Edit&Delete buttons (right side)
    var oHeaderRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oHeaderRightSideLayout.addStyleClass("sapSuiteUiCommonsNtcHeaderButtons");

	// Title, timestamp and Edit&Delete buttons
    var oHeaderLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayHeader', {
    	content:[oHeaderLeftSideLayout, oHeaderRightSideLayout]
    });
    oHeaderLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayHeader");
    oTopSectionLayout.addContent(oHeaderLayout);

    // Toolbar
    var oToolbarLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayToolbar');
    oToolbarLayout.addStyleClass("suiteUiNtcToolbar");

    // Left side section
    var oToolbarLeftSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarLeftSideLayout.addStyleClass("suiteUiNtcOverlayToolbarLeftPanel");

    // Thumbs section of the toolbar
    var oToolbarRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarRightSideLayout.addStyleClass("suiteUiNtcOverlayToolbarRightPanel");

    // Construct toolbar
    oToolbarLayout.addContent(oToolbarLeftSideLayout);
    oToolbarLayout.addContent(oToolbarRightSideLayout);
    oTopSectionLayout.addContent(oToolbarLayout);
    this._oOverlayCard.addContent(oTopSectionLayout);

    // Body section
    var oBodySectionVerticalLayout = new sap.ui.commons.layout.VerticalLayout();
    oBodySectionVerticalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardContent");
    
    // Buttons section
    var oButtonsHorizontalLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + "-buttons");
    oButtonsHorizontalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonPanel");

    this._oOverlayCard.layouts = {
        topSection: oTopSectionLayout,
        headerLeft: oHeaderLeftSideLayout,
        headerRight: oHeaderRightSideLayout,
        toolbar: oToolbarLayout,
        toolbarLeft: oToolbarLeftSideLayout,
        toolbarRight: oToolbarRightSideLayout,
        body: oBodySectionVerticalLayout,
        buttons: oButtonsHorizontalLayout
    };
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayHeaderBtns = function(bEditMode) {
    var that = this;

    // Edit button
    var oEditButton = new sap.ui.commons.Button(this.getId() + "-editButton", {
    	tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_EDIT_TOOLTIP"),
        press : function() {
            that._fnEdit();
        }
    });
    that._oOverlayCard.layouts.headerRight.addContent(oEditButton, 0);
    if (bEditMode) {
    	oEditButton.setEnabled(false);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    }
    else {
    	oEditButton.setEnabled(true);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    }
    
    // Delete button
    var oDeleteButton = new sap.ui.commons.Button(this.getId() + "-deleteButton", {
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press : function() {
            that._handleDelete(true);
        }
    });
    oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");
    that._oOverlayCard.layouts.headerRight.addContent(oDeleteButton, 1);
    
    // Timestamp
    var oTimeStamp = new sap.ui.commons.Label(this.getId() + "-overlayTimestamp", {
		text : that.getFormattedTimestamp()
		});
	oTimeStamp.addStyleClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
	that._oOverlayCard.layouts.headerLeft.addContent(oTimeStamp, 1);
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayToolbar = function(bEditMode) {

    // Create tag list
    this._oOverlayCard._selectedTags = this.getTags();

    // Attachment panel
    if (this.getAttachmentFilename()!=="") {
        var oAttachmentPanel = this._prepareAttachmentPanel(true);
        this._oOverlayCard.layouts.topSection.addContent(oAttachmentPanel);

        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithAttachment");
    } else {
        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithoutAttachment");
    }
};


sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayBody = function() {
    this._oOverlayCard.addContent(this._oOverlayCard.layouts.body);

};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayButtons = function(bEditMode) {
    var that = this;

    // Close button
    var oCloseButton = new sap.ui.commons.Button(this.getId() + "-closeButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY_TOOLTIP"),
        press : function() {
        	that._handleOverlayCloseEvent(that._oOverlayCard);
        }
    });
    oCloseButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonClose");

    // Save button
    var oSaveButton = new sap.ui.commons.Button(this.getId() + "-saveButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TEXT"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TOOLTIP"),
        press : function() {
          that._fnSave();
        }
    });
    oSaveButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonSave");
    that._oOverlayCard.layouts.buttons.addContent(oCloseButton, 0);
    that._oOverlayCard.layouts.buttons.addContent(oSaveButton, 1);

    if (bEditMode) {
    	oSaveButton.setEnabled(true);
        this._fnCreateInEditMode();
    }
    else {
    	oSaveButton.setEnabled(false);
        this._fnCreateInViewMode();
    }

    this._oOverlayCard.addContent(this._oOverlayCard.layouts.buttons);
};

// Adds components for the View mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInViewMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = false;

    //Title viewer section
    var oCardLabel = new sap.ui.commons.Label(that.getId() + "-overlayCardHeader", {
        text : that.getHeader()
    });
    oCardLabel.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
    that._oOverlayCard.layouts.headerLeft.insertContent(oCardLabel, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Display thumb if any
    var oThumb = new sap.ui.core.HTML({
        id: that.getId() + "-overlay-thumb",
        content: that._wrapThumbToDiv()
    });
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumb);

    // Display body
    var oCardBody = new sap.ui.core.HTML(that.getId() + "-overlayBody");
    oCardBody.setContent(that._wrapBodyToDiv(that._getFormattedBody()));
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Save button in the correct state
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(false);
    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(true);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
};

// Adds components for the Edit mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInEditMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = true;

    // Display editable title
	var oCardTitleField = new sap.ui.commons.TextField(that.getId() + "-overlayCardTitle", {
		maxLength : 50
	});
	oCardTitleField.setValue(that.getHeader());
	oCardTitleField.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
	var oTitleEdit = new sap.ui.commons.InPlaceEdit(that.getId() + "-overlayCardTitleEdit", {
		content: oCardTitleField,
		tooltip: that._rb.getText("NOTETAKERCARD_EDITFIELD_TITLE_TOOLTIP"),
		design: sap.ui.commons.TextViewDesign.H2,
		undoEnabled: false
	});
	oTitleEdit.addStyleClass("sapSuiteUiCommonsNtcdTitleEdit");
    that._oOverlayCard.layouts.headerLeft.insertContent(oTitleEdit, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Create tag selector button
    var oTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-tag-button",
        tooltip: that._rb.getText("NOTETAKERCARD_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");

    var oTagList = new sap.ui.commons.ListBox({
        id: that.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    var oTagInput = new sap.ui.commons.TextField({
        id: that.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });
    oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    var oCancelTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-cancel-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    var oAddTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-add-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(oTagInput.getValue());
            oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    // Store tag controls
    that._oOverlayCard._tagControls = {
        tagButton: oTagButton,
        tagList: oTagList,
        tagInput: oTagInput,
        tagCancelBtn: oCancelTagButton,
        tagApplyBtn: oAddTagButton
    };

    that._oOverlayCard.addContent(that._createTagSelectorControl());

    // Create thumb up button
    var oThumbUpButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-up-button",
        press: function(e){
            that._oOverlayCard.bThumbUp = !that._oOverlayCard.bThumbUp;
            if (that._oOverlayCard.bThumbUp) {
                that._oOverlayCard.bThumbDown = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbUpBtn");

    // Create thumb down button
    var oThumbDownButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-down-button",
        press: function(e){
            that._oOverlayCard.bThumbDown = !that._oOverlayCard.bThumbDown;
            if (that._oOverlayCard.bThumbDown) {
                that._oOverlayCard.bThumbUp = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbDownBtn");

    // Thumb buttons adjustment
    var fnSetThumbsView = function() {
        if (that._oOverlayCard.bThumbUp) {
            oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
        } else {
            oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        }

        if (that._oOverlayCard.bThumbDown) {
            oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
        } else {
            oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        }
        
        jQuery.sap.byId(oThumbUpButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbUp);
        jQuery.sap.byId(oThumbDownButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbDown);
    };

    fnSetThumbsView();

    // Adding toolbar elements
    that._oOverlayCard.layouts.toolbarLeft.insertContent(oTagButton, 0);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbUpButton);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbDownButton);

    // Display editable body
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(true);
    var oCardBody = new sap.ui.commons.TextArea(that.getId() + "-overlayBody" ,{
        liveChange : function(e) {
            var sEnteredText = e.getParameter("liveValue");
            var bEnabled = (sEnteredText != null) && !/^\s*$/.test(sEnteredText);

            if (bEnabled !== oSaveButton.getEnabled()) {
                oSaveButton.setEnabled(bEnabled);
            }
        }
    });
    oCardBody.setValue(that.getBody());
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(false);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnSave = function() {
    var that = this;
    //._ntc;
    var oTitleEdit = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardTitleField = oTitleEdit.getContent();
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    if (oCardBody.getValue()) {
        if(!this.getBinding("body")) {
            that.setHeader(oCardTitleField.getValue());
            that.setBody(oCardBody.getValue());
            that.setTimestamp(new Date());

            that.setThumbUp(that._oOverlayCard.bThumbUp);
            that.setThumbDown(that._oOverlayCard.bThumbDown);
            that.setTags(that._oOverlayCard._selectedTags);
        }

        var eData = {};
        eData.uid = that.getUid();
        eData.title = oCardTitleField.getValue();
        eData.body = oCardBody.getValue();
        eData.timestamp = new Date();
        eData.thumbUp = that._oOverlayCard.bThumbUp;
        eData.thumbDown = that._oOverlayCard.bThumbDown;
        eData.tags = that._oOverlayCard._selectedTags;
        that.fireEditNote(eData);

        that._oOverlayCard.layouts.headerLeft.removeContent(oTitleEdit);
        oTitleEdit.destroy();
        oCardTitleField.destroy();
        that._oOverlayCard.layouts.body.removeContent(oCardBody);
        oCardBody.destroy();

        that._destroyTagControls();
        that._oOverlayCard.layouts.toolbarLeft.destroyContent();
        that._oOverlayCard.layouts.toolbarRight.destroyContent();

        that._fnCreateInViewMode();

        jQuery.sap.byId(that.getId() + "-overlayTimestamp").html(that.getFormattedTimestamp());
        jQuery.sap.byId(that.getId() + "-overlay-close").focus();
    } else {
        //TODO oEditSaveButton.setEnabled(false);
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnEdit = function() {
    var that = this;
    var oCardLabel = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    that._oOverlayCard.layouts.topSection.removeContent(oCardLabel);
    oCardLabel.destroy();
    that._oOverlayCard.layouts.body.removeContent(oCardBody);
    oCardBody.destroy();
    that._oOverlayCard.layouts.toolbarLeft.destroyContent();
    that._oOverlayCard.layouts.toolbarRight.destroyContent();

    that._fnCreateInEditMode();

    that._oOverlayCard.layouts.topSection.rerender();
    //set focus to text area. render it first
    that._oOverlayCard.layouts.body.rerender();
    jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAttachmentDownload = function() {
    var that = this._ntc;

    var eData = {};
    eData.uid = that.getUid();
    eData.url = that.getAttachmentUrl();
    eData.filename = that.getAttachmentFilename();
    
    that.fireAttachmentClick(eData);
};

}; // end of sap/suite/ui/commons/NoteTakerCard.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCardRenderer");



/**
 * @class NoteTakerCard renderer.
 * @static
 */
sap.suite.ui.commons.NoteTakerCardRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerCardRenderer.render = function(rm, oControl){

    // write the HTML into the render manager
    var sFullHeader = oControl.getHeader();
    var sTruncatedHeader = this.getTruncatedHeader(sFullHeader);
    var bShowViewAllLink = oControl.getBody().length > oControl.getViewAllTrigger();
    var bShowAttachment = oControl.getAttachmentFilename() !== "";
    var rh = new sap.suite.ui.commons.util.RenderingHelper(rm);
    var sTooltip = oControl.getTooltip_AsString();

    // main DIV element
    rm.write("<div");
    rm.writeControlData(oControl);
    if (sTooltip) {
        rm.writeAttributeEscaped("title", sTooltip);
    }
    rm.addClass("sapSuiteUiCommonsNoteTakerCard");
    if (oControl.getThumbUp()) {
        rm.addClass("suiteUiNtcPositiveCard");
    }
    if (oControl.getThumbDown()) {
        rm.addClass("suiteUiNtcNegativeCard");
    }
    rm.writeClasses();
    rm.writeAttribute("tabindex", "0");
    
    var ariaInfo = {role : 'region'};
    
    if (!jQuery.browser.msie) {
	    ariaInfo.describedby = [oControl.getId() + "-headerLabel", oControl.getId() + "-timestamp",
	      		              oControl.getId() + "-toolbar", oControl.getId() + "-body"].join(" ");
    }	
    rm.writeAccessibilityState(oControl, ariaInfo);
    rm.write(">");

        // header DIV element
//      rm.write("<div");
//      rm.writeAttribute("id", oControl.getId() + "-header");
//      rm.addClass("sapSuiteUiCommonsNoteTakerCardHeader");
//      rm.writeClasses();
//      rm.write(">");
        rh.writeOpeningTag('div', {
            attributes: {id: oControl.getId() + "-header"},
            classes: ['sapSuiteUiCommonsNoteTakerCardHeader']
        });
//	        rm.write("<div");
//	        rm.writeAttribute("id", oControl.getId() + "-header-buttons");
//          rm.addClass("sapSuiteUiCommonsNoteTakerCardHeaderButtons");
//          rm.writeClasses();
//	        rm.write(">");
            rh.writeOpeningTag('div', {
                attributes: {id: oControl.getId() + "-header-buttons"},
                classes: ['sapSuiteUiCommonsNoteTakerCardHeaderButtons']
            });
            	rm.renderControl(oControl._oEditButton);
	            rm.renderControl(oControl._oDeleteButton);
	        rh.writeClosingTag('div');
	        //rm.write("</div>");

            if (!sFullHeader) {
                rm.write("&nbsp;");
            } else {
                rm.write("<label");
                rm.writeAttribute("id", oControl.getId() + "-headerLabel");
                if (sFullHeader !== sTruncatedHeader) {
                    rm.writeAttributeEscaped("title", sFullHeader);
                }
                rm.write(">");
                    rm.writeEscaped(sTruncatedHeader);
                rm.write("</label>");
            }

            // timestamp DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-timestamp");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl.getFormattedTimestamp());
            rm.write("</div>");
        rm.write("</div>");

        //body container DIV
        rm.write("<div");
        rm.addClass("sapSuiteUiCommonsNoteTakerCardBodyContent");
        rm.writeClasses();
        rm.write(">");

            //tag panel DIV
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-toolbar");
            rm.addClass("suiteUiNtcToolbar");
            rm.writeClasses();
            rm.write(">");
                this.renderToolbar(rm, oControl);
            rm.write("</div>");

            //attachment bar DIV
            if (bShowAttachment) {
                rm.renderControl(oControl._prepareAttachmentPanel(false));
            }

            // body DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-body");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardBody");
            if (bShowAttachment && bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAllAttach");
            } else if (bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAll");
            } else if (bShowAttachment) {
                rm.addClass("sapSuiteUiCommonsNtcBodyAttach");
            }
            rm.writeClasses();
            rm.write(">");
                rm.write(oControl._getFormattedBody());
            rm.write("</div>");

            // view all DIV element
            if (bShowViewAllLink) {
                rm.write("<div");
                rm.writeAttribute("id", oControl.getId() + "-viewAll");
                rm.addClass("sapSuiteUiCommonsNoteTakerCardViewAll");
                rm.writeClasses();
                rm.write(">&nbsp;");
                    oControl._oViewAllLink.addStyleClass("sapSuiteUiCommonsNoteTakerCardViewAllLink");
                    rm.renderControl(oControl._oViewAllLink);
                rm.write("</div>");
            }

        rm.write("</div>"); // body container div

    rm.write("</div>"); // card div
};

/*
 * Returns truncated version of the header if it exceeds iLength
 */
sap.suite.ui.commons.NoteTakerCardRenderer.getTruncatedHeader = function(sFullHeader) {
    var iLength = 20;
    var sTerminator = "...";
    if (sFullHeader && sFullHeader.length > iLength) {
        return sFullHeader.substr(0, iLength - sTerminator.length) + sTerminator;
    } else {
        return sFullHeader;
    }
};

sap.suite.ui.commons.NoteTakerCardRenderer.renderToolbar = function(rm, oControl) {
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-left-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardLeftPanel");
    if(oControl.getThumbUp() || oControl.getThumbDown()) {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardWithThumbs"); 
    } else {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardNoThumbs");
    }
    rm.writeClasses();
    rm.write(">");
    rm.write(oControl._getFormattedTags());
    rm.write("</div>");
    
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-right-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardRightPanel");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-thumb");
        
        var thumbTooltip = "";
        if(oControl.getThumbUp() && !oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbUp");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        } else if(!oControl.getThumbUp() && oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbDown");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        }
        rm.write(">");
        
        //ARIA info
        rm.write("<span");
        rm.writeAttribute("style", "visibility: hidden; display: none;");
        rm.write(">");
        rm.writeEscaped(thumbTooltip);
        rm.write("</span>");
        
        rm.write("</div>");
    rm.write("</div>");
};
}; // end of sap/suite/ui/commons/NoteTakerCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerFeeder.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTakerFeeder.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:addNote addNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to enter a quick note and N note cards.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerFeeder", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"body" : {type : "string", group : "Data", defaultValue : null},
		"title" : {type : "string", group : "Data", defaultValue : null},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	aggregations : {
		"bodyArea" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"titleInput" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"fileUploader" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"tagInput" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {
		"addNote" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerFeeder with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerFeeder.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerFeeder.M_EVENTS = {'addNote':'addNote','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>body</code>.
 * The text inside the note card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setBody
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * This text is the header of a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTitle
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * The list of tags selected for addition to a new note card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTags
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Sets positive indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Sets negative indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbDown
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Sets the upload attachment URL for a new card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentName
 * @function
 */


/**
 * The event is fired when a user chooses the Add button in the control.
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#addNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {boolean} oControlEvent.getParameters.thumbUp If set to true, a new card should be marked as positive one.
 * @param {boolean} oControlEvent.getParameters.thumbDown If set to true, a new card should be marked as negative one.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the attachment file name for a new card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Add button in the control.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAddNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAddNote
 * @function
 */

/**
 * Fire event addNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'thumbUp' of type <code>boolean</code> If set to true, a new card should be marked as positive one.</li>
 * <li>'thumbDown' of type <code>boolean</code> If set to true, a new card should be marked as negative one.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the attachment file name for a new card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAddNote
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed.
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentSelect
 * @function
 */


/**
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server.
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.response The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired when a user presses the Delete button in the Feeder card.
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the Delete button in the Feeder card.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link.
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerFeeder.js
jQuery.sap.require('sap.ui.ux3.ToolPopup'); // unlisted dependency retained

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.NoteTakerFeeder.prototype.init = function() {
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    this._selectedTags = [];
    this._bTagPopupOpen = false;
    var that = this;

    this._oAddButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TEXT"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TOOLTIP"),
        press: function() {
            that._handleAdd();
        }
    });
    this._oAddButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederHeaderAddButton");

    this._oTagList = new sap.ui.commons.ListBox({
        id: this.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    this._oTagInput = new sap.ui.commons.TextField({
        id: this.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });

    this.setAggregation("tagInput", this._oTagInput);

    this._oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    this._oCancelTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-cancel-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    this._oAddTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(that._oTagInput.getValue());
            that._oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    this._oTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-tag-button",
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");
    
    this._oTitle = new sap.ui.commons.TextField({
        id : this.getId() + "-title-field",
        placeholder : this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER") + "...",
        maxLength : 50
    });
    
    this.setAggregation("titleInput", this._oTitle);
    
    this._oBody = new sap.ui.commons.TextArea({
        id : this.getId() + "-body-field",
        placeholder : this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY") + "...",
        liveChange : function(e) {
            that._setAddButtonEnabled(e.mParameters["liveValue"], null);
        }
    });
    
    this.setAggregation("bodyArea", this._oBody);
    
    this._oThumbUpButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-up-button",
        press: function(e){
            that._handleThumbUpButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbUpButton");
    
    this._oThumbDownButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-down-button",
        press: function(e){
            that._handleThumbDownButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbDownButton");
    
    this._oFileUploader = new sap.ui.commons.FileUploader({
        id: this.getId() + "-attach",
        uploadOnChange: false,
        name : this.getAttachmentName(),
        change: function (oEvent) {
            that._disableAddAttachBtn();
            var name = oEvent.getParameter("newValue");
            that._oAttachmentLink.setText(name);
            that._oAttachmentLink.rerender();
            that._handleAddAttachUI();

            var eData = {};
            eData.filename = name;
            that.fireAttachmentSelect(eData);
            that._oTitle.focus();
        },
        uploadComplete : function(oEvent){
            that._handleUploadComplete(oEvent);
        }
    });
    
    this._oFileUploader.oBrowse.setText("");
    
    this.setAggregation("fileUploader", this._oFileUploader);
    
    this._oAddAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-attach-button",
        press: function(e) {
            jQuery.sap.domById(that._oFileUploader.getId() + "-fu").click();
        },
        tooltip: that._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP")
    });
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    
    this._oAttachmentLoadingLabel = new sap.ui.commons.Label({
        id : this.getId() + "-loading-label",
        text: this._rb.getText("NOTETAKERFEEDER_LABEL_ATTACHMENT_LOADING") + "..."
    });

    this._oDeleteAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-attach-button",
        lite : true,
        press : function(e) {
            that._handleDeleteAttachUI();
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentDelete(eData);
            
        },
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_DELETE_ATTACHMENT")
    });
    
    this._oAttachmentLink = new sap.ui.commons.Link({
        id: this.getId() + "-attachmentLink",
        tooltip: this._rb.getText("NOTETAKERFEEDER_LINK_ATTACHMENT_TOOLTIP"),
        press: function(e) {
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentClick(eData);
        },
        width: "200px"
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.exit = function() {
    this._oAddButton.destroy();
    this._oTitle.destroy();
    this._oBody.destroy();
    this._oTagButton.destroy();
    this._oTagList.destroy();
    this._oTagInput.destroy();
    this._oCancelTagButton.destroy();
    this._oAddTagButton.destroy();
    this._oThumbUpButton.destroy();
    this._oThumbDownButton.destroy();
    this._oFileUploader.destroy();
    this._oAddAttachButton.destroy();
    this._oAttachmentLoadingLabel.destroy();
    this._oDeleteAttachButton.destroy();   
    this._oAttachmentLink.destroy();
    
    this._oAddButton = null;
    this._oTitle = null;
    this._oBody = null;
    this._oTagButton = null;
    this._oTagList = null;
    this._oTagInput = null;
    this._oCancelTagButton = null;
    this._oAddTagButton = null;
    this._oThumbUpButton = null;
    this._oThumbDownButton = null;
    this._oFileUploader = null;
    this._oAddAttachButton = null;
    this._oAttachmentLoadingLabel = null;
    this._oDeleteAttachButton = null;
    this._oAttachmentLink = null;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAdd = function() {
    if (this.getBody()) {
        var eData = new Object();
        eData.title = this.getTitle();
        eData.body = this.getBody();
        eData.timestamp = this._getTimestamp();
        eData.tags = this._selectedTags;
        eData.thumbUp = this.getThumbUp();
        eData.thumbDown = this.getThumbDown();
        eData.attachmentFilename = this._oFileUploader.getValue();
        
        this.setTitle("");
        this.setBody("");
        
        this.setThumbDown(false);
        this.setThumbUp(false);
        
        this._oFileUploader.setValue("");
        this._enableAddAttachBtn();
        this.fireAddNote(eData);
        jQuery(this._oFileUploader.oFileUpload).show();
        this._handleClearTag();
    } else {
        this._setAddButtonEnabled(this.getBody());
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._getTimestamp = function() {
    return new Date();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTitle = function(sTitle) {
    this._oTitle.setValue(sTitle);
    return this;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getTitle = function() {
    return jQuery.sap.byId(this.getId() + "-title-field").hasClass('sapSuiteUiCommonsPlaceholder') ? "" : this._oTitle.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setBody = function(sBodyText) {
    this._oBody.setValue(sBodyText);
    return this;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getBody = function() {
    return this._isBodyPlaceholderActive() ? "" : this._oBody.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._applyPlaceholder = function(){
    jQuery('[data-placeholder]').focus(
        function() {
            var input = jQuery(this);
            if (input.hasClass('sapSuiteUiCommonsPlaceholder')) {
                input.val('');
                input.removeClass('sapSuiteUiCommonsPlaceholder');
            }
        }
    ).blur(
        function() {
            var input = jQuery(this);
            if (jQuery.sap.equal(input.val(),'') || jQuery.sap.equal(input.val(), input.attr('data-placeholder'))) {
                input.addClass('sapSuiteUiCommonsPlaceholder');
                input.val(input.attr('data-placeholder'));
            }
        }
    ).blur();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._isBodyPlaceholderActive = function() {
    return jQuery.sap.byId(this.getId() + "-body-field").hasClass('sapSuiteUiCommonsPlaceholder');
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAddButtonEnabled = function(sBody, notRerender) {
    var bEnabled = sBody != null && !this._isBodyPlaceholderActive() && !/^\s*$/.test(sBody);
    if (bEnabled !== this._oAddButton.getEnabled()) {
        this._oAddButton.setEnabled(bEnabled);
        if (!notRerender) {
            this._oAddButton.rerender();
        }
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustUploaderForIe = function() {
    this._oFileUploader.superOnkeydown = this._oFileUploader.onkeydown;
    this._oFileUploader.onkeydown = function(oEvent) {
    	var iKeyCode = oEvent.keyCode,
		eKC = jQuery.sap.KeyCodes;
    	if (iKeyCode != eKC.SPACE && iKeyCode != eKC.ENTER) {
    		this.superOnkeydown(oEvent);
    	}
    };
    
    jQuery(this._oFileUploader.oFilePath.getDomRef()).hide();
    jQuery(this._oFileUploader.oBrowse.getDomRef()).hide();
    jQuery(this._oAddAttachButton.getDomRef()).attr("tabindex", "-1");
    
    var that = this;
    jQuery(this._oFileUploader.oFileUpload).attr("tabindex", "0").attr("title", this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"))
    .focus(function() {
    	this.hasFocus = true;
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }).focusout(function() {
    	this.hasFocus = false;
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    }).hover(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }, function() {
    	if (!this.hasFocus) {
    		jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    	}
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }).mousedown(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected")
    	.addClass("sapUiBtnAct");
    }).mouseup(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    });
    
    jQuery(this._oFileUploader.oFileUpload).keydown(function(oEvent) {
		var eKC = jQuery.sap.KeyCodes;
    	if (oEvent.keyCode == eKC.TAB) {
    		if (oEvent.shiftKey) {
    			that._oThumbDownButton.focus();
    		} else {
    			that._oTitle.focus();
    		}
    		oEvent.preventDefault();
    		oEvent.stopPropagation();    		
    	}
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAriaInfo = function() {
    jQuery.sap.byId(this._oThumbUpButton.getId()).attr("aria-pressed", this.getThumbUp());
    jQuery.sap.byId(this._oThumbDownButton.getId()).attr("aria-pressed", this.getThumbDown());

    jQuery.sap.byId(this._oTitle.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER"));
    jQuery.sap.byId(this._oBody.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY"));
    jQuery(this._oFileUploader.oFileUpload).attr("aria-label", this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"));
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onAfterRendering = function() {
    this._applyPlaceholder();
    this._adjustPopupState();
    
    if (this._oFileUploader.getValue()) {
        jQuery.sap.byId(this.getId() + "-attachment-panel").show();
        jQuery.sap.byId(this.getId() + "-attachment-loading").hide();
        jQuery.sap.byId(this.getId() + "-attachment-delete").show();
    }
    
    jQuery.sap.byId(this._oFileUploader.getId()).addClass("sapSuiteUiCommonsNtfUploader");
    
    this._setAriaInfo();
    
    if (jQuery.browser.msie) {
    	this._adjustUploaderForIe();
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onBeforeRendering = function() {
    this._setAddButtonEnabled(this.getBody(), true);
    this._setThumbButtonsView();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getFormattedTags = function() {
    return sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags();  
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustPopupState = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").show();
    }
}; 

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddTag = function(sTag) {
    this._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};
    
    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._selectedTags.push(field);
    }
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustTagButton = function() {
    if (this._selectedTags.length) {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_SELECTED_TOOLTIP") + ": " + this._selectedTags.join(" "));
        this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"));
        this._oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleClearTag = function() {
    if(this._oTagInput) {
        this._oTagInput.setValue("");    
    }
    
    if(this._oTagList) {
        this._oTagList.clearSelection();    
    }
    
    this._selectedTags = [];
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTags = function(aTags) {
    this.setProperty("tags", aTags, true); // no automatic rerendering
    return this;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._toggleTagPopup = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(this._selectedTags.length == 0 ? "" : this._selectedTags.join(" ") + " ");
        this._oTagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._focusDefaultControl = function() {
    this._oTagButton.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getTags());
        return;
    }
    
   var aFiltered = jQuery.grep(this.getTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });
   
   this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oTagList.setItems(aListItems, true);
    this._oTagList.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var sTemp = this._oTagInput.getValue();
    var aNewTags = sTemp.split(" ");
    
    aNewTags.pop();
    
    if(aNewTags.length == 0) {
        this._oTagInput.setValue(sSelectedTag + " ");
    } else {
        this._oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }
    
    this._oTagList.setSelectedIndex(-1);
    this._oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setThumbButtonsView = function() {
    if (this.getThumbUp()) {
        this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
    
    if (this.getThumbDown()) {
        this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbUpButtonPress = function() {
    this.setThumbUp(!this.getThumbUp());
    if (this.getThumbUp()) {
        this.setThumbDown(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbDownButtonPress = function() {
    this.setThumbDown(!this.getThumbDown());
    if (this.getThumbDown()) {
        this.setThumbUp(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._disableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(false);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.setTooltip("");
    
    this._oAddAttachButton.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._enableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(true);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"));
    this._oAddAttachButton.rerender();
    
    if (jQuery.browser.msie) {
    	jQuery.sap.byId(this._oAddAttachButton.getId()).attr("tabindex", "-1");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddAttachUI = function() {
	jQuery(this._oFileUploader.oFileUpload).hide();
    jQuery.sap.byId(this.getId() + "-attachment-loading").show("fast");
    jQuery.sap.byId(this.getId() + "-body").animate({
        height:"332px"
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-panel").slideDown({duration: 300, queue: false});
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleDeleteAttachUI = function() {
    jQuery(this._oFileUploader.oFileUpload).show();
    jQuery.sap.byId(this.getId() + "-body").animate({
        height:"352px"
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-delete").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-panel").hide({duration: 300, queue: false});
    
    this._enableAddAttachBtn();
    
    this._oFileUploader.setValue("");
    this._oFileUploader.addStyleClass("sapSuiteUiCommonsNtfUploader");
    this._oAttachmentLink.setText("");
    this._oAddAttachButton.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.handleUploadResponse = function(sResponse) {
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleUploadComplete = function(oEvent) {
    jQuery.sap.byId(this.getId() + "-attachment-loading").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-delete").show("fast");
    
    var eData = {
        response: oEvent.getParameter("response")
    };
    this.fireAttachmentUploadComplete(eData);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setAttachmentUploadUrl = function(sUrl) {
    this._oFileUploader.setUploadUrl(sUrl);
    return this;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getAttachmentUploadUrl = function() {
    return this._oFileUploader.getUploadUrl();
};

}; // end of sap/suite/ui/commons/NoteTakerFeeder.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NumericContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NumericContent.
jQuery.sap.declare("sap.suite.ui.commons.NumericContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NumericContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: sap.suite.ui.commons.InfoTileSize.Auto)</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getValueColor valueColor} : sap.suite.ui.commons.InfoTileValueColor (default: sap.suite.ui.commons.InfoTileValueColor.Neutral)</li>
 * <li>{@link #getIndicator indicator} : string</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.LoadState (default: sap.suite.ui.commons.LoadState.Loaded)</li>
 * <li>{@link #getAnimateTextChange animateTextChange} : boolean (default: true)</li>
 * <li>{@link #getFormatterValue formatterValue} : boolean (default: false)</li>
 * <li>{@link #getTruncateValueTo truncateValueTo} : int (default: 4)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getNullifyValue nullifyValue} : boolean (default: true)</li>
 * <li>{@link #getIconDescription iconDescription} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NumericContent#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * NumericContent to be used in tile or in other place where need to show numeric values with sematic colors and deviations.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.NumericContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NumericContent", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileSize.Auto},
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"scale" : {type : "string", group : "Misc", defaultValue : null},
		"valueColor" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : sap.suite.ui.commons.InfoTileValueColor.Neutral},
		"indicator" : {type : "string", group : "Misc", defaultValue : null},
		"state" : {type : "sap.suite.ui.commons.LoadState", group : "Misc", defaultValue : sap.suite.ui.commons.LoadState.Loaded},
		"animateTextChange" : {type : "boolean", group : "Misc", defaultValue : true},
		"formatterValue" : {type : "boolean", group : "Misc", defaultValue : false},
		"truncateValueTo" : {type : "int", group : "Misc", defaultValue : 4},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"nullifyValue" : {type : "boolean", group : "Misc", defaultValue : true},
		"iconDescription" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NumericContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NumericContent.extend
 * @function
 */

sap.suite.ui.commons.NumericContent.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>size</code>.
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setSize
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setValue
 * @function
 */


/**
 * Getter for property <code>scale</code>.
 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>scale</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getScale
 * @function
 */

/**
 * Setter for property <code>scale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sScale  new value for property <code>scale</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setScale
 * @function
 */


/**
 * Getter for property <code>valueColor</code>.
 * The semantic color of the value.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>valueColor</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getValueColor
 * @function
 */

/**
 * Setter for property <code>valueColor</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oValueColor  new value for property <code>valueColor</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setValueColor
 * @function
 */


/**
 * Getter for property <code>indicator</code>.
 * The indicator arrow that shows value deviation.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>indicator</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getIndicator
 * @function
 */

/**
 * Setter for property <code>indicator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIndicator  new value for property <code>indicator</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setIndicator
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Indicates the load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {sap.suite.ui.commons.LoadState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {sap.suite.ui.commons.LoadState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setState
 * @function
 */


/**
 * Getter for property <code>animateTextChange</code>.
 * If set to true, the change of the value will be animated.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>animateTextChange</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getAnimateTextChange
 * @function
 */

/**
 * Setter for property <code>animateTextChange</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAnimateTextChange  new value for property <code>animateTextChange</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setAnimateTextChange
 * @function
 */


/**
 * Getter for property <code>formatterValue</code>.
 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>formatterValue</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getFormatterValue
 * @function
 */

/**
 * Setter for property <code>formatterValue</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFormatterValue  new value for property <code>formatterValue</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setFormatterValue
 * @function
 */


/**
 * Getter for property <code>truncateValueTo</code>.
 * The number of characters to display for the value property.
 *
 * Default value is <code>4</code>
 *
 * @return {int} the value of property <code>truncateValueTo</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getTruncateValueTo
 * @function
 */

/**
 * Setter for property <code>truncateValueTo</code>.
 *
 * Default value is <code>4</code> 
 *
 * @param {int} iTruncateValueTo  new value for property <code>truncateValueTo</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setTruncateValueTo
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setIcon
 * @function
 */


/**
 * Getter for property <code>nullifyValue</code>.
 * If set to true, the omitted value property is set to 0.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>nullifyValue</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getNullifyValue
 * @function
 */

/**
 * Setter for property <code>nullifyValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bNullifyValue  new value for property <code>nullifyValue</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setNullifyValue
 * @function
 */


/**
 * Getter for property <code>iconDescription</code>.
 * Description of an icon that is used in the tooltip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconDescription</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getIconDescription
 * @function
 */

/**
 * Setter for property <code>iconDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconDescription  new value for property <code>iconDescription</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setIconDescription
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the chart. If it is not set, the size of the control is defined by the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.NumericContent#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#setWidth
 * @function
 */


/**
 * The event is fired when the user chooses the numeric content.
 *
 * @name sap.suite.ui.commons.NumericContent#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.NumericContent</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NumericContent</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the numeric content.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NumericContent</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.NumericContent</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericContent#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NumericContent} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NumericContent#firePress
 * @function
 */


// Start of sap/suite/ui/commons/NumericContent.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.suite.ui.commons.NumericContent.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	this.setTooltip("{AltText}");
};


sap.suite.ui.commons.NumericContent.prototype.onAfterRendering = function() {
	if (sap.suite.ui.commons.LoadState.Loaded == this.getState() || this.getAnimateTextChange()) {
		jQuery.sap.byId(this.getId()).animate({opacity: "1"}, 1000);
	}
};

sap.suite.ui.commons.NumericContent.prototype.setIcon = function(sIcon) {
    var bValueChanged = !jQuery.sap.equal(this.getIcon(), sIcon);

    if (bValueChanged) {
        if (this._oIcon) {
            this._oIcon.destroy();
            this._oIcon = undefined;
        }

        if (sIcon) {
            this._oIcon = sap.ui.core.IconPool.createControlByURI( {
                id: this.getId() + "-icon-image",
                src: sIcon,
            }, sap.m.Image);

            this._oIcon.addStyleClass("sapSuiteUiCommonsNCIconImage");
        }
    }

    return this.setProperty("icon", sIcon);
};

sap.suite.ui.commons.NumericContent.prototype.ontap = function(oEvent) {
    if (sap.ui.Device.browser.internet_explorer) {
        this.$().focus();
    }
    this.firePress();
};

sap.suite.ui.commons.NumericContent.prototype.onkeyup = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        this.firePress();
        oEvent.preventDefault();
    }
};


sap.suite.ui.commons.NumericContent.prototype.onkeydown = function(oEvent) {
    if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
        oEvent.preventDefault();
    }
};

sap.suite.ui.commons.NumericContent.prototype.exit = function() {
    if (this._oIcon) {
        this._oIcon.destroy();
    }
};

sap.suite.ui.commons.NumericContent.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	sap.ui.core.Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
	
	if (this.hasListeners("press")) {
		this.$().attr("tabindex", 0).addClass("sapSuiteUiCommonsPointer");
	}
	
	return this;
};

sap.suite.ui.commons.NumericContent.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	sap.ui.core.Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
	
	if (!this.hasListeners("press")) {
		this.$().removeAttr("tabindex").removeClass("sapSuiteUiCommonsPointer");
	}
	return this;
};

sap.suite.ui.commons.NumericContent.prototype.getAltText = function() {
	var sValue = this.getValue();
	var sScale = this.getScale();
	var sEmptyValue = this.getNullifyValue() ? "0" : "";
	
	var sMeaning = this._rb.getText( ("SEMANTIC_COLOR_"+ this.getValueColor()).toUpperCase() );
	var sAltText = "";
	if(this.getIconDescription()) {
		sAltText = sAltText.concat(this.getIconDescription());
		sAltText = sAltText.concat("\n"); 
	}
	
	sAltText = sAltText.concat(sValue ? sValue + sScale : sEmptyValue);
	sAltText = sAltText.concat("\n"); 
	
	if(this.getIndicator() && this.getIndicator() != sap.suite.ui.commons.DeviationIndicator.None) {
		sAltText = sAltText.concat(this._rb.getText( ("NUMERICCONTENT_DEVIATION_" + this.getIndicator()).toUpperCase()) );
		sAltText = sAltText.concat("\n");
	}
	
	sAltText = sAltText.concat(sMeaning);
	
	return sAltText;
};

sap.suite.ui.commons.NumericContent.prototype.getTooltip_AsString  = function() {
	var oTooltip = this.getTooltip();
	var sTooltip = this.getAltText();
	
	if(typeof oTooltip === "string" || oTooltip instanceof String) {
		sTooltip = oTooltip.split("{AltText}").join(sTooltip);
		return sTooltip;
	}
	return oTooltip ? oTooltip : "";
};

sap.suite.ui.commons.NumericContent.prototype._parseFormattedValue = function(sValue) {
	return {
		scale: sValue.replace(/[^a-z ا-ي]/gi, "").trim(),
	  	value: sValue.replace(/([+-.,\d]*).*/g, "$1").trim()
	};
};
}; // end of sap/suite/ui/commons/NumericContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NumericTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NumericTile.
jQuery.sap.declare("sap.suite.ui.commons.NumericTile");




/**
 * Constructor for a new NumericTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getUnit unit} : string</li>
 * <li>{@link #getValueColor valueColor} : sap.suite.ui.commons.InfoTileValueColor</li>
 * <li>{@link #getIndicator indicator} : sap.suite.ui.commons.DeviationIndicator</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.suite.ui.commons.InfoTile#constructor sap.suite.ui.commons.InfoTile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is the implementation of the InfoTile to show a numeric value.
 * @extends sap.suite.ui.commons.InfoTile
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.NumericTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTile.extend("sap.suite.ui.commons.NumericTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"scale" : {type : "string", group : "Misc", defaultValue : null},
		"unit" : {type : "string", group : "Misc", defaultValue : null},
		"valueColor" : {type : "sap.suite.ui.commons.InfoTileValueColor", group : "Misc", defaultValue : null},
		"indicator" : {type : "sap.suite.ui.commons.DeviationIndicator", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NumericTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NumericTile.extend
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The actual value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.NumericTile#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.NumericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericTile#setValue
 * @function
 */


/**
 * Getter for property <code>scale</code>.
 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>scale</code>
 * @public
 * @name sap.suite.ui.commons.NumericTile#getScale
 * @function
 */

/**
 * Setter for property <code>scale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sScale  new value for property <code>scale</code>
 * @return {sap.suite.ui.commons.NumericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericTile#setScale
 * @function
 */


/**
 * Getter for property <code>unit</code>.
 * The percent sign, the currency symbol, or the unit of measure.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>unit</code>
 * @public
 * @name sap.suite.ui.commons.NumericTile#getUnit
 * @function
 */

/**
 * Setter for property <code>unit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.suite.ui.commons.NumericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericTile#setUnit
 * @function
 */


/**
 * Getter for property <code>valueColor</code>.
 * The semantic color of the value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.suite.ui.commons.InfoTileValueColor} the value of property <code>valueColor</code>
 * @public
 * @name sap.suite.ui.commons.NumericTile#getValueColor
 * @function
 */

/**
 * Setter for property <code>valueColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileValueColor} oValueColor  new value for property <code>valueColor</code>
 * @return {sap.suite.ui.commons.NumericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericTile#setValueColor
 * @function
 */


/**
 * Getter for property <code>indicator</code>.
 * The indicator arrow that shows value deviation.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.suite.ui.commons.DeviationIndicator} the value of property <code>indicator</code>
 * @public
 * @name sap.suite.ui.commons.NumericTile#getIndicator
 * @function
 */

/**
 * Setter for property <code>indicator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.suite.ui.commons.DeviationIndicator} oIndicator  new value for property <code>indicator</code>
 * @return {sap.suite.ui.commons.NumericTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NumericTile#setIndicator
 * @function
 */


// Start of sap/suite/ui/commons/NumericTile.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.NumericTile.prototype.init = function() {
	this._oTileCnt = new sap.suite.ui.commons.NumericContent( this.getId() + "-numeric-tile-cnt");
	this.setContent(this._oTileCnt);
	
	sap.suite.ui.commons.InfoTile.prototype.init.apply(this);
};

sap.suite.ui.commons.NumericTile.prototype.exit = function() {
	var oCnt = this.getContent();
	oCnt.destroy();
};

sap.suite.ui.commons.NumericTile.prototype.setScale = function(sText) {
	this._oTileCnt.setScale(sText);
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.setValue = function(sText) {
	this._oTileCnt.setValue(sText);
	this.rerender();
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.getScale = function() {
	return this._oTileCnt.getScale();
};

sap.suite.ui.commons.NumericTile.prototype.getValue = function() {
	return this._oTileCnt.getValue();
};

sap.suite.ui.commons.NumericTile.prototype.setSize = function(oSize) {
	this._oTileCnt.setSize(oSize);
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.getSize = function() {
	return this._oTileCnt.getSize();
};

sap.suite.ui.commons.NumericTile.prototype.setValueColor = function(oValueColor) {
	this._oTileCnt.setValueColor(oValueColor);
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.getValueColor = function() {
	return this._oTileCnt.getValueColor();
};

sap.suite.ui.commons.NumericTile.prototype.setIndicator = function(oIndicator) {
	this._oTileCnt.setIndicator(oIndicator);
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.getIndicator = function() {
	return this._oTileCnt.getIndicator();
};

sap.suite.ui.commons.NumericTile.prototype.setState = function(oState) {
	this.setProperty("state", oState, false);
	this._oTileCnt.setState(oState);
	return this;
};

sap.suite.ui.commons.NumericTile.prototype.getState = function() {
	return this._oTileCnt.getState();
};
}; // end of sap/suite/ui/commons/NumericTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.PictureZoomIn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.PictureZoomIn.
jQuery.sap.declare("sap.suite.ui.commons.PictureZoomIn");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new PictureZoomIn.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getImageSrc imageSrc} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBusyIndicator busyIndicator} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Shows picture in fullscreen.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.25. 
 * API is not yet finished and might change completely
 * @name sap.suite.ui.commons.PictureZoomIn
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.PictureZoomIn", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"imageSrc" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"busyIndicator" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.PictureZoomIn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.PictureZoomIn.extend
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Description is shown under image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.PictureZoomIn} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#setDescription
 * @function
 */


/**
 * Getter for property <code>imageSrc</code>.
 * Source for image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>imageSrc</code>
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#getImageSrc
 * @function
 */

/**
 * Setter for property <code>imageSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImageSrc  new value for property <code>imageSrc</code>
 * @return {sap.suite.ui.commons.PictureZoomIn} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#setImageSrc
 * @function
 */


/**
 * Getter for aggregation <code>busyIndicator</code>.<br/>
 * Custom busy indicator.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#getBusyIndicator
 * @function
 */


/**
 * Setter for the aggregated <code>busyIndicator</code>.
 * @param {sap.ui.core.Control} oBusyIndicator
 * @return {sap.suite.ui.commons.PictureZoomIn} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#setBusyIndicator
 * @function
 */
	

/**
 * Destroys the busyIndicator in the aggregation 
 * named <code>busyIndicator</code>.
 * @return {sap.suite.ui.commons.PictureZoomIn} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.PictureZoomIn#destroyBusyIndicator
 * @function
 */


// Start of sap/suite/ui/commons/PictureZoomIn.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.PictureZoomIn.prototype.init = function(){
	var that = this;
	jQuery(window).resize(function (eO) {
		that._calculateImg();
	});
	
	jQuery(document).keyup(function(e) {
	    if (e.keyCode == 27) {
	        that.exit();
	        jQuery.sap.byId(that.getId()).remove();
	    }  	       
	});
	
	jQuery(document).tap(function() {
	    that.exit();
	    jQuery.sap.byId(that.getId()).remove();
	});

	this._oImage = new sap.m.Image(this.getId() + "-image", {
	}).addStyleClass("sapSuiteUiCommonsPictureZoomInImg");
	
	this._oDescription = new sap.m.Text(this.getId() + "-description", {
		textAlign: sap.ui.core.TextAlign.Center
	});
	this._oDescription.addStyleClass("sapSuiteUiCommonsPictureZoomInDesc");
};

sap.suite.ui.commons.PictureZoomIn.prototype.onBeforeRendering = function () {
	this._oImage.setSrc(this.getImageSrc());
	this._oDescription.setText(this.getDescription());
};

sap.suite.ui.commons.PictureZoomIn.prototype._calculateImg = function () {
    var oImg = jQuery.sap.domById(this.getId() + "-image");
    var oDesc = jQuery.sap.byId(this.getId() + "-description");
    if (!oImg) {
        return;
    }
    var oWindow = jQuery.sap.byId(this.getId());
    if (oImg.naturalWidth < oWindow.width() && oImg.naturalHeight < oWindow.height() - oDesc.outerHeight(true)) {
        oImg.style.width = oImg.naturalWidth + "px";
        oImg.style.height = oImg.naturalHeight + "px";
    } else if (oImg.naturalHeight / (oWindow.height() - oDesc.outerHeight(true)) > oImg.naturalWidth / oWindow.width()) {
        oImg.style.height = "" + (98 - oDesc.outerHeight(true) * 100 / oWindow.height()) + "%";
        oImg.style.width = "auto";
    } else {
	oImg.style.width = '96%';
	oImg.style.height = 'auto';
    }

    //recalculate left position of image so it is centered in div.
    var oImage = jQuery.sap.byId(this.getId() + "-image");
    var iWindowWidth = oWindow.width();
    var iImageWidth = oImage.width();
    var iImageHeight = oImage.height();
    if (iWindowWidth >= iImageWidth) {
        oImage.css("left", (iWindowWidth - iImageWidth) /2 );
    }

    //calculate top position for image and description
    var iImageTop = (oWindow.height() - iImageHeight - oDesc.outerHeight(true)) / 2;
    oImage.css("top", iImageTop);
    oDesc.css("top", iImageTop + iImageHeight);
};

sap.suite.ui.commons.PictureZoomIn.prototype.onAfterRendering = function() {
    var that = this;
    var oImage = jQuery.sap.byId(this.getId() + "-image");
    var oBusy = jQuery.sap.byId(this.getId() + "-busy");    // there is a custom busy indicator rendered

    oImage.hide();

    if (oBusy.length) {
        oBusy.show();
    } else {
        this.setBusy(true);
    }

    //subscribe for image load to recalculate positions of image, description.
    oImage.load(function() {
        if (oBusy.length) {
            oBusy.hide();
        } else {
            that.setBusy(false);
        }

        oImage.show();
        that._calculateImg();
    });
};

sap.suite.ui.commons.PictureZoomIn.prototype.exit = function() {
    if (this._oImage) {
        this._oImage.destroy();
    }
    if (this._oDescription) {
        this._oDescription.destroy();
    }
};

}; // end of sap/suite/ui/commons/PictureZoomIn.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ProcessFlow.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlow");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProcessFlow.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFoldedCorners foldedCorners} : boolean (default: false)</li>
 * <li>{@link #getScrollable scrollable} : boolean (default: true)</li>
 * <li>{@link #getWheelZoomable wheelZoomable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getNodes nodes} : sap.suite.ui.commons.ProcessFlowNode[]</li>
 * <li>{@link #getLanes lanes} : sap.suite.ui.commons.ProcessFlowLaneHeader[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ProcessFlow#event:nodeTitlePress nodeTitlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ProcessFlow#event:nodePress nodePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ProcessFlow#event:headerPress headerPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ProcessFlow#event:onError onError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Process Flow is a complex control that enables you to display documents or other items in their flow.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ProcessFlow
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ProcessFlow", { metadata : {

	publicMethods : [
		// methods
		"getZoomLevel", "setZoomLevel", "zoomIn", "zoomOut", "updateModel", "getFocusedNode", "updateNodesOnly"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"foldedCorners" : {type : "boolean", group : "Misc", defaultValue : false},
		"scrollable" : {type : "boolean", group : "Misc", defaultValue : true},
		"wheelZoomable" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	aggregations : {
		"connections" : {type : "sap.suite.ui.commons.ProcessFlowConnection", multiple : true, singularName : "connection", visibility : "hidden"}, 
		"nodes" : {type : "sap.suite.ui.commons.ProcessFlowNode", multiple : true, singularName : "node"}, 
		"lanes" : {type : "sap.suite.ui.commons.ProcessFlowLaneHeader", multiple : true, singularName : "lane"}
	},
	events : {
		"nodeTitlePress" : {deprecated: true}, 
		"nodePress" : {}, 
		"headerPress" : {}, 
		"onError" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ProcessFlow with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ProcessFlow.extend
 * @function
 */

sap.suite.ui.commons.ProcessFlow.M_EVENTS = {'nodeTitlePress':'nodeTitlePress','nodePress':'nodePress','headerPress':'headerPress','onError':'onError'};


/**
 * Getter for property <code>foldedCorners</code>.
 * This property defines the folded corners for the single node control. The following values exist:
 * - true: means folded corner
 * - false/null/undefined: means normal corner
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>foldedCorners</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#getFoldedCorners
 * @function
 */

/**
 * Setter for property <code>foldedCorners</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFoldedCorners  new value for property <code>foldedCorners</code>
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#setFoldedCorners
 * @function
 */


/**
 * Getter for property <code>scrollable</code>.
 * By default, the control body is embedded into a scroll container of fixed size, so the user
 * can put the control into a fixe sized layout.
 * When the control body (the graph) gets larger than the container cuts the overflowing parts of the graph and the cut parts can be viewed by scroling the control body.
 * When the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
 * 
 * The scrolling feature can be turned off by setting this property value to false,
 * so the width/height of the whole control will change as the flow graph gets smaller/larger.
 * In this case the control body could not be scrolled, as the control body size matches the control container size.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>scrollable</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#getScrollable
 * @function
 */

/**
 * Setter for property <code>scrollable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bScrollable  new value for property <code>scrollable</code>
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#setScrollable
 * @function
 */


/**
 * Getter for property <code>wheelZoomable</code>.
 * The property specifies if to enable semantic zooming by mouse wheel events on desktop browsers.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wheelZoomable</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#getWheelZoomable
 * @function
 */

/**
 * Setter for property <code>wheelZoomable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWheelZoomable  new value for property <code>wheelZoomable</code>
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#setWheelZoomable
 * @function
 */


/**
 * Getter for aggregation <code>nodes</code>.<br/>
 * this is the aggregation of the node controls put into
 * the table to the calculated cells.
 * 
 * @return {sap.suite.ui.commons.ProcessFlowNode[]}
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#getNodes
 * @function
 */


/**
 * Inserts a node into the aggregation named <code>nodes</code>.
 *
 * @param {sap.suite.ui.commons.ProcessFlowNode}
 *          oNode the node to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the node should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the node is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the node is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#insertNode
 * @function
 */

/**
 * Adds some node <code>oNode</code> 
 * to the aggregation named <code>nodes</code>.
 *
 * @param {sap.suite.ui.commons.ProcessFlowNode}
 *            oNode the node to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#addNode
 * @function
 */

/**
 * Removes an node from the aggregation named <code>nodes</code>.
 *
 * @param {int | string | sap.suite.ui.commons.ProcessFlowNode} vNode the node to remove or its index or id
 * @return {sap.suite.ui.commons.ProcessFlowNode} the removed node or null
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#removeNode
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>nodes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.ProcessFlowNode[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#removeAllNodes
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.ProcessFlowNode</code> in the aggregation named <code>nodes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.ProcessFlowNode}
 *            oNode the node whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#indexOfNode
 * @function
 */
	

/**
 * Destroys all the nodes in the aggregation 
 * named <code>nodes</code>.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#destroyNodes
 * @function
 */


/**
 * Getter for aggregation <code>lanes</code>.<br/>
 * This is a header of the table for the process flow control.
 * 
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader[]}
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#getLanes
 * @function
 */


/**
 * Inserts a lane into the aggregation named <code>lanes</code>.
 *
 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader}
 *          oLane the lane to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the lane should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the lane is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the lane is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#insertLane
 * @function
 */

/**
 * Adds some lane <code>oLane</code> 
 * to the aggregation named <code>lanes</code>.
 *
 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader}
 *            oLane the lane to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#addLane
 * @function
 */

/**
 * Removes an lane from the aggregation named <code>lanes</code>.
 *
 * @param {int | string | sap.suite.ui.commons.ProcessFlowLaneHeader} vLane the lane to remove or its index or id
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} the removed lane or null
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#removeLane
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>lanes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#removeAllLanes
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.ProcessFlowLaneHeader</code> in the aggregation named <code>lanes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader}
 *            oLane the lane whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#indexOfLane
 * @function
 */
	

/**
 * Destroys all the lanes in the aggregation 
 * named <code>lanes</code>.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#destroyLanes
 * @function
 */


/**
 * This event is fired when a process flow node title was
 * clicked. The user can access the clicked process flow node control object which is the only argument of the event handler.
 *
 * @name sap.suite.ui.commons.ProcessFlow#nodeTitlePress
 * @event
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use nodePress event instead ( click on the node)
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent This object represents the wrapped process flow node object.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'nodeTitlePress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself. 
 *  
 * This event is fired when a process flow node title was
 * clicked. The user can access the clicked process flow node control object which is the only argument of the event handler.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use nodePress event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlow#attachNodeTitlePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'nodeTitlePress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use nodePress event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlow#detachNodeTitlePress
 * @function
 */

/**
 * Fire event nodeTitlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> This object represents the wrapped process flow node object.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use nodePress event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlow#fireNodeTitlePress
 * @function
 */


/**
 * This event is fired when a process flow node was clicked. The user can catch this event in addition to the title press event.
 *
 * @name sap.suite.ui.commons.ProcessFlow#nodePress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent This object represents the wrapped process flow node object.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'nodePress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself. 
 *  
 * This event is fired when a process flow node was clicked. The user can catch this event in addition to the title press event.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#attachNodePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'nodePress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#detachNodePress
 * @function
 */

/**
 * Fire event nodePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> This object represents the wrapped process flow node object.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ProcessFlow#fireNodePress
 * @function
 */


/**
 * This event is fired when the the header column was clicked.
 *
 * @name sap.suite.ui.commons.ProcessFlow#headerPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent This object represents the wrapped process flow lane header object.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'headerPress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself. 
 *  
 * This event is fired when the the header column was clicked.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#attachHeaderPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'headerPress' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#detachHeaderPress
 * @function
 */

/**
 * Fire event headerPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> This object represents the wrapped process flow lane header object.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ProcessFlow#fireHeaderPress
 * @function
 */


/**
 * This event is fired when a problem occurs with the process flow calculation. Usually this means that there is a problem with the data. The console contains the detailed error description with the errors.
 *
 * @name sap.suite.ui.commons.ProcessFlow#onError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent This parameters contains the localized string with error message.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'onError' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself. 
 *  
 * This event is fired when a problem occurs with the process flow calculation. Usually this means that there is a problem with the data. The console contains the detailed error description with the errors.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#attachOnError
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'onError' event of this <code>sap.suite.ui.commons.ProcessFlow</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlow#detachOnError
 * @function
 */

/**
 * Fire event onError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> This parameters contains the localized string with error message.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlow} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ProcessFlow#fireOnError
 * @function
 */


/**
 * the method returns current zoom level of the control.
 *
 * @name sap.suite.ui.commons.ProcessFlow#getZoomLevel
 * @function
 * @type sap.suite.ui.commons.ProcessFlowZoomLevel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method sets the new zoom level. If the input is wrong, it is ignored and the previous value stays.
 *
 * @name sap.suite.ui.commons.ProcessFlow#setZoomLevel
 * @function
 * @param {sap.suite.ui.commons.ProcessFlowZoomLevel} oNewZoomLevel
 *         This method sets new zoom level. The enumeration ensures that only available levels are used.
 * @type sap.suite.ui.commons.ProcessFlowZoomLevel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method decreases the zoom level. More details are displayed in the node.
 *
 * @name sap.suite.ui.commons.ProcessFlow#zoomIn
 * @function
 * @type sap.suite.ui.commons.ProcessFlowZoomLevel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method increases the zoom level. Less details are displayed in the node.
 *
 * @name sap.suite.ui.commons.ProcessFlow#zoomOut
 * @function
 * @type sap.suite.ui.commons.ProcessFlowZoomLevel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method triggers the update of the model and correspondingly the rerender method.
 *
 * @name sap.suite.ui.commons.ProcessFlow#updateModel
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method returns the nodeId of the node, which is focused.
 *
 * @name sap.suite.ui.commons.ProcessFlow#getFocusedNode
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * This method should be called when the contents of the nodes were changed. It updates only the nodes and rerenders the ProcessFlow.
 *
 * @name sap.suite.ui.commons.ProcessFlow#updateNodesOnly
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/ProcessFlow.js
///**
// * This file defines behavior for the control,
// */

/*
 * resource bundle for the localized strings
 */
sap.suite.ui.commons.ProcessFlow.prototype._resBundle = null;


/**
 * Zoom level for the control.It is propagated to all created sub controls
 */
sap.suite.ui.commons.ProcessFlow.prototype._zoomLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Two;

/**
 * The wheel events timeout.
 */
sap.suite.ui.commons.ProcessFlow.prototype._wheelTimeout = null;

/**
 * The wheel events timestamp for the last wheel event occurrence.
 */
sap.suite.ui.commons.ProcessFlow.prototype._wheelTimestamp = null;

/**
 * The wheel events flag, if a wheel event was recently processed.
 */
sap.suite.ui.commons.ProcessFlow.prototype._wheelCalled = false;

/**
 * The internal matrix after calculation. use for keyboard movement
 */
sap.suite.ui.commons.ProcessFlow.prototype._internalCalcMatrix = false;

/**
 * internal lanes, which can differ from original ones. especially when more nodes are in
 * the same lane
 */
sap.suite.ui.commons.ProcessFlow.prototype._internalLanes = false;

/**
 * definition for jump over more elements based on the visual design
 */
sap.suite.ui.commons.ProcessFlow.prototype._jumpOverElements = 5;
/**
 * last node with navigation focus. It is marked when the focus out event
 * is handled.
 */
sap.suite.ui.commons.ProcessFlow.prototype._lastNavigationFocusNode = false;

  // set up the cursor classes
sap.suite.ui.commons.ProcessFlow.prototype._defaultCursorClass = "sapSuiteUiDefaultCursorPF";

  if(sap.ui.Device.browser.msie) {
    sap.suite.ui.commons.ProcessFlow.prototype._grabCursorClass = "sapSuiteUiGrabCursorIEPF";
    sap.suite.ui.commons.ProcessFlow.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorIEPF";
  } else {
    sap.suite.ui.commons.ProcessFlow.prototype._grabCursorClass = "sapSuiteUiGrabCursorPF";
    sap.suite.ui.commons.ProcessFlow.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorPF";
  }
  
sap.suite.ui.commons.ProcessFlow.prototype._mousePreventEvents = 'contextmenu dblclick';

sap.suite.ui.commons.ProcessFlow.prototype._mouseEvents = 'contextmenu mousemove mouseleave mousedown mouseup mouseenter';

 sap.suite.ui.commons.ProcessFlow.prototype._mouseWheelEvent = (sap.ui.Device.browser.mozilla) ? 'DOMMouseScroll MozMousePixelScroll' : 'mousewheel wheel';
 
 sap.suite.ui.commons.ProcessFlow.prototype._headerHasFocus = false;
 
sap.suite.ui.commons.ProcessFlow.prototype.init = function() {
  if ( (sap.ui.Device.os.android ||
        sap.ui.Device.os.blackberry ||
        sap.ui.Device.os.ios ||
        sap.ui.Device.os.windows_phone)
       && sap.ui.Device.system.phone ) {
    this.setZoomLevel(sap.suite.ui.commons.ProcessFlowZoomLevel.Four);
  }
  if( !this._resBundle ) {
    this._resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
  }
  this._internalLanes = this.getLanes();

  this.$().bind('keydown', jQuery.proxy(this.onkeydown, this));
  this.$().bind('keyup', jQuery.proxy(this.onkeyup, this));
};

/**
 * function destroys all the object components.
 */
sap.suite.ui.commons.ProcessFlow.prototype.exit = function() {
  if( this.getNodes() ) {
    for( var i = 0; i < this.getNodes().length; i++) {
      this.getNodes()[i].destroy();
    }
    this.getNodes = null;
  }

  if( this._internalLanes ) {
    for( var i = 0; i < this._internalLanes.length; i++) {
      this._internalLanes[i].destroy();
    }
    this._internalLanes = null;
  }
  var internalConnectionAgg = this.getAggregation("connections");
  if( internalConnectionAgg ) {
    for( var i = 0; i < internalConnectionAgg.length; i++) {
      internalConnectionAgg[i].destroy();
    }
    internalConnectionAgg = null;
  }

  if(this._resizeRegId) {
    sap.ui.core.ResizeHandler.deregister(this._resizeRegId);
  }
  if( this._internalCalcMatrix ) {
    delete this._internalCalcMatrix;
    this._internalCalcMatrix = null;
  }
 
  this.$().unbind(this._mousePreventEvents, this._handlePrevent);
  this.$().unbind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
  this.$().unbind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this)); 
  this.$().unbind('keydown', jQuery.proxy(this.onkeydown, this));
};

sap.suite.ui.commons.ProcessFlow.prototype.onBeforeRendering = function() {
  this.$().unbind(this._mousePreventEvents, this._handlePrevent); 
  this.$().unbind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
  this.$().unbind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this));
};

/**
 * function handles the exception based on the business requirements
 */
sap.suite.ui.commons.ProcessFlow.prototype._handleException = function( exc ) {
  var textToDisplay = this._resBundle.getText('PF_ERROR_INPUT_DATA');
  this.fireOnError({text:textToDisplay});
  jQuery.sap.log.error("Error loading data for the process flow with id : "+ this.getId() );

  if( exc instanceof Array) {
    for( var i=0 ; i < exc.length; i++ ) {
      jQuery.sap.log.error("Detailed description ("+ i +") :" + exc[i] );
    }
  } else {
    jQuery.sap.log.error("Detailed description  :" + exc );
    }
};

/**
 * function makes the update of the lanes, if more nodes belong to the same lane
 * it must check the node consistency, so this is done first time the consistency check
 */
sap.suite.ui.commons.ProcessFlow.prototype._updateLanesFromNodes = function() {
    sap.suite.ui.commons.ProcessFlow.NodeElement.createNodeElementsFromProcessFlowNodes(this.getNodes(), this.getLanes());
    this._internalLanes =
     sap.suite.ui.commons.ProcessFlow.NodeElement.updateLanesFromNodes(this.getLanes(), this.getNodes()).lanes;
};
/**
 * function creates the lane header objects.
 * @returns object with the position definition
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._getOrCreateLaneMap = function( ) {

//  internalLanes = sap.suite.ui.commons.ProcessFlow.NodeElement.updateLanesFromNodes(internalLanes, internalNodes).lanes;
  //this.addAggregation("lanes", internalLanes);
  if( !this._internalLanes || this._internalLanes.length <= 0 ) {
    this._updateLanesFromNodes();
  }
  var mapPositionToLane = sap.suite.ui.commons.ProcessFlow.NodeElement
    .createMapFromLanes(this._internalLanes, jQuery.proxy(this.ontouchend, this), this._isHeaderMode()).positionMap;
  return mapPositionToLane;
};

/**
 * function creates matrix with positions of nodes and connections. This is
 * relative node connection representation and does not cover real page layout
 *
 * @private
 * @returns the created process flow control
 */
sap.suite.ui.commons.ProcessFlow.prototype._getOrCreateProcessFlow = function( ) {
  if( !this._internalLanes || this._internalLanes.length <= 0 ) {
    this._updateLanesFromNodes();
  }

  this.applyNodeDisplayState();
  var internalNodes = this.getNodes();

  /*tempNodeArray is internal node representation */


  var result = sap.suite.ui.commons.ProcessFlow.NodeElement
  .createNodeElementsFromProcessFlowNodes(internalNodes, this._internalLanes);

  var elementForId = result.elementForId;
  var elementsForLane = result.elementsForLane;

  sap.suite.ui.commons.ProcessFlow.NodeElement.calculateLaneStatePieChart(
      elementsForLane, this._internalLanes, internalNodes, this);

  var calcMatrix = sap.suite.ui.commons.ProcessFlow.prototype.calculateMatrix(elementForId);

  calcMatrix = this.addFirstAndLastColumn(calcMatrix);
//  now change to the process flow nodes again
  for (var i = 0; i < calcMatrix.length; i++) {
    for (var j = 0; j < calcMatrix[i].length; j++) {
      if (calcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlow.NodeElement) {
        calcMatrix[i][j] = elementForId[calcMatrix[i][j].nodeid].oNode;
      }
    }
  }
  this._internalCalcMatrix = calcMatrix;
  return calcMatrix;
};

/**
 * function applies the changes to the display state based on the requirement.s
 * 1. if any node is in the highlighted state all others go to the dimmed
 * @public
 */
sap.suite.ui.commons.ProcessFlow.prototype.applyNodeDisplayState = function() {
  var aInternalNodes = this.getNodes()
      , iNodeCount = aInternalNodes ? aInternalNodes.length : 0
      , i = 0
      ;

  if (iNodeCount === 0) {
    return;
  } else {
    // first put all the nodes to the regular state - if possible
    while (i < iNodeCount) {
      aInternalNodes[i]._setRegularState();
      i++;
    }

    // check for the highlighted - at least one is required
    i = 0;
    while ((i < iNodeCount) && !aInternalNodes[i].getHighlighted()) {
      i++;
    }

    // if a highlighted node found
    if(i < iNodeCount) {
      i = 0;
      while (i < iNodeCount) {
        if (!aInternalNodes[i].getHighlighted()) {
          aInternalNodes[i]._setDimmedState();
        }
        i++;
      }
    }
  }
};

/**
 * function adds first and last column, which serves for the special header signs. It has to add
 * single cell to all internal arrays - we need to increase Y
 * @param calculatedMatrix
 */
sap.suite.ui.commons.ProcessFlow.prototype.addFirstAndLastColumn = function( calculatedMatrix ) {

  if( !calculatedMatrix || calculatedMatrix.length <= 0 ) {
    return [];
  }

  var originalX = calculatedMatrix.length;
  //var originalY = calculatedMatrix[0].length; // alll should be the same


  for( var i = 0; i < originalX; i++ ) {
    calculatedMatrix[i].unshift(null);
    calculatedMatrix[i].push(null);
  }

  return calculatedMatrix;
};

/**
 * Function calculates a virtual matrix with nodes and connections.
 *
 * @param elementForId contains a map of the node id's to node elements
 * @throws an array with messages on processing errors
 * @returns the composed virtual matrix
 * @private
 */

sap.suite.ui.commons.ProcessFlow.prototype.calculateMatrix = function(elementForId) {
  var internalMatrixCalculation
      , oElementInfo
      , aSortedRootElements
      , highestLaneNumber
      , rows
      , return2DimArray
      , bRefocusRequired
      ;

  // no calculation in case of zero input
  if (!elementForId || (elementForId.length === 0)) {
    return [];
  }

  internalMatrixCalculation = new sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation(this);
  bRefocusRequired = internalMatrixCalculation.checkInputNodeConsistency(elementForId);

  oElementInfo = internalMatrixCalculation
      .retrieveInfoFromInputArray(elementForId);

  internalMatrixCalculation.resetPositions();

  aSortedRootElements = internalMatrixCalculation.sortRootElements(oElementInfo.rootElements);

  highestLaneNumber = oElementInfo.highestLanePosition + 1;

  // worst case, all children are in the same lane with so many rows.
  rows = Object.keys(elementForId).length > 3 ? Object.keys(elementForId).length - 1 : 2;

  return2DimArray = internalMatrixCalculation.createMatrix(rows, highestLaneNumber);

  for( var i = 0; i < aSortedRootElements.length; i++ ) {
    internalMatrixCalculation.posy = aSortedRootElements[i].lane;

    return2DimArray = internalMatrixCalculation.processCurrentElement(
        aSortedRootElements[i], elementForId, return2DimArray);
  }

  // if true, it is neccessa to recalculate the focus state for all to false. root is
  // afterwards set to focused
  if( bRefocusRequired && return2DimArray[0][0] && return2DimArray[0][0].oNode.setFocused ) {
    Object.keys(elementForId).forEach( function(sElementId ) {
      var oElement = elementForId[sElementId];
      oElement.oNode.setFocused(false);
    });
    return2DimArray[0][0].oNode.setFocused(true);
  }

  return2DimArray = internalMatrixCalculation
      .doubleColumnsInMatrix(return2DimArray);
  return2DimArray = internalMatrixCalculation
      .calculatePathInMatrix(return2DimArray);
  return2DimArray = internalMatrixCalculation.removeEmptyLines(return2DimArray);

  return return2DimArray;
};


/**
 * This is a virtual node holding necessary data to create virtual matrix.
 *
 * @param {string} id id of the PF node
 * @param {number} lane lane position of the node
 * @param {sap.suite.ui.commons.ProcessFlow} oNode a PF node
 * @param {number[]} aNodeParents array of parent id's of the oNode
 * @private
 */
sap.suite.ui.commons.ProcessFlow.NodeElement = function(
  id, lane, oNode, aNodeParents) {
  this.nodeid = id;
  this.lane = lane;
  this.state = oNode.getState();
  this.displayState = oNode._getDisplayState();
  this.isProcessed = false;

  if (jQuery.isArray(aNodeParents)) {
    this.arrayParent = aNodeParents;
  } else {
    this.singleParent = aNodeParents;
  }
  this.oNode = oNode;
};


/**
 * Extend the NodeElement object with to String function
 *
 * @private
 */

sap.suite.ui.commons.ProcessFlow.NodeElement.prototype = {
  toString : function() {
    return this.nodeid;
  },
  containsChildren : function( that ) {
    if( ! that ) {
      return false;
    }
    if( ! (that instanceof sap.suite.ui.commons.ProcessFlow.NodeElement) ) {
      return false;
    }
    if( this.oNode.getChildren() && that.oNode.getChildren() && this.oNode.getChildren().length && that.oNode.getChildren().length) {
      for( var i = 0; i < this.oNode.getChildren().length; i++ ) {
        if( that.oNode.getChildren().indexOf(this.oNode.getChildren()[i]) >= 0) {
          return true;
        }
      }
    }
    return false;
  }
};

/**
 * Another type of the nodel ement contructor
 * @param id node id
 * @param lane lane position
 * @param oNode reference to a PF node control
 * @param aNodeParents reference to the ids of parents of the oNode
 * @private
 * @returns a new node element
 */
sap.suite.ui.commons.ProcessFlow.NodeElement.initNodeElement = function(id,
    lane, oNode, aNodeParents) {
  return new sap.suite.ui.commons.ProcessFlow.NodeElement(id, lane, oNode, aNodeParents);
};

/**
 * function calculates the state part of the lane from nodes belong to this lane
 */
sap.suite.ui.commons.ProcessFlow.NodeElement.calculateLaneStatePieChart = function(elementsForLane, laneArray, internalNodes, processFlowObject) {
  // check input parameters
  if( !elementsForLane || !laneArray || !internalNodes) {
    return;
  }

  // first check if all nodes are in the regular state. If not only highligted are taken into calculation
  for( var i = 0; i < internalNodes.length; i++) {
    processFlowObject._bHighlightedMode = internalNodes[i].getHighlighted();
    if( processFlowObject._bHighlightedMode ) {
      break;
    }
  }
  var positive = 0;
  var negative = 0;
  var neutral = 0;
  var planned = 0;
  for( var i = 0; i < laneArray.length; i++ ) {
    var laneObject = laneArray[i];
    var elements = elementsForLane[laneObject.getLaneId()];
    // if we do not have nodes, nothing to calculate

    if (!elements) {
      continue;
    }

    positive = 0;
    negative = 0;
    neutral = 0;
    planned = 0;

    for( var j = 0; j < elements.length; j++ ) {
      if( !processFlowObject._bHighlightedMode ||
        (elements[j].oNode._getDisplayState() == sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ||
            elements[j].oNode._getDisplayState() == sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused)) {
      switch( elements[j].oNode.getState() ) {
      case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
          positive++;
          break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
          negative++;
          break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
          planned++;
          break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
          neutral++;
          break;
     //plannedNegative belong to the Negative group
      case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
          negative++;
          break;
        };
      };
    }; // end of nodes for single lane
    var stateData = [{state: sap.suite.ui.commons.ProcessFlowNodeState.Positive, value:positive}
    , {state: sap.suite.ui.commons.ProcessFlowNodeState.Negative, value:negative}
    , {state: sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:planned}
    , {state: sap.suite.ui.commons.ProcessFlowNodeState.Planned, value:neutral}];
    laneObject.setState(stateData);
  }
};

/**
 * this function must check and calculate the potentially new lanes
 * this is because more nodes can lay in the same lane. In this case
 * the new artificial lane is created and positioned just after original one.
 * @param aProcessFlowLanes the original lane array
 * @param aInternalNodes internal nodes
 */
sap.suite.ui.commons.ProcessFlow.NodeElement.updateLanesFromNodes = function(
    aProcessFlowLanes, aInternalNodes ) {
  var createMapResult =
    sap.suite.ui.commons.ProcessFlow.NodeElement.createMapFromLanes(aProcessFlowLanes, null, false);
  var mapLanesArrayPosition = createMapResult.positionMap;
  var mapLanesArrayId = createMapResult.idMap;
  var nodeArray = {};
  var tempProcessFlowLanes = aProcessFlowLanes.slice();
  var bPotentialNewLaneExists;
  var tempLanesPos = {};
  var nPos = 0;

  for( var i = 0; i < aInternalNodes.length; i++ ) {
    nodeArray[aInternalNodes[i].getNodeId()] = aInternalNodes[i];
  }

  for( var i = 0; i < aInternalNodes.length; i++) { // for each node
    var node = aInternalNodes[i];
    var children = node.getChildren() || [];
    var positionUp = 1; // check the move up for the given sublanes of the lane. Every new sublane creation
    var potentialNewLaneId = null;
    var potentialNewLane = null;
    // makes plus 1 effect
    for( var j = 0; j < children.length; j++) { // check the children
      var childrenNode = nodeArray[children[j]];
      if( childrenNode && (node.getLaneId() == childrenNode.getLaneId()) ) {
        // create new lane id and check the lane
        potentialNewLaneId = childrenNode.getLaneId()+positionUp;
        potentialNewLane = mapLanesArrayId[potentialNewLaneId];
        if( !potentialNewLane ) { // if we have the lane already
          var origLaneObject = mapLanesArrayId[node.getLaneId()];
          potentialNewLane = sap.suite.ui.commons.ProcessFlow.NodeElement.createNewProcessFlowElement(
              origLaneObject, potentialNewLaneId, origLaneObject.getPosition()+positionUp);
          // update the maps and output array
          mapLanesArrayId[potentialNewLane.getLaneId()] = potentialNewLane;
        //tempProcessFlowLanes.push(potentialNewLane);
         tempProcessFlowLanes.splice(potentialNewLane.getPosition(), 0, potentialNewLane);
        }
        // assign new lane to children
        childrenNode.setLaneId(potentialNewLane.getLaneId());
      }
      // move also the assignment of this lane for all children. Otherwise it is bad ...
      // so, take the children of current children and move the lane position to the new lane, if neccessary
      // neccessary it is in the case when the lane is the same as was PARENT node. this is important to understand,
      // that this children is already moved to new one, so parent lane is compared.
      // this is a recursion
      sap.suite.ui.commons.ProcessFlow.NodeElement.changeLaneOfChildren(node.getLaneId(), childrenNode, nodeArray );
    } // end of children loop
    // now we should move all positions up about the number positionUp
    // also the position map is in wrong state now
    // now work with all vector, later on we can move only to lanes with higher position than working one
    if( potentialNewLane ) {
      tempLanesPos = {};
      bPotentialNewLaneExists = false;
      for( var key in mapLanesArrayPosition) {
        if( potentialNewLane .getLaneId() == mapLanesArrayPosition[key].getLaneId() ) {
          bPotentialNewLaneExists = true;
          break;
        };
        if( parseInt(key) >= potentialNewLane.getPosition() ) {
          var tempLaneObject = mapLanesArrayPosition[key];
          tempLanesPos[tempLaneObject.getPosition()+positionUp] = tempLaneObject;
         // tempLaneObject.setPosition(tempLaneObject.getPosition()+positionUp);
        };
      }
      if (!bPotentialNewLaneExists) {
        for( var w in tempLanesPos) {
          nPos = parseInt(w);
          tempLanesPos[nPos].setPosition(nPos);
        }
        tempLanesPos[potentialNewLane.getPosition()] = potentialNewLane;
        for (var v=0; v < potentialNewLane.getPosition(); v++) {
          tempLanesPos[v] = mapLanesArrayPosition[v];
        }
        mapLanesArrayPosition = tempLanesPos;
       // mapLanesArrayPosition[potentialNewLane.getPosition()] = potentialNewLane;
      };
    };
  };
  return { lanes: tempProcessFlowLanes, nodes: aInternalNodes };
};

sap.suite.ui.commons.ProcessFlow.NodeElement.changeLaneOfChildren = function( origLaneId, currentNode, nodeArray ) {
  var children = currentNode.getChildren();
  if( children) {
    for( var i = 0; i < children.length; i++) { // check the children
      var childrenNode = nodeArray[children[i]];
      if( childrenNode.getLaneId() == origLaneId ) {
        childrenNode.setLaneId(currentNode.getLaneId());
        sap.suite.ui.commons.ProcessFlow.NodeElement.changeLaneOfChildren( origLaneId, childrenNode, nodeArray);
      }
    }
  }
};

sap.suite.ui.commons.ProcessFlow.NodeElement.createNewProcessFlowElement = function( originalElement, newLaneId, newPosition ) {
  var cloneElement = new sap.suite.ui.commons.ProcessFlowLaneHeader({
    laneId: newLaneId,
    iconSrc: originalElement.getIconSrc(),
    text: originalElement.getText(),
    state: originalElement.getState(),
    position: newPosition,
    zoomLevel: originalElement.getZoomLevel()
  });
  return cloneElement;
};

/**
 * This function creates the map where key = position value - lane element.
 *
 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader[]} aProcessFlowLanes array of lanes
 * @param {function} fnTapHandler tap handler for the lane header element
 * @param {boolean} bHeaderMode should be true, if the process flow is in the header mode
 * @returns map of lane positions to lane header element control instances
 * @private
 */
sap.suite.ui.commons.ProcessFlow.NodeElement.createMapFromLanes = function(
  aProcessFlowLanes, fnTapHandler, bHeaderMode) {
  var oLane
    , aMapLaneArrayPosition = {}
    , aMapLaneArrayId = {}
    , nLanes = aProcessFlowLanes ? aProcessFlowLanes.length : 0
    , i = 0
    ;

  if (!nLanes) {
    return {};
  } else {
    while (i < nLanes) {
      oLane = aProcessFlowLanes[i];
      if (oLane instanceof sap.suite.ui.commons.ProcessFlowLaneHeader) {
        aMapLaneArrayPosition[oLane.getPosition()] = oLane;
        aMapLaneArrayId[oLane.getLaneId()] = oLane;
        // forward the icon click events from the lane header items to the flow control
        if (fnTapHandler) {
          oLane.attachPress(fnTapHandler);
        }
        oLane._setHeaderMode(bHeaderMode);
      }
      i++;
    }

    return { positionMap: aMapLaneArrayPosition, idMap : aMapLaneArrayId };
  }
};

/**
*
* This function transforms from process flow node element into the internal
* node element. the strategy is to work inside algorithm only with internal
* representation.
* @parameter processFlowNodes PF nodes from the controls interface, preprocessed - so they all have a valid (user entered, resp. generated) lane id
* @parameter elementsForLane
* @returns {elementForId : NodeElement, elementsForLane : NodeElement[]}
* @private
*/
sap.suite.ui.commons.ProcessFlow.NodeElement.createNodeElementsFromProcessFlowNodes = function(
   processFlowNodes, processFlowLanes) {
 var aPositionForLaneId = {}   // map holds the transition between lane id and position
     , aElementsForLane = {}   // holds a map from laneId to array of the elements for given laneId
     , aParentsForChild = {}
     , oNode
     , iNodeCount = processFlowNodes ? processFlowNodes.length : 0
     , sNodeId
     , oLane
     , iLaneCount = processFlowLanes ? processFlowLanes.length : 0
     , sLaneId
     , aPositions = []
     , iLanePosition
     , aChildren
     , sChild
     , nChildCount
     , i
     , j
     , aElementForId = {}
     ;

 if (iNodeCount === 0) {
   return {elementForId : {}, elementsForLane : {}};
 }

 if (iLaneCount === 0) {
  throw ["No lane definition although there is a node definition."];
 }

 i = 0;
 while (i < iLaneCount) {
   oLane = processFlowLanes[i];
   sLaneId = oLane.getLaneId();
   iLanePosition = oLane.getPosition();

   if (aPositionForLaneId[sLaneId]) {
     throw ["The lane with id: " + sLaneId + " is defined at least twice. (Lane error)"];
   }

   aPositionForLaneId[sLaneId] = iLanePosition;

   if( jQuery.inArray(iLanePosition, aPositions) > -1) {
     throw ["The position " + iLanePosition + " is defined at least twice. (Lane error)."];
   } else {
     aPositions.push(iLanePosition);
   }

   aElementsForLane[sLaneId] = [];
   i++;
 }

 // search for the parent
 i = 0;
 while (i < iNodeCount) {
   oNode = processFlowNodes[i];
   if (oNode instanceof sap.suite.ui.commons.ProcessFlowNode) {
     sNodeId = oNode.getNodeId();
     sLaneId = oNode.getLaneId();

     aChildren = oNode.getChildren() || [];
     nChildCount = aChildren.length;
     j = 0;
     while (j < nChildCount) {
       sChild = aChildren[j];
       aParentsForChild[sChild] = aParentsForChild[sChild] || [];
       aParentsForChild[sChild].push(sNodeId);
       j++;
     }
   }
   i++;
 }

 i = 0;
 while (i < iNodeCount) {
   oNode = processFlowNodes[i];
   if (oNode instanceof sap.suite.ui.commons.ProcessFlowNode) {
     sNodeId = oNode.getNodeId();

     if (!sNodeId) {
       throw ["There is a node which has no node id defined. (Title=" + oNode.getTitle() + ") and array position: " + i];
     }

     sLaneId = oNode.getLaneId();

     iLanePosition = aPositionForLaneId[sLaneId];
     if (typeof iLanePosition !== 'number') {
       throw ["For the node " + sNodeId + " position (lane) is not defined."];
     }

     if (!aElementForId[sNodeId]) {
       aElementForId[sNodeId] = sap.suite.ui.commons.ProcessFlow.NodeElement
           .initNodeElement(sNodeId, iLanePosition, oNode, aParentsForChild[sNodeId]);

       aElementsForLane[sLaneId].push(aElementForId[sNodeId]);
     } else {
       throw ["The node id " + sNodeId + " is used second time."];
     }
   }
   i++;
 }

 return {elementForId : aElementForId, elementsForLane : aElementsForLane};
};

/**
 * constructor of the algorithm object
 *
 * @private
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation = function(parentControl) {
  this.parentControl = parentControl;
  this.posx = 0;
  this.posy = 0;

  this.nodePositions = {};
  this.mapChildToNode = {};

};

/**
 * Function checks consistency of the node array. It checks
 * if all children defined for the nodes are also presented as the nodes themselves.

 * @param elementForId Map of node id's to NodeElements. Expectation is to have at least 1 element there. No check for empty array.
 * @returns boolean value, where true means no activity, false means set the focus on top left root node
 * @throws array of error messages produced during the consistency check
 * @public
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.checkInputNodeConsistency = function (elementForId) {
  var returnArr = []
      , j
      , sChildId
      , nChildCount
      , aChildren
      , oElement
      , nFocusNodes = 0
      ;


  // preparation phase
  Object.keys(elementForId).forEach(function(sElementId) {
    oElement = elementForId[sElementId];
    aChildren = oElement.oNode.getChildren();
    nChildCount = aChildren ? aChildren.length : 0;

    if( oElement.oNode.getFocused()) {
      nFocusNodes++;
    }

    j = 0;
    while (j < nChildCount) {
      sChildId = aChildren[j];
      if (!elementForId[sChildId]) {
        returnArr.push("Node identificator " + sChildId + " used in children definition is not presented as the node itself. Element : " + oElement.nodeid);
      }
      j++;
    }
  });

  if (returnArr.length > 0) {
    throw returnArr;
  }
  return nFocusNodes > 1;
};


/**
 * function resets the positions into initial one to keep new calculation
 * without sideeffects
 *
 * @private
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.resetPositions = function() {
  this.posx = 0;
  this.posy = 0;

  delete this.nodePositions;
  delete this.mapChildToNode;

  this.nodePositions = {};
  this.mapChildToNode = {};
};

//first argument is number of columns ( x )
//second argument is number of rows
/**
* function creates matrix based on the length first argument is number of
* columns second argument is number of rows
*
* @private
*/
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.createMatrix = function(
 length) {
  length = parseInt(length, 10);
  var arr = new Array(length || 0);
  var i = length;

  if (arguments.length > 1) {
    var args = Array.prototype.slice.call(arguments, 1);
    while (i--) {
      arr[length - 1 - i] = this.createMatrix.apply(this, args);
    };
  }
  return arr;
};

/**
 * Function retrieves the important information from input array.
 * @param elementForId map of element id's to elements
 * @returns {hightestLanePosition:number, rootElements: Element[]}
 * @private
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.retrieveInfoFromInputArray = function(
  elementForId) {

  var highestLanePosition = 0
  , rootElements = []
  , oElement
  ;

  Object.keys(elementForId).forEach(function(sElementId) {
    oElement = elementForId[sElementId];

    if (!oElement.singleParent && !oElement.arrayParent) {
      rootElements.push(oElement);
    }

    if (highestLanePosition < oElement.lane) {
      highestLanePosition = oElement.lane;
    }
  });

  return {
    'highestLanePosition' : highestLanePosition,
    'rootElements' : rootElements
  };
};

/**
 * function doubles the matrix for drawing purposes and it only doubles the columns and add undefined values there.
  * @private
*/
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.doubleColumnsInMatrix = function(
    currentMatrix) {
  var matrixY = 0;

  for (var i = 0; i < currentMatrix.length; i++) {
    matrixY = matrixY > currentMatrix[i].length ? matrixY
        : currentMatrix[i].length;
  }

  var doubleArray = new Array(currentMatrix.length || 0);

  for (var i = 0; i < doubleArray.length; i++) {
    doubleArray[i] = new Array(matrixY * 2 - 1);
    for (var j = 0; j < matrixY; j++) {
      if (currentMatrix[i][j]) {
        doubleArray[i][2 * j] = currentMatrix[i][j];
      };
    };
  }
  return doubleArray;
};


/**
 * function removes empty lines from the matrix.
*/
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.removeEmptyLines = function(
   originalMatrix) {
 // first check the number of valid lines
 var numberOfLines = 0;
 for (var i = 0; i < originalMatrix.length; i++) {
   for (var j = 0; j < originalMatrix[i].length; j++) {
     if (originalMatrix[i][j]) {
       numberOfLines++;
       break;
     };
   };
 }

 var returnArray = this.createMatrix(numberOfLines, originalMatrix[0].length);

 for (var i = 0; i < numberOfLines; i++) {
   for (var j = 0; j < originalMatrix[i].length; j++) {
     returnArray[i][j] = null; // everything is at least null
     if (originalMatrix[i][j]) {
       returnArray[i][j] = originalMatrix[i][j];
     };
   };
 }
 return returnArray;
};


/**
 * This function creates the matrix with nodes positioned into the proper places.
 *
 * @param currentElement actually processed element
 * @param elementForId map of all the available elements
 * @param return2DimArray the updated virtual matrix
 * @returns the updated virtual matrix
 * @public
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.processCurrentElement = function(
    currentElement, elementForId, return2DimArray) {
  var aElementsChildIds
  , aElementsChildren
  , that = this
  , bMoveToNextLine = true // this is check for repeated parent child relationship. The childrenArr is notempty but
  ;                        // in fact it is required to move to the next line.

  if (currentElement.isProcessed) {
    return return2DimArray;
  }

  this.nodePositions[currentElement.nodeid] = {
    'c' : currentElement,
    'x' : this.posx,
    'y' : this.posy * 2
  };

  return2DimArray[this.posx][this.posy++] = currentElement;

  aElementsChildIds = currentElement.oNode.getChildren();

  currentElement.isProcessed = true;

  aElementsChildren = this.sortBasedOnChildren(aElementsChildIds, elementForId);

  if (aElementsChildren) {
    aElementsChildren.forEach(function(oChild) {
      if (!oChild.isProcessed) {
        bMoveToNextLine = false;

        while (that.posy < oChild.lane) {
          return2DimArray[that.posx][that.posy++] = null;
        }

        return2DimArray = that.processCurrentElement(oChild, elementForId, return2DimArray);
      }
    });
  }

  if (!aElementsChildIds || bMoveToNextLine) {
    this.posx++;
    this.posy = 0;
  }

  return return2DimArray;
};

/**
 * This function orders the root elements based on the given rules. It returns back the elements that flow is nicely layouted.
 *
 * @param rootElements the root elements to sort
 * @private
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.sortRootElements = function(rootElements) {
  return rootElements;
};

/**
 * Sort based on the child closenes. If 2 children has some common children they get next to each other.
 *
 * @param aElementsChildIds child ids of the currently processed node
 * @param elementForId  contains a map of the node id's to node elements
 * @return sorted child elements (first sort by lanes, than the elements having the same children gets next to each other)
 * @private
*/
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.sortBasedOnChildren = function(aElementsChildIds, elementForId) {
 var oElementsForLane = {}
     , aElements
     , laneId = null
     , aLaneIds
     , aNmbrChildren
     , bNmbrChildren
     , finalSortedArray = []
     , aSingleLaneContent
     , aSingleContent
     , oProcessedChildElement
     ;

 if (aElementsChildIds) {
   aElementsChildIds.forEach(function(oChildId) {
      aElements = oElementsForLane[elementForId[oChildId].lane];
      if (!aElements) {
        oElementsForLane[elementForId[oChildId].lane] = aElements = [];
      }
      aElements.push(elementForId[oChildId]);
   });
 } else {
   return [];
 }

 aLaneIds = new Array();
 for (laneId in oElementsForLane) {
   aLaneIds.push(laneId);
   oElementsForLane[laneId].sort(function(a, b) {
     // lane needs not to be checked it is same one
     // check for the same children. In this case return 0
       elementForId[a].oNode.getChildren();
       aNmbrChildren = (a.oNode.getChildren() || []).length;
       bNmbrChildren = (b.oNode.getChildren() || []).length;
       return bNmbrChildren - aNmbrChildren;
   });
 }

 aLaneIds = aLaneIds.sort(function(a, b) {
   return b - a;
 });

 // now we have in aLaneIds the lane orders and based on that we take from map the elements for the lanes.
 // now order based on the children
 aLaneIds.forEach(function(laneId) {
   aSingleLaneContent = oElementsForLane[laneId];

   if (aSingleLaneContent.length > 1) {
     aSingleContent = [];
     // we iterate through the all the children
     // put all the nodes having at least 1 common child next to each other
     oProcessedChildElement = aSingleLaneContent.shift();
     while (oProcessedChildElement) {
       if (aSingleContent.indexOf(oProcessedChildElement) < 0) {
         aSingleContent.push(oProcessedChildElement);
       }

       aSingleLaneContent.forEach(function(oSiblingElement) {
         if (oProcessedChildElement.containsChildren(oSiblingElement)) {
           aSingleContent.push(oSiblingElement);
         }
       });
       oProcessedChildElement = aSingleLaneContent.shift();
     } // while (oProcessedChild)
     finalSortedArray = finalSortedArray.concat(aSingleContent);
   } else {
     finalSortedArray = finalSortedArray.concat(aSingleLaneContent);
   }
 });

 return finalSortedArray;
};


/**
 * function calculates the connection and writes into the virtual matrix. It gets the matrix plus
 * parent children relationship
 * @param originalMatrix the matrix with the setup of nodes
 * @returns the matrix updated with the calculated paths
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.calculatePathInMatrix = function(
   originalMatrix) {
 // var currentElement = originalMatrix[0][0];
 var currentElement = null;

 for ( var key in this.nodePositions) {
   if (this.nodePositions.hasOwnProperty(key)) {
     currentElement = this.nodePositions[key];
     var arrayList = currentElement.c.oNode.getChildren();
     for (var i = 0; arrayList && i < arrayList.length; i++) {
       var positionChildrenObject = this.nodePositions[arrayList[i]];
       originalMatrix = this.calculateSingleNodeConnection(currentElement,
           positionChildrenObject, currentElement.x, currentElement.y,
           positionChildrenObject.x, positionChildrenObject.y, originalMatrix);
     }
   }
 }
 return originalMatrix;
};

/**
 * function based on the parent children position calculated the path from parent to children. The idea is like following
 * go from parent half right and use next connection column to go up or down. Afterwards on the line with children go
 * horizontal
 * @param nodeParent
 * @param nodeChildren
 * @param parentX
 * @param parentY
 * @param childrenX
 * @param childrenY
 * @param originalMatrix
 * @returns
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.calculateSingleNodeConnection = function(
    nodeParent, nodeChildren, parentX, parentY, childrenX, childrenY,
    originalMatrix) {
  var hor = childrenY - parentY;
  var ver = childrenX - parentX;
  if (hor < 0) {
    var errMsg = [ "Problem with negative horizontal movement",
               "Parent node is " + nodeParent.c.toString(),
               "Children node is " + nodeChildren.c.toString(),
               "Coordinates : '" + parentX + "','" + parentY + "','" + childrenX +  "','" +  childrenY  + "'"];
    throw errMsg;
  } else if (ver < -1) {
    // half left and up

    var bNormalHorizontalLinePossible =
      this.checkIfHorizontalLinePossible(originalMatrix, childrenX, parentY + 2, childrenY);
    var yPosition = childrenY-1;
    if( bNormalHorizontalLinePossible ) {
      yPosition = parentY + 1;
    }
    var xPosition = parentX;
    if( bNormalHorizontalLinePossible ) {
      xPosition = childrenX;
    }
    originalMatrix[parentX][yPosition] = this.createConnectionElement(
        originalMatrix[parentX][yPosition], sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.LU,
        nodeParent, nodeChildren, false );

    // going up to the children
    originalMatrix = this.writeVerticalLine(originalMatrix, parentX, childrenX, yPosition,
          nodeParent, nodeChildren);

    originalMatrix[childrenX][yPosition] =
      this.createConnectionElement(originalMatrix[childrenX][yPosition],
         sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.UR, nodeParent,
         nodeChildren, (yPosition == childrenY-1) );
      // pure right
    var startY = parentY + 2;
    var endY = childrenY;
    if( !bNormalHorizontalLinePossible) {
      startY = parentY +1;
      endY = yPosition + 1;
    }
    originalMatrix = this.writeHorizontalLine(originalMatrix, xPosition,
        startY, endY , nodeParent, nodeChildren);

  } else if (ver == -1) {
    // left and up
    originalMatrix[parentX][parentY + 1] =
        this.createConnectionElement(originalMatrix[parentX][parentY + 1],
        sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.LU, nodeParent,
        nodeChildren, false );
    // up and right
    originalMatrix[childrenX][parentY + 1] =
      this.createConnectionElement(originalMatrix[childrenX][parentY + 1],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.UR, nodeParent,
      nodeChildren, false );
    // horizontal line if possible
    originalMatrix = this.writeHorizontalLine(originalMatrix, childrenX,
        parentY + 2, childrenY, nodeParent, nodeChildren);
  } else if (ver === 0) {
    originalMatrix = this.writeHorizontalLine(originalMatrix, parentX,
        parentY + 1, childrenY, nodeParent, nodeChildren);
  } else if (ver === 1) {
    // 1 row down and do horizontal line
    // half and down
    originalMatrix[parentX][parentY + 1] =
      this.createConnectionElement(originalMatrix[parentX][parentY + 1],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.LD, nodeParent,
      nodeChildren, false );
    // down and right
    originalMatrix[childrenX][parentY + 1] =
      this.createConnectionElement(originalMatrix[childrenX][parentY + 1],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.DR, nodeParent,
      nodeChildren, (parentY+1) ==  (childrenY-1));
    // horizontal line to the target
    originalMatrix = this.writeHorizontalLine(originalMatrix, childrenX,
        parentY + 2, childrenY, nodeParent, nodeChildren);
  } else // ver > 1
  {
    // go down until children and do horizontal line
    // half left and down
    originalMatrix[parentX][parentY + 1] =
      this.createConnectionElement(originalMatrix[parentX][parentY + 1],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.LD, nodeParent,
      nodeChildren, false );
    originalMatrix = this.writeVerticalLine(originalMatrix, childrenX, parentX, parentY+1,
        nodeParent, nodeChildren);
    // half down and right
    originalMatrix[childrenX][parentY + 1] =
      this.createConnectionElement(originalMatrix[childrenX][parentY + 1],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.DR, nodeParent,
      nodeChildren, (parentY+1) == (childrenY-1) );
      originalMatrix = this.writeHorizontalLine(originalMatrix, childrenX,
          parentY + 2, childrenY, nodeParent, nodeChildren);
  }
  return originalMatrix;
};

/**
 * write vertical line from firstrow to lastrow on the column position
 * @private
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.writeVerticalLine = function(
    originalMatrix, firstRow, lastRow, column, nodeParent, nodeChildren) {
  for (var j = firstRow - 1; j > lastRow; j--) {
    originalMatrix[j][column] = this.createConnectionElement(originalMatrix[j][column],
        sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.DU, nodeParent,
        nodeChildren, false );
  } // end for
  return originalMatrix;
};

/**
*
* @private
* @param originalMatrix
* @param row
* @param firstColumn
* @param lastColumn
* @returns function return true, if the path is free, otherwise false
*/
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.checkIfHorizontalLinePossible = function(
   originalMatrix, row, firstColumn, lastColumn) {
 var bLinePossible = true;
 for (var i = firstColumn; i < lastColumn; i++) {
   if( originalMatrix[row][i] instanceof sap.suite.ui.commons.ProcessFlow.NodeElement ) {
     bLinePossible = false;
     break;
     };
   };

 return bLinePossible;
};

/**
 * function calculated and writes horizontal line
 * @param originalMatrix matrix to write to
 * @param row the horizontal position
 * @param firstColumn where to start
 * @param lastColumn where to stop
 * @param nodeParent definition of initial node
 * @param nodeChildren definition of target node
 * @returns
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.writeHorizontalLine = function(
    originalMatrix, row, firstColumn, lastColumn, nodeParent, nodeChildren) {
  var bPotentialArrow = (row == nodeChildren.x);
  // no arrow, no last line ... somewhere else will be (up and right)
  if( !bPotentialArrow ) {
    lastColumn--;
  }
  for (var i = firstColumn; i < lastColumn; i++) {
    originalMatrix[row][i] =
      this.createConnectionElement(originalMatrix[row][i],
      sap.suite.ui.commons.ProcessFlow.cellEdgeConstants.LR, nodeParent,
      nodeChildren, (i == (lastColumn-1)) && bPotentialArrow);
  }
  return originalMatrix;
};

/**
 * function adds new connection element to the cell in the matrix. It is additiv approach where during the
 * drawing phase all the connections in one cell will be joined togethe
 * @private
 * @param originalConnectionValue
 * @param addStringValue
 * @param initialNode
 * @param targetNode
 * @param bArrowRequired
 * @returns {sap.suite.ui.commons.ProcessFlowConnection}
 */
sap.suite.ui.commons.ProcessFlow.InternalMatrixCalculation.prototype.createConnectionElement = function(
    originalConnectionValue, addStringValue, initialNode, targetNode, bArrowRequired) {
  var tempOriginalConnectionValue = originalConnectionValue;
  if (!tempOriginalConnectionValue) {
    tempOriginalConnectionValue = new sap.suite.ui.commons.ProcessFlowConnection({
    });
  }

  var displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Regular;
  if( (targetNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ||
      targetNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused) &&
      (initialNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ||
          initialNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused)) {
    displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted;
  } else  if( targetNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed ||
      targetNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused ||
      initialNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed ||
          initialNode.c.displayState == sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused) {
    displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed;
  }
  var objConn = {flowLine: addStringValue, targetNodeState: targetNode.c.state,
      displayState: displayState,
      hasArrow : bArrowRequired};
  tempOriginalConnectionValue.addConnectionData( objConn );
  return tempOriginalConnectionValue;
};

sap.suite.ui.commons.ProcessFlow.cellEdgeConstants = {
  'LU' : 'tl', //it is going from Left to the middle and afterwards Up = top left
  'LD' : 'lb', //it is going from Left to the middle and afterwards Down = left bottom
  'DU' : 'tb', //it is going from Down to the middle and afterwards Up = top bottom
  'LR' : 'rl', //it is going from Left to the middle and afterwards Right = right left
  'DR' : 'rt', //it is going from Down to the middle and afterwards Right = right top
  'UR' : 'rb' //it is going from Up to the middle and afterwards Right = right bottom
}; // end of cell edge definition

String.prototype.contains = function(it) {
  return this.indexOf(it) != -1;
};


sap.suite.ui.commons.ProcessFlow.prototype.addNode = function( addNode ) {
  return this.addAggregation("nodes",addNode, false);
//  return this.addProperty();
};

/**
 * function sets the zoom level.
 * @param zoomLevel. this is a new zoom level of the type sap.suite.ui.commons.ProcessFlowZoomLevel
*/
sap.suite.ui.commons.ProcessFlow.prototype.setZoomLevel = function( zoomLevel ) {
  var $scrollContainer = this.$();
  if ($scrollContainer.context) {
    var oScrollContainerContextOld = {
      scrollWidth : $scrollContainer.context.scrollWidth,
      scrollHeight : $scrollContainer.context.scrollHeight,
      scrollLeft : $scrollContainer.context.scrollLeft,
      scrollTop : $scrollContainer.context.scrollTop
      };
    var oScrollContainerContextNew = oScrollContainerContextOld;
    if (this._zoomLevel === zoomLevel) {
      return;
    };
  };
  if (!(zoomLevel in sap.suite.ui.commons.ProcessFlowZoomLevel)){ // Enumeration
    this._handleException("\"" + zoomLevel + "\" is not a valid entry of the enumeration for property zoom level of ProcessFlow");
    return;
  };
  this._zoomLevel = zoomLevel;
  this.rerender();
  if (oScrollContainerContextOld) {
    // set the grab cursor class in case for touch devices
    if (sap.ui.Device.support.touch || jQuery.sap.simulateMobileOnDesktop) {
      var iHeight = parseInt(this.$().css("height").slice(0, -2), 10);
      var iWidth = parseInt(this.$().css("width").slice(0, -2), 10);
      var iScrollHeight = this.$()[0].scrollHeight;
      var iScrollWidth = this.$()[0].scrollWidth;
      if (this.getScrollable() && (iScrollHeight > iHeight || iScrollWidth > iWidth)) {
        this._switchCursors(this.$(), this._defaultCursorClass, this._grabCursorClass);
        this.$().css("overflow", "auto");
      }
    };
    $scrollContainer = this.$();
    oScrollContainerContextNew = this._getScrollContainerOnZoomChanged(oScrollContainerContextOld, $scrollContainer);
    $scrollContainer.scrollLeft(oScrollContainerContextNew.scrollLeft);
    $scrollContainer.scrollTop(oScrollContainerContextNew.scrollTop);
  }
};

/**
 * function returns current zoom level.
 * @return zoomLevel.
*/
sap.suite.ui.commons.ProcessFlow.prototype.getZoomLevel = function() {
  return this._zoomLevel;
};

/**
 * function sets new zoom level with smaller level of details. Having the least detail view it stays as it is.
*/
sap.suite.ui.commons.ProcessFlow.prototype.zoomOut = function( ) {
  var currentZoomLevel = this.getZoomLevel();
  var newLevel = currentZoomLevel;
  switch (currentZoomLevel) {
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.One):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Two;
          break;
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.Two):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Three;
          break;
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.Three):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Four;
          break;
          };
  this.setZoomLevel(newLevel);
  return this.getZoomLevel();
};

/**
 * function sets new zoom level with higher level of details. Having max details it stays as it is.
*/
sap.suite.ui.commons.ProcessFlow.prototype.zoomIn = function( ) {
  var currentZoomLevel = this.getZoomLevel();
  var newLevel = currentZoomLevel;
  switch (currentZoomLevel) {
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.Four):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Three;
          break;
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.Three):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Two;
          break;
        case (sap.suite.ui.commons.ProcessFlowZoomLevel.Two):
          newLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.One;
          break;
          };
  this.setZoomLevel(newLevel);
  return this.getZoomLevel();
};

sap.suite.ui.commons.ProcessFlow.prototype.updateModel = function() {
  //this.getModel(this.getBindingInfo("nodes").model).refresh();
  //initialize internalLanes so that they get recalculated from the new nodes
  this._internalLanes = [];
  if(this._isHeaderMode()) {
    var laneModel = this.getBindingInfo("lanes");
    this.getModel(laneModel.model).refresh();
  }
  else {
    var nodeModel = this.getBindingInfo("nodes");
    this.getModel(nodeModel.model).refresh();
  }
  this.rerender();
};

sap.suite.ui.commons.ProcessFlow.prototype.updateNodesOnly = function() {
  var nodeModel = this.getBindingInfo("nodes");
  this.getModel(nodeModel.model).refresh();
  this.rerender();
};

/**
 * function returns the nodeId of the node which is focused.
 */
sap.suite.ui.commons.ProcessFlow.prototype.getFocusedNode = function() {
  if (this._lastNavigationFocusNode.sId) {
    return this._lastNavigationFocusNode.sId;
  }
};

 /**
 * @param {sap.ui.base.Event} oEvent
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype.ontouchend = function(oEvent) {
  if (!sap.ui.Device.support.touch && !jQuery.sap.simulateMobileOnDesktop) {
    this.onAfterRendering();
  }
  if (oEvent === null || oEvent.oSource === undefined) {
    return false;
  }
  oEvent.preventDefault();

  if (this && this._isHeaderMode()) {
    // reset lanes as they could be redefined completely in headerPress Event - also necessary for merged lanes
    this._internalLanes = [];
    this.fireHeaderPress(this);
  }
  return false;
};

sap.suite.ui.commons.ProcessFlow.prototype._isHeaderMode = function() {
  var aNodes = this.getNodes();
  return !aNodes || (aNodes.length == 0);
};

/**
 * Switch cursors for scrollable/non-scrollable content.
 * @param {object} $scrollContainer the affected scroll container (jQuery object)
 * @param {String} sCursorClassFrom class containing the original cursor definition
 * @param {String} sCursorClassTo class containing the new cursor definition
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._switchCursors = function($scrollContainer, sCursorClassFrom, sCursorClassTo) {
  if ($scrollContainer.hasClass(sCursorClassFrom)) {
    $scrollContainer.removeClass(sCursorClassFrom);
  }
  if (!$scrollContainer.hasClass(sCursorClassTo)) {
    $scrollContainer.addClass(sCursorClassTo);
  }
};

/**
 * Clear the mouse handlers for the scrolling functionality.
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._clearHandlers = function($scrollContainer) {
  $scrollContainer.bind(this._mousePreventEvents,jQuery.proxy(this._handlePrevent, this)); 
};

  sap.suite.ui.commons.ProcessFlow.prototype._handlePrevent = function(oEvent) {
    if (oEvent && !oEvent.isDefaultPrevented()) {
      oEvent.preventDefault();
    }
    if (oEvent && !oEvent.isPropagationStopped()) {
      oEvent.stopPropagation();
    }
    if (oEvent && !oEvent.isImmediatePropagationStopped()) {
      oEvent.stopImmediatePropagation();
    }
  };


/**
 * Standard method called after the control rendering.
 */
sap.suite.ui.commons.ProcessFlow.prototype.onAfterRendering = function () {
  var bScrollable = false
  , $content = this.$("scroll-content")
  , iHeight
  , iWidth
  , iScrollWidth
  , iScrollHeight
//, $scrollContainer
  , that = this;
  
   this.nCursorXPosition = 0;
   this.nCursorYPosition = 0;
  
  if ($content && $content.length) {
    // set PF node icon cursors, because these are unfortunately set as inline styles, so cannot be overriden by applying a css class.
	//  $scrollContainer = this.$();
	  this.$().find('.sapSuiteUiCommonsProcessFlowNode .sapUiIcon').css("cursor", "inherit");

    if (this.getScrollable()) {
      iHeight = parseInt(this.$().css("height").slice(0, -2), 10);
      iWidth = parseInt(this.$().css("width").slice(0, -2), 10);
      iScrollHeight = $content[0].scrollHeight;
      iScrollWidth = $content[0].scrollWidth;

      if (iScrollHeight <= iHeight && iScrollWidth <= iWidth) {
        this._clearHandlers(this.$());
        // no scrolling makes sense, so clean up the mouse handlers and switch the cursors
        this._switchCursors(this.$(), this._grabCursorClass, this._defaultCursorClass);
      } else {
        this._switchCursors(this.$(), this._defaultCursorClass, this._grabCursorClass);
        bScrollable = true;
      }
    } else {
      this._clearHandlers(this.$());
      this._switchCursors(this.$(), this._grabCursorClass, this._defaultCursorClass);
      this.$().css("overflow", "visible");
      $content.css("position", "static");
    }
    if (bScrollable) {
      if (!sap.ui.Device.support.touch && !jQuery.sap.simulateMobileOnDesktop) {
        this.$().bind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
      } else {
        this._clearHandlers(this.$());
        this.$().css("overflow", "auto");
      }
    }
    if (that.getWheelZoomable() && !sap.ui.Device.support.touch && !jQuery.sap.simulateMobileOnDesktop && !that._isHeaderMode()) { //only on desktop browsers, only in non-header mode
      this.$().bind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this)); 
    }
    this._resizeRegId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(sap.suite.ui.commons.ProcessFlow.prototype._onResize, this));
  }
};


sap.suite.ui.commons.ProcessFlow.prototype._registerMouseWheel = function  (oEvent) {
        var oDirection = oEvent.originalEvent.wheelDelta || -oEvent.originalEvent.detail;
        var that = this;
        if (oEvent && !oEvent.isDefaultPrevented()) {
          oEvent.preventDefault();
          oEvent.originalEvent.returnValue = false;
        }

        var waitTime = 300;
        var doNotListen = function() {
          var diff = new Date() - that._wheelTimestamp;

          if (diff < waitTime) {
            that._wheelTimeout = window.setTimeout(doNotListen, waitTime - diff);
          } else {
            that._wheelTimeout = null;
            that._wheelCalled = false;
          }
        };
        if (!that._wheelCalled) {
          that._wheelCalled = true;

          if (oDirection < 0) {
            that.zoomOut();
          } else {
            that.zoomIn();
          }
        }
        if (! that._wheelTimeout) {
          that._wheelTimestamp = new Date();
          that._wheelTimeout = window.setTimeout(doNotListen, waitTime);
        }
        if (oEvent && !oEvent.isPropagationStopped()) {
          oEvent.stopPropagation();
        }
        if (oEvent && !oEvent.isImmediatePropagationStopped()) {
          oEvent.stopImmediatePropagation();
        }
};

  sap.suite.ui.commons.ProcessFlow.prototype._registerMouseEvents = function (oEvent) {

          if (oEvent && !oEvent.isDefaultPrevented()) {
            oEvent.preventDefault();
          }
          switch(oEvent.type) {
            case 'mousemove':
              if (this.$().hasClass(this._grabbingCursorClass)) {
                if (sap.ui.getCore().getConfiguration().getRTL()) {
                	this.$().scrollLeftRTL(this.nCursorXPosition - oEvent.pageX);
                }
                else {
                	this.$().scrollLeft(this.nCursorXPosition - oEvent.pageX);
                }
                this.$().scrollTop(this.nCursorYPosition - oEvent.pageY);
              }
              break;
            case 'mousedown':
              this._switchCursors(this.$(), this._defaultCursorClass, this._grabbingCursorClass);
              if (sap.ui.getCore().getConfiguration().getRTL()) {
            	  this.nCursorXPosition = this.$().scrollLeftRTL() + oEvent.pageX;
              } else {
            	  this.nCursorXPosition = this.$().scrollLeft() + oEvent.pageX;
              }
              this.nCursorYPosition = this.$().scrollTop() + oEvent.pageY;
              break;
            case 'mouseup':
              this._switchCursors(this.$(), this._grabbingCursorClass, this._grabCursorClass);
              break;
            case 'mouseleave':
              this.$().removeClass(this._grabbingCursorClass);
              this.$().removeClass(this._grabCursorClass);
              this.$().addClass(this._defaultCursorClass);
              break;
            case 'mouseenter':
            	this.$().removeClass(this._defaultCursorClass);
              if (oEvent.buttons == null) {
                if (oEvent.which === 1) {
                	this.$().addClass(this._grabbingCursorClass);
                }
                else {
                	this.$().addClass(this._grabCursorClass);
                }
              }
              else {
               if ( oEvent.buttons === 0) {
            	   this.$().addClass(this._grabCursorClass);
              }
              else if ( oEvent.buttons === 1) { 
            	  this.$().addClass(this._grabbingCursorClass);
              }
             }
             break;
             }
          if (oEvent && !oEvent.isPropagationStopped()) {
            oEvent.stopPropagation();
          }
          if (oEvent && !oEvent.isImmediatePropagationStopped()) {
            oEvent.stopImmediatePropagation();
          }
};


/**
 * Control resize handler for setting the cursor type/scroll setup.
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._onResize = function() {
  var iActualTime = new Date().getTime();

  if (!this._iLastResizeEventTime || ((iActualTime - this._iLastResizeEventTime) < 50)) {
      // start to handle after the second resize event (below 50ms)
      if (!this._iLastResizeHandlingTime || (iActualTime - this._iLastResizeHandlingTime > 500)) { // handle each .5s
        this.onAfterRendering();
        this._iLastResizeHandlingTime = new Date().getTime();
      }
  } else {
    this._iLastResizeHandlingTime = null;
  }

  this._iLastResizeEventTime = new Date().getTime();
};

sap.suite.ui.commons.ProcessFlow._enumMoveDirection = {
    'LEFT' : 'left', // move left
    'RIGHT' : 'right', // move right
    'UP' : 'up', // move left
    'DOWN' : 'down' // move right
  }; // end of move enumeration

/**
 * Changes the navigation focus to the specified node on mouse click.
 * @param {sap.suite.ui.commons.ProcessFlowNode} the new node to focus to
 * @private
 * @since 1.23
 */
sap.suite.ui.commons.ProcessFlow.prototype._setFocusOnMouseClick = function(oNode) {
  var oNodeFrom = this._lastNavigationFocusNode
    , oNodeTo = oNode
    ;
  this._lastNavigationFocusNode = oNodeTo;
  this._bKeyboardInputActive = this._bKeyboardInputActive || false;

  if (this._bKeyboardInputActive == false) {
    // get the current offset
    var $scrollContainer = this.$();
    var oScrollContainerContext = {
      scrollLeft : $scrollContainer.context.scrollLeft,
      scrollTop : $scrollContainer.context.scrollTop
    };
    // set the focus to the PF table to grab the keyboard input further on
    this.getDomRef().children[0].children[0].focus();
    // set the offset back
    $scrollContainer.scrollLeft(oScrollContainerContext.scrollLeft);
    $scrollContainer.scrollTop(oScrollContainerContext.scrollTop);
    this._bKeyboardInputActive = true;
  };

  this._changeNavigationFocus(oNodeFrom, oNodeTo);
};

/**
 * Changes the navigation focus from the actual node to the node specified as parameter.
 * Calls rerender on both nodes.
 * @param {sap.suite.ui.commons.ProcessFlowNode} oNodeFrom the old focused node
 * @param {sap.suite.ui.commons.ProcessFlowNode} oNodeTo the new node to focus to
 * @private
 * @since 1.23
 */
sap.suite.ui.commons.ProcessFlow.prototype._changeNavigationFocus = function (oNodeFrom, oNodeTo) {
  if (oNodeFrom && oNodeTo && (oNodeFrom.getId() !== oNodeTo.getId())) {
    jQuery.sap.log.debug("Rerendering PREVIOUS node with id '" + oNodeFrom.getId()
     + "' and title '" + oNodeFrom.getTitle()
     + "' navigation focus : "
     + oNodeFrom._getNavigationFocus()
    );
    oNodeFrom._setNavigationFocus(false);
    oNodeFrom.rerender();
  }

  if ((oNodeFrom && oNodeTo && (oNodeFrom.getId() !== oNodeTo.getId())) || oNodeTo) {
    jQuery.sap.log.debug("Rerendering CURRENT node with id '" + oNodeTo.getId()
      + "' and title '" + oNodeTo.getTitle()
      + "' navigation focus : "
      + oNodeTo._getNavigationFocus()
    );
    oNodeTo._setNavigationFocus(true);
    oNodeTo.rerender();
    this._onFocusChanged();
  }
};

/**
 * function reacts on page up and page down. it should go 5 lines up or down.
 * or little bit less if there is not enough space
 * with alt page up move focus left by 5 items maximum
 * with alt page down move focus right by 5 items maximum
 * @param direction please see sap.suite.ui.commons.ProcessFlow._enumMoveDirection
 * @param altKey, true if alt key is pressed, false otherwise
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._moveOnePage = function( direction, altKey ) {
  direction = direction || sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP;
  altKey = altKey || false;
  // search for navigated element
  var origX = 0, origY = 0;
  var newX = 0, newY = 0;
  var nodesOver = 0;
  var bNewNodeFound = false;
  for( var i = 0; i < this._internalCalcMatrix.length; i++ ) {
    for( var j = 0; j < this._internalCalcMatrix[i].length; j++ ) {
      if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode && this._internalCalcMatrix[i][j]._getNavigationFocus()) {
        origX = i;
        origY = j;
        break;
      }
    }
  }

  // going 5 elements on the same row
  if( altKey ) {
      if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP) {
        for( var j = origY-1; j>=0 && nodesOver < this._jumpOverElements; j--) {
          if( this._internalCalcMatrix[origX][j] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[origX][j].getHighlighted())) {
            nodesOver++;
            newX = origX;
            newY = j;
            bNewNodeFound = true;
          }
        }
      } else if ( direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.DOWN) {
        for( var j = origY + 1; j < this._internalCalcMatrix[origX].length && nodesOver < this._jumpOverElements; j++) {
          if( this._internalCalcMatrix[origX][j] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[origX][j].getHighlighted())) {
            nodesOver++;
            newX = origX;
            newY = j;
            bNewNodeFound = true;
          };
        };
      };
    } else {
      if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP) {
        for( var i = origX-1; i >= 0 && nodesOver < this._jumpOverElements; i--) {
          if( this._internalCalcMatrix[i][origY] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[i][origY].getHighlighted())) {
            nodesOver++;
            newX = i;
            newY = origY;
            bNewNodeFound = true;
          }
        }
      } else if ( direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.DOWN) {
        for( var i = origX + 1; i < this._internalCalcMatrix.length && nodesOver < this._jumpOverElements; i++) {
          if( this._internalCalcMatrix[i][origY] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[i][origY].getHighlighted())) {
            nodesOver++;
            newX = i;
            newY = origY;
            bNewNodeFound = true;
          };
        };
      };
  }

  if( bNewNodeFound ) {
    this._internalCalcMatrix[origX][origY]._setNavigationFocus(false);
    this._internalCalcMatrix[newX][newY]._setNavigationFocus(true);
    this._lastNavigationFocusNode = this._internalCalcMatrix[newX][newY];
  }

  return bNewNodeFound;
};

/**
 * function reacts on home/end. it should go to the first/last element on given row.
 * with ctrl it goes to the first/last active element on the process flow
 * or little bit less if there is not enough space
 * @param direction please see sap.suite.ui.commons.ProcessFlow._enumMoveDirection
 * LEFT -> HOME
 * RIGHT -> END
 * @param ctrlKey, true if ctrl key is pressed
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._moveHomeEnd = function( direction, ctrlKey ) {
  direction = direction || sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT;
  ctrlKey = ctrlKey || false;
  // search for navigated element
  var origX = 0, origY = 0;
  var newX = 0, newY = 0;
  var bNewNodeFound = false;
  for( var i = 0; i < this._internalCalcMatrix.length; i++ ) {
    for( var j = 0; j < this._internalCalcMatrix[i].length; j++ ) {
      if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode && this._internalCalcMatrix[i][j]._getNavigationFocus()) {
        origX = i;
        origY = j;
        break;
      }
    }
  }

  // TODO
  // check the RTL behaviour when home/end on one row ....

  // going to the first / last element on the given column
  if( ctrlKey ) {
      if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT) {
         for( var i = 0; i < origX ; i++) {
           if( this._internalCalcMatrix[i][origY] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[i][origY].getHighlighted())) {
             newX = i;
             newY = origY;
             bNewNodeFound = true;
             break;
           }
        }
      } else if ( direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT) {
        for( var i = this._internalCalcMatrix.length-1; i > origX; i--) {
          if( this._internalCalcMatrix[i][origY] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[i][origY].getHighlighted())) {
            newX = i;
            newY = origY;
            bNewNodeFound = true;
            break;
          }
       }
      };
    } else { // going to the first/last element of the row
      if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT) {
        for( var j = 0; j < origY; j++) {
          if( this._internalCalcMatrix[origX][j] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[origX][j].getHighlighted())) {
            newX = origX;
            newY = j;
            bNewNodeFound = true;
            break;
          }
        }
      } else if ( direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT) {
        for( var j = this._internalCalcMatrix[origX].length -1; j > origY; j--) {
          if( this._internalCalcMatrix[origX][j] instanceof sap.suite.ui.commons.ProcessFlowNode && (!this._bHighlightedMode || this._internalCalcMatrix[origX][j].getHighlighted())) {
            newX = origX;
            newY = j;
            bNewNodeFound = true;
            break;
          };
        };
      };

  }

  if( bNewNodeFound ) {
    this._internalCalcMatrix[origX][origY]._setNavigationFocus(false);
    this._internalCalcMatrix[newX][newY]._setNavigationFocus(true);
    this._lastNavigationFocusNode = this._internalCalcMatrix[newX][newY];
  }
  return bNewNodeFound;
};
/**
 * function moves the focus to the next node based on tab behaviour
 * First going left, after to the next row
 * @param direction please see enumeration Direction ( sap.suite.ui.commons.ProcessFlow._enumMoveDirection )
 * @returns true if the next element is possible to set. False if there is not more elements to set.
 */
sap.suite.ui.commons.ProcessFlow.prototype._moveToNextNode = function( direction, step ) {
// first find the current focus element
  direction = direction || sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT;

  if (sap.ui.getCore().getConfiguration().getRTL()) {
    if (direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT) {
      direction = sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT;
    } else if (direction === sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT) {
      direction = sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT;
    }
  }

  step = step || 1;

  var bFocusNodeFound = false;
  var bNewNodeSet = false;
  var origX = 0, origY = 1;
  if( ! this._internalCalcMatrix ) {
    return;
  }
// first search for node which is focused
  var posX = 0, posY = 0;
  for( var i = 0; i < this._internalCalcMatrix.length; i++ ) {
    for( var j = 0; j < this._internalCalcMatrix[i].length; j++ ) {
        if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode && this._internalCalcMatrix[i][j]._getNavigationFocus()) {
          origX = posX = i;
          origY = posY = j;
          bFocusNodeFound = true;
          break;
        }
      }
      if( bFocusNodeFound ) {
        break;
      }
    }

  if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT) {
    for( var i = posX; i < this._internalCalcMatrix.length; i++ ) {
      for( var j = posY+1; j < this._internalCalcMatrix[i].length; j++ ) {
        if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][j].getHighlighted()) ) {
            this._internalCalcMatrix[i][j]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][j];
            bNewNodeSet = true;
            break;
          }
        }
      } // end loop j
      // shortcut, we have done already everything.
      posY = 0; // first posX line was from posY, now from zero again. The plus one does not hurt, because first column is empty
      if( bNewNodeSet ) {
          break;
      }
    } // end loop i
  } //end right direction

  if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT) {
    for( var i = posX; i >= 0 ; i-- ) {
      for( var j = posY-1; j >= 0; j-- ) {
        if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][j].getHighlighted()) ) {
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][j]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][j];
            bNewNodeSet = true;
            break;
          }
        }
      } // end loop j
      if( i > 0) {
        posY = this._internalCalcMatrix[i-1].length;
      }
      // shortcut, we have done already everything.
      if( bNewNodeSet ) {
          break;
      }
    } // end loop i
  } //end right direction

  if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP) {
    // go through lines
    for( var i =  posX -1; i >= 0 ; i--) {
      // we have single line, check from posY first left, after right.
      var deviation = 0;
      while( !bNewNodeSet ) {
        var yPositionLeft = posY-deviation;
        var yPositionRight = posY+deviation;
        if( yPositionLeft >= 0 && this._internalCalcMatrix[i][yPositionLeft] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][yPositionLeft].getHighlighted()) ) {
            this._internalCalcMatrix[i][yPositionLeft]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionLeft];
            bNewNodeSet = true;
            break;
          }
        }// end of processflownode for left
        if( yPositionRight < this._internalCalcMatrix[i].length && this._internalCalcMatrix[i][yPositionRight] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][yPositionRight].getHighlighted()) ) {
            this._internalCalcMatrix[i][yPositionRight]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionRight];
            bNewNodeSet = true;
            break;
          }
        }// end of processflownode for right
        // we are out of this line for Y position
        if( yPositionLeft < 0 && yPositionRight > this._internalCalcMatrix[i].length) {
          break;
        }
        deviation++;
      }// end while
    }// end for i
  }// end direction UP

  if( direction == sap.suite.ui.commons.ProcessFlow._enumMoveDirection.DOWN) {
    // go through lines
    for( var i =  posX  + 1; i < this._internalCalcMatrix.length ; i++) {
      // we have single line, check from posY first left, after right.
      var deviation = 0;
      while( !bNewNodeSet ) {
        var yPositionLeft = posY-deviation;
        var yPositionRight = posY+deviation;
        if( yPositionLeft >= 0 && this._internalCalcMatrix[i][yPositionLeft] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][yPositionLeft].getHighlighted()) ) {
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionLeft]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionLeft];
            bNewNodeSet = true;
            break;
          }
        }// end of processflownode for left
        if( yPositionRight < this._internalCalcMatrix[i].length && this._internalCalcMatrix[i][yPositionRight] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          if(  bFocusNodeFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][yPositionRight].getHighlighted()) ) {
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionRight]._setNavigationFocus(true);
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][yPositionRight];
            bNewNodeSet = true;
            break;
          }
        }// end of processflownode for right
        // we are out of this line for Y position
        if( yPositionLeft < 0 && yPositionRight > this._internalCalcMatrix[i].length) {
          break;
        }
        deviation++;
      }// end while
    }// end for i
  }// end direction DOWN

  if( bNewNodeSet ) {
    this._internalCalcMatrix[origX][origY]._setNavigationFocus(false);
  }
  return bNewNodeSet;
};

// ==============================================================================================
// == keyboard events handling support
// ==============================================================================================
// internal PF flag whether navigation focus should be released from this control.
sap.suite.ui.commons.ProcessFlow.prototype._bNFocusOutside = false;
// internal PF flag whether we operate in highlighted mode.
sap.suite.ui.commons.ProcessFlow.prototype._bHighlightedMode = false;


// --------------------------------------------------------------------------------------------
sap.suite.ui.commons.ProcessFlow.prototype.getFocusDomRef = function() {
  var oDomRef = this.getDomRef().children[0].children[0];
  jQuery.sap.log.debug("ProcessFlow::getFocusDomRef : Keyboard focus has been changed to element:  id='"+ oDomRef.id + "' outerHTML='" + oDomRef.outerHTML +"'");
  return oDomRef;
};

//--------------------------------------------------------------------------------------------
/**
 * process flow has the focus, now it is neccessary to set the navigation
 * the method is called both when process flow gets the focus and at any click event
 */
sap.suite.ui.commons.ProcessFlow.prototype.onfocusin = function(oEvent) {
// set the navigation focus to the lane header if in lanes-only mode
  if (this._isHeaderMode()) {
    this._setFocusOnHeader(true);
  }
  else {
    jQuery.sap.log.debug("ProcessFlow::focus in" + (this._lastNavigationFocusNode ? this._lastNavigationFocusNode.getTitle() : "not defined"));
    if( this._lastNavigationFocusNode ) {
      this._lastNavigationFocusNode._setNavigationFocus(true);
      this._lastNavigationFocusNode.rerender();
    }
    else { // define navigation focus from root
      var bNodeFound = false;
      for( var i = 0; i < this._internalCalcMatrix.length; i++ ) {
        for( var j = 0; j < this._internalCalcMatrix[i].length; j++ ) {
          if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
            this._internalCalcMatrix[i][j]._setNavigationFocus(true);
            this._internalCalcMatrix[i][j].rerender();
            this._lastNavigationFocusNode = this._internalCalcMatrix[i][j];
            bNodeFound = true;
            break;
          }
        } // end inner loop
        if( bNodeFound ) {
          break;
        }
      }
    }
  }

};

sap.suite.ui.commons.ProcessFlow.prototype.onfocusout = function(oEvent) {
  jQuery.sap.log.debug("ProcessFlow::focus out" + (this._lastNavigationFocusNode ? this._lastNavigationFocusNode.getTitle() : "not defined"));
  for( var i = 0; i < this.getNodes().length; i++ ) {
    if( this.getNodes()[i]._getNavigationFocus() ) {
      this._lastNavigationFocusNode = this.getNodes()[i];
      this.getNodes()[i]._setNavigationFocus(false);
      this.getNodes()[i].rerender();
    }
  }
  jQuery.sap.log.info("focus out");
};

/**
 * Method called on zoom change. Scrolls the PF content after a zoom change so, that the focused content of the scroll container stays in focus (if possible).
 * @private
 * @since 1.26
 */
sap.suite.ui.commons.ProcessFlow.prototype._getScrollContainerOnZoomChanged = function(oScrollContainerContext, $scrollContainer) {
  oScrollContainerContext.scrollLeft = Math.round($scrollContainer.context.scrollWidth / oScrollContainerContext.scrollWidth * oScrollContainerContext.scrollLeft);
  oScrollContainerContext.scrollTop = Math.round($scrollContainer.context.scrollHeight / oScrollContainerContext.scrollHeight * oScrollContainerContext.scrollTop);
  oScrollContainerContext.scrollWidth = $scrollContainer.context.scrollWidth;
  oScrollContainerContext.scrollHeight = $scrollContainer.context.scrollHeight;

  return oScrollContainerContext;
};

/**
 * Method called on navigation focus change. Scrolls the PF content, so the node is as close to the middle of the scroll container viewport as possible.
 * @private
 * @since 1.23
 */
sap.suite.ui.commons.ProcessFlow.prototype._onFocusChanged = function() {
  var oFocusedNode = this._lastNavigationFocusNode
    , $focusedNode = oFocusedNode ? oFocusedNode.$() : null
   // , $scrollContainer
    , iScrollInnerWidth
    , iScrollInnerHeight
    , iScrollLeft
    , iScrollTop
    , $scrollContent
    , iContentInnerWidth
    , iContentInnerHeight
    , iNodeOuterWidth
    , iNodeOuterHeight
    , oPositionInContent
    , iNL, iNT, iNR, iNB
    , iCL, iCT
    , max = function(a,b) { return (a > b) ? a : b; }
    , min = function(a,b) { return (a < b) ? a : b; }
    , iScrollTimeInMillis = 500
    ;

  if (oFocusedNode && this.getScrollable()) {
    jQuery.sap.log.debug("The actually focused node is " + oFocusedNode.getId() + " with title " + oFocusedNode.getTitle());
    iNodeOuterWidth  = $focusedNode.outerWidth();
    iNodeOuterHeight = $focusedNode.outerHeight();
    jQuery.sap.log.debug("Node outer width x height [" + iNodeOuterWidth + " x " + iNodeOuterHeight + "]");

    oPositionInContent = $focusedNode.position(); // oPositionInContent.left, oPositionInContent.top
    jQuery.sap.log.debug("Position of node in the content is [" + oPositionInContent.left + ", " + oPositionInContent.top + "]");

  //  $scrollContainer = this.$();
    $scrollContent = this.$("scroll-content");
    iScrollInnerWidth = this.$().innerWidth();
    iScrollInnerHeight = this.$().innerHeight();
    jQuery.sap.log.debug("Scroll container inner width x height [" + iScrollInnerWidth + " x " + iScrollInnerHeight + "]");

    iScrollLeft = this.$().scrollLeft();
    iScrollTop = this.$().scrollTop();
    jQuery.sap.log.debug("Current scroll offset is [" + iScrollLeft + ", " + iScrollTop + "]");

    iContentInnerWidth = $scrollContent.innerWidth();
    iContentInnerHeight = $scrollContent.innerHeight();
    jQuery.sap.log.debug("Scroll content inner width x height [" + iContentInnerWidth + " x " + iContentInnerHeight + "]");

    iNL = -iScrollLeft + oPositionInContent.left;
    iNR = iNL + iNodeOuterWidth;
    iNT= -iScrollTop + oPositionInContent.top;
    iNB = iNT + iNodeOuterHeight;

    // check if the node lies (even in part) out of the scroll container visible part
    if ((iNR > iScrollInnerWidth) || (iNL < 0) || (iNB > iScrollInnerHeight) || (iNT < 0)) {
      iCL = Math.round((iScrollInnerWidth - iNodeOuterWidth)/2);
      iCL = max(iScrollInnerWidth - iContentInnerWidth + oPositionInContent.left, iCL);
      iCL = min(oPositionInContent.left, iCL);

      iCT = Math.round((iScrollInnerHeight - iNodeOuterHeight)/2);
      iCT = max(iScrollInnerHeight - iContentInnerHeight + oPositionInContent.top, iCT);
      iCT = min(oPositionInContent.top, iCT);

      jQuery.sap.log.debug("Node lies outside the scroll container, scrolling from [" + iNL + "," + iNT + "] to [" + iCL + "," + iCT + "]");
      this.$().animate({
        scrollTop: oPositionInContent.top - iCT,
        scrollLeft: oPositionInContent.left - iCL
      }, iScrollTimeInMillis, "swing");
    } else {
      jQuery.sap.log.debug("Node lies inside the scroll container, no scrolling happens.");
    }
  }
};

/**
 * Method called if the ProcessFlow has the navigation focus and the key '+' is pressed ( for keyboard support)
 * @private
 * @since 1.26
 */
sap.suite.ui.commons.ProcessFlow.prototype.onsapplus = function(oEvent) {
    this.zoomIn();
}

/**
 *  Method called if the ProcessFlow has the navigation focus and the key '-' is pressed ( for keyboard support)
 * @private
 * @since 1.26
 */
sap.suite.ui.commons.ProcessFlow.prototype.onsapminus = function(oEvent) {
    this.zoomOut();
}

// --------------------------------------------------------------------------------------------
sap.suite.ui.commons.ProcessFlow.prototype.onkeydown = function(oEvent) {
  var keycode = (oEvent.keyCode ? oEvent.keyCode : oEvent.which);
  jQuery.sap.log.debug("ProcessFlow::keyboard input has been catched and action going to start: keycode=" + keycode);

  var bNFocusChanged = false;
  var bReleaseNFocus = false;
  var oReleaseNFocus = null;
  var shiftKeyPressed = oEvent.shiftKey;
  var ctrlKeyPressed = oEvent.ctrlKey;
  var altKeyPressed = oEvent.altKey;
  var oFocusedNode;
  var previousNavigationNode = this._lastNavigationFocusNode;
  var thead;

  switch (keycode) {
    //ENTER and SPACE are fired onkeyup according to the spec
    case jQuery.sap.KeyCodes.TAB:
      if (shiftKeyPressed) {
        oReleaseNFocus = this.getDomRef().parentElement.previousElementSibling;
        if (this._isHeaderMode()) { // lanes-only
          this._setFocusOnHeader(false);
        }
      }
      else {
        if (this._isHeaderMode()) { // lanes-only
          if (!this._headerHasFocus) {
            this._setFocusOnHeader(true);
          } 
          else {
            this._setFocusOnHeader(false);
            oReleaseNFocus = this.getDomRef().parentElement.nextElementSibling;
            bReleaseNFocus = true;
          }
        }
        else {
          oReleaseNFocus = this.getDomRef().parentElement.nextElementSibling;
          bReleaseNFocus = true;
        }
      }
      
      break;
    case jQuery.sap.KeyCodes.ARROW_RIGHT:
      bNFocusChanged = this._moveToNextNode(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT);
      break;
    case jQuery.sap.KeyCodes.ARROW_LEFT:
      bNFocusChanged = this._moveToNextNode(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT);
      break;
    case jQuery.sap.KeyCodes.ARROW_DOWN:
      bNFocusChanged = this._moveToNextNode(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.DOWN);
      break;
    case jQuery.sap.KeyCodes.ARROW_UP:
      bNFocusChanged = this._moveToNextNode(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP);
      break;
    case jQuery.sap.KeyCodes.PAGE_UP:
      bNFocusChanged = this._moveOnePage(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.UP, altKeyPressed);
      break;
    case jQuery.sap.KeyCodes.PAGE_DOWN:
      bNFocusChanged = this._moveOnePage(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.DOWN, altKeyPressed);
      break;
    case jQuery.sap.KeyCodes.HOME:
      bNFocusChanged = this._moveHomeEnd(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.LEFT, ctrlKeyPressed);
      break;
    case jQuery.sap.KeyCodes.END:
      bNFocusChanged = this._moveHomeEnd(sap.suite.ui.commons.ProcessFlow._enumMoveDirection.RIGHT, ctrlKeyPressed);
      break;
    case jQuery.sap.KeyCodes.NUMPAD_0:
    case jQuery.sap.KeyCodes.DIGIT_0:
        this.setZoomLevel(sap.suite.ui.commons.ProcessFlowZoomLevel.Two);
      break;
    default:
      // it was not our key, let default action be executed if any
      return;

  } // end switch keycode

  // it was our key, default action has to suppressed
  oEvent.preventDefault();

  if (bNFocusChanged) {
    // we have to re-render when we changed Nfocus inside our control
    this._changeNavigationFocus(previousNavigationNode, this._lastNavigationFocusNode);
  }

  if (oReleaseNFocus) {
    // we have to make focus to element outside our control
    oReleaseNFocus.focus();
    jQuery.sap.log.debug("keypressdown: Keyboard focus has been changed to element:  id='"+ oReleaseNFocus.id + "' outerHTML='" + oReleaseNFocus.outerHTML +"'");
    oReleaseNFocus = null;
  }

};

sap.suite.ui.commons.ProcessFlow.prototype.onkeyup = function(oEvent) {
  var keycode = (oEvent.keyCode ? oEvent.keyCode : oEvent.which);
  jQuery.sap.log.debug("ProcessFlow::keyboard input has been catched and action going to start: keycode=" + keycode);
  switch (keycode) {
    //------------------------------------------------------------------------------- TAB
    case jQuery.sap.KeyCodes.ENTER:
    case jQuery.sap.KeyCodes.SPACE:
      if (this._isHeaderMode()) { // lanes-only
        this._internalLanes = [];
        this.fireHeaderPress(this);
      }
      else {
        for( var i = 0; i < this.getNodes().length; i++ ) {
          if( this.getNodes()[i]._getNavigationFocus() ) {
            this.fireNodePress(this.getNodes()[i]);
            // probably useles to set focus...
            //this._setFocusOnMouseClick(this.getNodes[i]);
            break;
          }
        }
      }
      break;
  }
}
/**
 * merge values of node states for several nodes 
 * @param {array} aLaneIdNodeStates node states for all nodes of the same laneId 
 * @param altKey, true if alt key is pressed, false otherwise
 * @returns aResult Array of cumulated node states for aLaneIdNodeStates 
 * @private
 */
sap.suite.ui.commons.ProcessFlow.prototype._mergeLaneIdNodeStates = function(aLaneIdNodeStates) {
  var iPositive = 0;
  var iNegative = 0;
  var iNeutral  = 0;
  var iPlanned  = 0;
  
  for( var iState = 0; iState < 4; iState++ ) {
    for( var iNode = 0; iNode < aLaneIdNodeStates.length; iNode++ ) {
      switch (aLaneIdNodeStates[iNode][iState].state) {
        case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
          iPositive = iPositive + aLaneIdNodeStates[iNode][iState].value;
          break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
          iNegative = iNegative + aLaneIdNodeStates[iNode][iState].value;
          break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
          iNeutral = iNeutral + aLaneIdNodeStates[iNode][iState].value;
          break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
          iPlanned = iPlanned + aLaneIdNodeStates[iNode][iState].value;
          break;
         //plannedNegative belong to Negative group
        case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
          iNegative = iNegative + aLaneIdNodeStates[iNode][iState].value;
          break;
      }
    }
  }

  var aResult = [{state: sap.suite.ui.commons.ProcessFlowNodeState.Positive, value: iPositive}
               , {state: sap.suite.ui.commons.ProcessFlowNodeState.Negative, value: iNegative}
               , {state: sap.suite.ui.commons.ProcessFlowNodeState.Neutral,  value: iNeutral}
               , {state: sap.suite.ui.commons.ProcessFlowNodeState.Planned,  value: iPlanned}];

return aResult;
};

/**
 * sets or removes navigation focus on the Lane header ( for keyboard support )
 * @param {boolean} if true the navigation focus is set, if false the navigation focus is removed
 * @private
 * @since 1.26
 */
sap.suite.ui.commons.ProcessFlow.prototype._setFocusOnHeader = function(setFlag) {
  var thead = jQuery.sap.byId(this.getId() + "-thead");
  if (setFlag) {
    thead.focus();
    thead.addClass("sapSuiteUiCommonsPFHeaderFocused");
    this._headerHasFocus = true;
  } 
  else {
    thead.blur();
    thead.removeClass("sapSuiteUiCommonsPFHeaderFocused");
    this._headerHasFocus = false;
  }
};

/**
 * sets navigation focus on a node for keyboard support
 * @private
 * @since 1.26
 */
sap.suite.ui.commons.ProcessFlow.prototype._setFocusOnNode = function() {
    jQuery.sap.log.debug("ProcessFlow::focus in" + (this._lastNavigationFocusNode ? this._lastNavigationFocusNode.getTitle() : "not defined"));
  if( this._lastNavigationFocusNode ) {
    this._lastNavigationFocusNode._setNavigationFocus(true);
    this._lastNavigationFocusNode.rerender();
  }
  else { // define navigation focus from root
    var bNodeFound = false;
    for( var i = 0; i < this._internalCalcMatrix.length; i++ ) {
      for( var j = 0; j < this._internalCalcMatrix[i].length; j++ ) {
        if( this._internalCalcMatrix[i][j] instanceof sap.suite.ui.commons.ProcessFlowNode ) {
          this._internalCalcMatrix[i][j]._setNavigationFocus(true);
          this._internalCalcMatrix[i][j].rerender();
          this._lastNavigationFocusNode = this._internalCalcMatrix[i][j];
          bNodeFound = true;
          break;
        }
      } // end inner loop
      if( bNodeFound ) {
        break;
      }
    }
  }
};

}; // end of sap/suite/ui/commons/ProcessFlow.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ProcessFlowConnection.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowConnection");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProcessFlowConnection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDrawData drawData} : object[]</li>
 * <li>{@link #getZoomLevel zoomLevel} : sap.suite.ui.commons.ProcessFlowZoomLevel (default: sap.suite.ui.commons.ProcessFlowZoomLevel.Two)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used internally to connect process flow node A with process flow node B in respect to the style(s) chosen by the end-user
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ProcessFlowConnection
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ProcessFlowConnection", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"drawData" : {type : "object[]", group : "Misc", defaultValue : null},
		"zoomLevel" : {type : "sap.suite.ui.commons.ProcessFlowZoomLevel", group : "Misc", defaultValue : sap.suite.ui.commons.ProcessFlowZoomLevel.Two}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowConnection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ProcessFlowConnection.extend
 * @function
 */


/**
 * Getter for property <code>drawData</code>.
 * This is an array of the following attributes for one element:
 * 1. flowLine (string) - A connection definition where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection between nodes in a process flow control. The string can contain the following characters:
 * - "r" for right,
 * - "t" for top,
 * - "l" for left,
 * - "b" for bottom.
 * 2. targetNodeState (ProcessFlowNodeState) - A copy of the target node status. If the target node is created, the line is solid.
 * If the target node is planned, the line is dashed.
 * 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual style of the control.
 * 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>drawData</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowConnection#getDrawData
 * @function
 */

/**
 * Setter for property <code>drawData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aDrawData  new value for property <code>drawData</code>
 * @return {sap.suite.ui.commons.ProcessFlowConnection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowConnection#setDrawData
 * @function
 */


/**
 * Getter for property <code>zoomLevel</code>.
 * This is a current zoom level for the connection. The point of connection to the node is derived from zoom level.
 *
 * Default value is <code>sap.suite.ui.commons.ProcessFlowZoomLevel.Two</code>
 *
 * @return {sap.suite.ui.commons.ProcessFlowZoomLevel} the value of property <code>zoomLevel</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowConnection#getZoomLevel
 * @function
 */

/**
 * Setter for property <code>zoomLevel</code>.
 *
 * Default value is <code>sap.suite.ui.commons.ProcessFlowZoomLevel.Two</code> 
 *
 * @param {sap.suite.ui.commons.ProcessFlowZoomLevel} oZoomLevel  new value for property <code>zoomLevel</code>
 * @return {sap.suite.ui.commons.ProcessFlowConnection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowConnection#setZoomLevel
 * @function
 */


// Start of sap/suite/ui/commons/ProcessFlowConnection.js
/**
 * This file defines behavior for the control,
 */
//sap.suite.ui.commons.ProcessFlowConnection.prototype.init = function(){
//   // do something for initialization...
//};

/**
 * Create connection object depends on draw data
 *
 * @private
 * @returns {object} connection
 */
sap.suite.ui.commons.ProcessFlowConnection.prototype._traverseConnectionData = function() { // EXC_SAP_006_1
  var connectionData = this.getDrawData();
  if (!connectionData) {
    return {};
  }

  var line = {draw: false, state:"", display:""};
  var connection = {right: line, top: line, left: line, bottom: line, arrow: false};

  function setLine(myConnectionData, myLineId, inputLine) {
    var myLine = {draw: inputLine.draw, state:inputLine.state, display:inputLine.display};
    if (myConnectionData.flowLine.indexOf(myLineId) >= 0) {
      myLine.draw = true;

      if (myConnectionData.targetNodeState === sap.suite.ui.commons.ProcessFlowNodeState.Neutral ||
        myConnectionData.targetNodeState === sap.suite.ui.commons.ProcessFlowNodeState.Positive ||
        myConnectionData.targetNodeState === sap.suite.ui.commons.ProcessFlowNodeState.Negative) {
        myLine.state = "Created";
      } else if (myConnectionData.targetNodeState === sap.suite.ui.commons.ProcessFlowNodeState.Planned ||
        myConnectionData.targetNodeState === sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative) {
        // planned state cannot override created state
        if (myLine.state !== "Created") {
          myLine.state = "Planned";
        }
      }

      if (myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ||
        myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused) {
        myLine.display = "Highlighted";
      } else if (myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.Regular ||
        myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.RegularFocused) {
        // regular display state cannot override regular display state
        if (myLine.display !== "Highlighted") {
          myLine.display = "Regular";
        }
      } else if (myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed ||
        myConnectionData.displayState === sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused) {
        // dimmed display state cannot override highlighted and regular display states
        if (myLine.display !== "Highlighted" && myLine.display !== "Regular") {
          myLine.display = "Dimmed";
        }
      }
    }
    return myLine;
  }

  var i;
  for (i = 0; i < connectionData.length; i++) {
    connection.right = setLine(connectionData[i], "r", connection.right);
    connection.top = setLine(connectionData[i], "t", connection.top);
    connection.left = setLine(connectionData[i], "l", connection.left);
    connection.bottom = setLine(connectionData[i], "b", connection.bottom);

    if (connectionData[i].flowLine.indexOf("r") >= 0) {
      if (connectionData[i].hasArrow) {
        connection.arrow = true;
      }
    }
  }

  return connection;
};

/**
 * Add connection data
 *
 * @public
 * @param {object} singleConnectionData
 * @returns {Array} connectionData
 */
sap.suite.ui.commons.ProcessFlowConnection.prototype.addConnectionData = function( singleConnectionData ) {
  var tempConnectionData = this.getDrawData();
  if( !tempConnectionData ) {
    tempConnectionData = [];
  }
  tempConnectionData.push(singleConnectionData);
  this.setDrawData(tempConnectionData);
  return tempConnectionData;
};

}; // end of sap/suite/ui/commons/ProcessFlowConnection.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowLaneHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ProcessFlowLaneHeader.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowLaneHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProcessFlowLaneHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIconSrc iconSrc} : sap.ui.core.URI</li>
 * <li>{@link #getPosition position} : int</li>
 * <li>{@link #getLaneId laneId} : string</li>
 * <li>{@link #getState state} : object</li>
 * <li>{@link #getZoomLevel zoomLevel} : sap.suite.ui.commons.ProcessFlowZoomLevel</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ProcessFlowLaneHeader#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control gives you an overview of documents/items used in the process flow. The process flow is represented by the doughnut chart sections which are colored according to the documents’ status(es). This control can be used in two different ways. If you use it standalone, an event is fired and can be caught in to display the node map. If you use it with the node/document, it gives you an overview of the documents/items used in the process flow that is represented by the doughnut chart sections.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ProcessFlowLaneHeader", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"iconSrc" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"position" : {type : "int", group : "Misc", defaultValue : null},
		"laneId" : {type : "string", group : "Misc", defaultValue : null},
		"state" : {type : "object", group : "Misc", defaultValue : null},
		"zoomLevel" : {type : "sap.suite.ui.commons.ProcessFlowZoomLevel", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowLaneHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader.extend
 * @function
 */

sap.suite.ui.commons.ProcessFlowLaneHeader.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * Text information that is displayed in the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setText
 * @function
 */


/**
 * Getter for property <code>iconSrc</code>.
 * Icon to be displayed in the middle of the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSrc</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setIconSrc
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * Position of the lane in the process flow control. Numbering of the position has to be sequential and needs to start from 0.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>position</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iPosition  new value for property <code>position</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setPosition
 * @function
 */


/**
 * Getter for property <code>laneId</code>.
 * Internal identification of the header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>laneId</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getLaneId
 * @function
 */

/**
 * Setter for property <code>laneId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLaneId  new value for property <code>laneId</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setLaneId
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value: 20]. Possible states are states are positive, negative, neutral, and planned.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setState
 * @function
 */


/**
 * Getter for property <code>zoomLevel</code>.
 * Current zoom level for the lane header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.suite.ui.commons.ProcessFlowZoomLevel} the value of property <code>zoomLevel</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#getZoomLevel
 * @function
 */

/**
 * Setter for property <code>zoomLevel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.suite.ui.commons.ProcessFlowZoomLevel} oZoomLevel  new value for property <code>zoomLevel</code>
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#setZoomLevel
 * @function
 */


/**
 * This event is fired when the header is clicked.
 *
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent tbd
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.ProcessFlowLaneHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlowLaneHeader</code>.<br/> itself. 
 *  
 * This event is fired when the header is clicked.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlowLaneHeader</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.ProcessFlowLaneHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> tbd</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlowLaneHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ProcessFlowLaneHeader#firePress
 * @function
 */


// Start of sap/suite/ui/commons/ProcessFlowLaneHeader.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.m.Image'); // unlisted dependency retained


/**
 * Process Flow Lane Header controller.
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.init = function() { // EXC_JSLINT_021
  this._virtualTableSpan = 1;
};

sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.onBeforeRendering = function () {
  this.$("lh-icon").off('click', jQuery.proxy(this.ontouchend, this));
}

/**
 * Standard method called after the control rendering.
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.onAfterRendering = function () {
  var jThis = this.$();
  var $icon = this.$("lh-icon");
  var sClickEvent = 'click';

  if (sap.ui.Device.support.touch) {
    sClickEvent = 'touchend';
  }
  if ($icon.length > 0) {
    $icon.on(sClickEvent, jQuery.proxy(this.ontouchend, this));
  //  $icon.addClass("suiteUiProcessFlowLaneHeaderProcessSymbolIcon");
    $icon.css("cursor", "inherit");
  }

  if (this._isHeaderMode()) {
     jThis.addClass("suiteUiProcessFlowLaneHeaderPointer");
  } else {
    jThis.removeClass("suiteUiProcessFlowLaneHeaderPointer");
  }

  // IE9 and FF long-word break does not works correctly, so allow to break the words anywhere
  if (sap.ui.Device.browser.msie || sap.ui.Device.browser.mozilla) {
    this.$("lh-text").css("word-break", "break-all");
  }

  // insert ellipsis for non-webkit browsers
  if (!this._ellipsisDisabled && !sap.suite.ui.commons.ProcessFlowLaneHeader._hasNativeLineClamp) {
    this._clampText();
  }
};

/**
 * Getter method for the symbol type. Returns the type of the node (variation of Lane header control).
 * For details on the available types see {sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.symbolType}.
 * @returns {String} symbol type to set for the control
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.getSymbolType = function () {
  return this._oSymbolType ? this._oSymbolType : sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType.standardType;
};

/**
 * Setter method for the symbol type. Specifies the type of the node to display.
 * For details on the available types see {sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType}.
 * @param {String} oSymbolType symbol type to set for the control
 * @param {Object} oObject the JS object context
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._setSymbolType = function (oSymbolType, oObject) {
  oObject._oSymbolType = oSymbolType;
};

/**
 * Process symbol node factory method - creates a control with a square symbol used at the beginning of the lane header.
 * @param {Boolean} bHeaderMode true if the hand cursor should be displayed above the header
 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new start symbol node
 * @since 1.22
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.createNewStartSymbol = function(bHeaderMode) {
  var oStaticHeader = sap.suite.ui.commons.ProcessFlowLaneHeader
    , oStartSymbol = new sap.suite.ui.commons.ProcessFlowLaneHeader({
      laneId: "processFlowLaneStart"
    })
    ;

  oStartSymbol._setSymbolType(oStaticHeader.symbolType.startSymbol, oStartSymbol);
  oStartSymbol._setHeaderMode(bHeaderMode);
  return oStartSymbol;
};

/**
 * Process symbol node factory method - creates a control with a square symbol used at the end of the lane header.
 * @param {Boolean} bHeaderMode true if the hand cursor should be displayed above the header
 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new end symbol node
 * @since 1.22
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.createNewEndSymbol = function(bHeaderMode) {
  var oStaticHeader = sap.suite.ui.commons.ProcessFlowLaneHeader
    , oEndSymbol = new sap.suite.ui.commons.ProcessFlowLaneHeader({
      laneId: "processFlowLaneEnd"
    })
    ;

  oEndSymbol._setSymbolType(oStaticHeader.symbolType.endSymbol, oEndSymbol);
  oEndSymbol._setHeaderMode(bHeaderMode);
  return oEndSymbol;
};

/**
 * Process symbol node factory method - creates a control with a '>>>' symbol.
 * @param {Boolean} bHeaderMode true if the hand cursor should be displayed above the header
 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new process symbol node
 * @since 1.22
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.createNewProcessSymbol = function(bHeaderMode) {
  var oStaticHeader = sap.suite.ui.commons.ProcessFlowLaneHeader
    , oProcessSymbol = new sap.suite.ui.commons.ProcessFlowLaneHeader({
      laneId: "processFlowLaneProcess", iconSrc: "sap-icon://process"
    })
    ;

  oProcessSymbol._setSymbolType(oStaticHeader.symbolType.processSymbol, oProcessSymbol);
  oProcessSymbol._setHeaderMode(bHeaderMode);
  return oProcessSymbol;
};

/**
 * Symbol type enumeration. Describes the type of the rendered control.
 * @since 1.22
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType = {
    startSymbol : "startSymbol"
  , endSymbol : "endSymbol"
  , processSymbol : "processSymbol"
  , standardType : "standardType"
};

sap.suite.ui.commons.ProcessFlowLaneHeader._constants = {
    nHalfGapSize : 0.0241 // half gap size in radians (cca. 2 px for full gap) // 5
  , nMinPercentage : 0.025 // 1/40, was nHalfGapSize / Math.PI (percentage equal to the size of the gap) = 0.0077
  , nRingThickness : 5
  , nRingInnerRadius : 24
  , nPositionX : 32
  , nPositionY : 32
  , nOuterCircleRadius : 32
  , sOuterCircleStrokeColor : "OuterCircleStrikeColor"//used implicitly to set CSS class
  , nOuterCircleStrokeWidth: 1
  , sSectorPositiveColor : "suiteUiCommonsProcessFlowHeaderPositiveColor" // CSS class
  , sSectorNegativeColor : "suiteUiCommonsProcessFlowHeaderNegativeColor" // CSS class
  , sSectorNeutralColor : "suiteUiCommonsProcessFlowHeaderNeutralColor" // CSS class
  , sSectorPlannedColor : "suiteUiCommonsProcessFlowHeaderPlannedColor" // CSS class
  , sEllipsis : '...'
  , nEllipsisLength : 3
};

/**
 * Method clamps the values provided in the input array to 0 in case of values lower than nMinValue.
 * The method modifies the input array to one with non-negative values.
 * @param {number[]} aPerc array of values to clamp (array of numbers)
 * @param {number} nMinValue minimal value which is still not clamped to nClampToValue
 * @param {number} nClampToValue value set to aPerc[i] in case aPerc[i] < nMinValue
 * @return {Boolean} true if at least 1 value was clamped
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._clampValues = function(aPerc, nMinValue, nClampToValue) {
  var i = aPerc.length - 1
    , bClamped = false
    , v
   ;

  while (i >= 0) {
    v = aPerc[i];
    if (v < nMinValue) {
      aPerc[i] = nClampToValue;
      bClamped = true;
    }
    i--;
  }

  return bClamped;
};

/**
 * Method re-scales the values in input array aPerc so their sum equals to 1.
 * The method modifies the input array to a rescaled one.
 * In case all the input values in aPerc are 0, the array is left unchanged.
 * All the values between (0, nMinPercentage> are set to nMinPercentage and the rest is rescaled accounting this change.
 * @param {number[]} aPerc array of values to re-scale (array of numbers)
 * @param {number} nMinPercentage the minimal percentage to consider (lower values will be rounded up to this value)
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._rescaleToUnit = function(aPerc, nMinPercentage) {
  var s
    , i
    , n
    , m
    , v
    , f
    ;

  // if undefined, null or 0 nMinPercentage
  if (!nMinPercentage) {
    nMinPercentage = 0;
  }

  i = aPerc.length - 1;
  s = 0;
  n = m = 0;

  while (i >= 0) {
    v = aPerc[i];
    if (v > 0) {
      if (v <= nMinPercentage) {
        m++;
      } else {
        s += aPerc[i];
      }
      n++;
    }
    i--;
  }

  s -= (n - m) * nMinPercentage;
  f = (1 - n * nMinPercentage) / s;

  i = aPerc.length - 1;
  while (i >= 0) {
    v = aPerc[i];
    if (v > 0) {
      aPerc[i] =  (v <= nMinPercentage) ? nMinPercentage : ((v - nMinPercentage) * f + nMinPercentage);
    }
    i--;
  }
};

/**
 * Method retrieves the number of gaps to be put on the donut chart given the input percentages.
 * Zero percentages are ignored. For the case of 1 value there is no gap to be displayed.
 * @param {number[]} aPerc array of input percentages (array of doubles)
 * @return {number} nGaps number of gaps
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._countGaps = function(aPerc) {
  var i = aPerc.length - 1
   ,  nGaps = 0
   ;

  while (i >= 0) {
    if (aPerc[i] > 0) {
      nGaps++;
    }
    i--;
  }

  if (nGaps === 1) {
    nGaps = 0;
  }

  return nGaps;
};

/**
 * Method re-scales the values in aPerc array by the provided factor.
 * The method modifies the aPerc array to the rescaled one.
 * @param {number[]} aPerc array of values to re-scale
 * @param {number} nFactor the scaling factor
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._rescaleByFactor = function(aPerc, nFactor) {
  var i = aPerc.length - 1;

  while (i >= 0) {
    aPerc[i]  *= nFactor;
    i--;
  }
};

/**
 * Map of donut sector positions to the sector colors.
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._colorMap = [
    sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorPositiveColor
  , sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorNegativeColor
  , sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorPlannedColor
  , sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorNeutralColor
];

/**
 * Calculation of the donut sector angle start/end definitions along with their colors.
 * @param {number[]} aPerc input percentage array (should sum up to 1)
 * @param {number} nFullGap angle for the sector gap (in radians)
 * @returns {aDefinitions[]} aDefinitions
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._calculateSectorRangeDefinitions = function(aPerc, nFullGap) {
  var aDefinitions = []
    , b = -Math.PI/2
    , e
    , m = aPerc.length
    , i = 0
    ;

  while (i < m) {
    if (aPerc[i] > 0) {
      e = b + 2 * Math.PI * aPerc[i];
      aDefinitions.push({start: b, end: e, color: this._colorMap[i]});
      b = e + nFullGap;
    }
    i++;
  }

  return aDefinitions;
};

/**
 * Helper method for donut sector color selection.
 * @param {number[]} aPerc array of input percentages
 * @return {String} color selection
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._selectColor = function(aPerc) {
  var sColor;

  if (aPerc[0]) {
    sColor = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorPositiveColor;
  } else if (aPerc[1]) {
    sColor = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorNegativeColor;
  } else if (aPerc[2]) {
    sColor = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorPlannedColor;
  } else {
    sColor = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sSectorNeutralColor;
  }

  return sColor;
};

/**
 * Method renders the donut sectors of the control. The method reads the "amounts" property and sets the amount
 * percentages into the donut segments accordingly.
 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._renderDonutPercentages = function(oRm) { // EXC_SAP_006_1
  var aStateAmounts = this.getState()
      , nGaps = 0
      , aSectorDefs
      , aPerc = [0, 0, 0, 0]
      , nScaleFactor
      , sColor
      , nHalfGap = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nHalfGapSize
      , nRadiusInner = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nRingInnerRadius
      , nRingThickness = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nRingThickness
      , nRadiusOuter = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nRingInnerRadius + nRingThickness
      , sOuterCircleStrokeColor = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sOuterCircleStrokeColor
      , nOuterCircleStrokeWidth = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nOuterCircleStrokeWidth
      , nOuterCircleRadius = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nOuterCircleRadius
      , nPositionX = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nPositionX
      , nPositionY = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nPositionY
      , nMinPercentage = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nMinPercentage
      ;

  if (aStateAmounts &&
    Object.prototype.toString.call(aStateAmounts) === '[object Array]' &&
    (aStateAmounts.length > 0)) {
    aStateAmounts.forEach(function(oStateAmount) {
      switch (oStateAmount.state) {
        case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
          aPerc[0] = oStateAmount.value;
        break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
          aPerc[1] = oStateAmount.value;
        break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
          aPerc[2] = oStateAmount.value;
        break;
        case sap.suite.ui.commons.ProcessFlowNodeState.Neutral: // EXC_JSHINT_016
        default: // EXC_JSLINT_073
          aPerc[3] = oStateAmount.value;
      }
    });

    this._clampValues(aPerc, 0, 0);

    this._rescaleToUnit(aPerc);
    this._rescaleToUnit(aPerc, nMinPercentage);

    nGaps = this._countGaps(aPerc);

    nScaleFactor = (1 - nGaps * nHalfGap/Math.PI); // adjust the percentages for the gaps
    this._rescaleByFactor(aPerc, nScaleFactor);

    this._renderCircle(oRm, sOuterCircleStrokeColor, nOuterCircleStrokeWidth,
      nPositionX, nPositionY, nOuterCircleRadius);

    if (nGaps > 0) {
      aSectorDefs = this._calculateSectorRangeDefinitions(aPerc, 2 * nHalfGap);
      this._renderDonutSectors(oRm, aSectorDefs, nPositionX, nPositionY, nRadiusInner, nRadiusOuter);
    } else {
      sColor = this._selectColor(aPerc);
      this._renderCircle(oRm, sColor, nRingThickness, nPositionX, nPositionY,
        nRadiusInner + nRingThickness/2);
    }
  } else {
    this._renderCircle(oRm, sOuterCircleStrokeColor, nOuterCircleStrokeWidth,
      nPositionX, nPositionY, nOuterCircleRadius);
  }
};

/**
 * Method renders the white circle around the donut segments.
 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
 * @param {String} sColor background color of the circle
 * @param {String} sStrokeColor the stroke color of the circle
 * @param {number} nStrokeWidth circle stroke width in pixels
 * @param {number} nPositionX coordinate x of the middle of circle in pixels
 * @param {number} nPositionY coordinate y of the middle of circle in pixels
 * @param {number} nRadius radius in pixels
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._renderCircle =
  function (oRm, sStrokeColor, nStrokeWidth, nPositionX, nPositionY, nRadius) { // EXC_JSHINT_034
  oRm.write("<circle");
  oRm.writeAttribute("id", this.getId() + "-donut-circle");
  if (sStrokeColor != "OuterCircleStrikeColor"){
    oRm.writeAttribute("class", "suiteUiCommonsProcessFlowHeaderIconFill " + sStrokeColor);
  }
  else{
    oRm.writeAttribute("class", "suiteUiCommonsProcessFlowHeaderIconFill");
  }
  oRm.writeAttribute("stroke-width", nStrokeWidth);
  oRm.writeAttribute("cx", nPositionX);
  oRm.writeAttribute("cy", nPositionY);
  oRm.writeAttribute("r", nRadius);
  oRm.write("></circle>"); // div element for the outer circle
};

/**
 * Method renders all the donut sector paths.
 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
 * @param {{begin:number, end:number, color:String}[]} aSectorDefs array of donut sector definitions
 * @param {number} nPositionX coordinate x of the center of sector in pixels
 * @param {number} nPositionY coordinate y of the center of sector in pixels
 * @param {number} nRadiusInner inner radius in pixels
 * @param {number} nRadiusOuter outer radius in pixels
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._renderDonutSectors =
  function (oRm, aSectorDefs, nPositionX, nPositionY, nRadiusInner, nRadiusOuter) { // EXC_JSHINT_034
  var i = 0
    , nDefLength = aSectorDefs.length
    , oSector
    , sPath
    ;

  while (i < nDefLength) {
    oSector = aSectorDefs[i];
    sPath = this._getDonutSectorPath(nPositionX, nPositionY, oSector.start, oSector.end, nRadiusInner, nRadiusOuter);
    oRm.write("<path");
    oRm.writeAttribute("id", this.getId() + "-donut-segment-" + i);
    oRm.writeAttribute("d", sPath);
    oRm.writeAttribute("class", oSector.color);
    oRm.writeAttribute("opacity", "1");
    oRm.write("></path>");
    i++;
  }
};

/**
 * Helper method returning SVG path data for a single donut sector.
 * @param {number} nPositionX coordinate x of the center of sector in pixels
 * @param {number} nPositionY coordinate y of the center of sector in pixels
 * @param {number} nStartAngle start angle in radians (rotating right - resp. negative amount of real angle)
 * @param {number} nEndAngle end angle
 * @param {number} nRadiusInner inner radius in pixels
 * @param {number} nRadiusOuter outer radius in pixels
 * @returns {string} string definition of the SVG path put into the "d" attribute of the svg "path" element.
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._getDonutSectorPath =
    function (nPositionX, nPositionY, nStartAngle, nEndAngle, nRadiusInner, nRadiusOuter) { // EXC_JSHINT_034
    var nOuter = 0  /* outer angle flag */
      , p1, p2, p3, p4
      , d
      , cs, ce, ss, se
      ;

    if ((nEndAngle - nStartAngle) % (Math.PI * 2) > Math.PI) {
      nOuter = 1;
    }

    cs = Math.cos(nStartAngle);
    ce = Math.cos(nEndAngle);
    ss = Math.sin(nStartAngle);
    se = Math.sin(nEndAngle);

    p1 = (nPositionX + nRadiusInner * cs).toFixed(3) + ',' + (nPositionY + nRadiusInner * ss).toFixed(3);
    p2 = (nPositionX + nRadiusOuter * cs).toFixed(3) + ',' + (nPositionY + nRadiusOuter * ss).toFixed(3);
    p3 = (nPositionX + nRadiusOuter * ce).toFixed(3) + ',' + (nPositionY + nRadiusOuter * se).toFixed(3);
    p4 = (nPositionX + nRadiusInner * ce).toFixed(3) + ',' + (nPositionY + nRadiusInner * se).toFixed(3);
    d = "M" + p1 +
      "L" + p2 +
      "A" + nRadiusOuter + ',' + nRadiusOuter + " 0 " + nOuter + " 1 " + p3 +
      "L" + p4 +
      "A" + nRadiusInner + ',' + nRadiusInner + " 0 " + nOuter + " 0 " + p1 +
      "z";

    return d;
 };

 /**
  * Gets the image control for the Header, creating it if it does not already exist.
  *
  * If the control is already created and the value of sSrc has changed then the old control will be destroyed
  * and a new control returned.
  *
  * @param {String} sId The icon control id
  * @param {sap.ui.core.URI} sSrc The URI of the image
  * @returns {sap.ui.core.Control}
  * @since 1.22
  * @private
  */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._getImage = function(sId, sSrc) {
  this._destroyImage();

  if (this._oImageControl) {
    this._oImageControl.setSrc(sSrc);
  } else {
    this._oImageControl = sap.ui.core.IconPool.createControlByURI(sSrc, sap.m.Image);
    this._oImageControl.sId = sId;
    this._oImageControl.setParent(this, null, true);
  }

  return this._oImageControl;
};

/**
 * Function is called when exiting the control, clean up.
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.exit = function() {
  this._destroyImage();
};

/**
 * Resource cleanup for the control icon.
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._destroyImage = function() {
  if (this._oImageControl) {
    this._oImageControl.destroy();
  }

  this._oImageControl = null;
};

/**
 * Press event handler for control click.
 * @param {sap.ui.base.Event} oEvent
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.ontouchend = function(oEvent) {
  if (oEvent && !oEvent.isDefaultPrevented()) {
    oEvent.preventDefault();
  }
  if (this) {
    this.firePress(this);
  }
  if (oEvent && !oEvent.isPropagationStopped()) {
    oEvent.stopPropagation();
  }
  if (oEvent && !oEvent.isImmediatePropagationStopped()) {
    oEvent.stopImmediatePropagation();
  }
};

/**
 * Header mode setter. Header mode is true when a hand cursor should be displayed above the control.
 * @param {Boolean} bHeaderMode true if in header mode
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._setHeaderMode = function(bHeaderMode) {
  this._bHeaderMode = bHeaderMode;
};

/**
 * Header mode getter. Header mode is true when a hand cursor should be displayed above the control.
 * @returns {boolean} true if the control is in header mode, false otherwise
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._isHeaderMode = function() {
  return this._bHeaderMode;
};

/**
 * Clamps the wrapping text to _constants.nMaxTextLines lines and appends ellipsis ('...' if needed).
 * @since 1.22
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.prototype._clampText = function() { // EXC_SAP_006_1
  var $text = this.$("lh-text").length ? this.$("lh-text") : null
    , sText = this.getText()
    , sLastText = ""
    , sEllipsis = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.sEllipsis
    , iEllipsisLength = sap.suite.ui.commons.ProcessFlowLaneHeader._constants.nEllipsisLength
    , iStartPos = iEllipsisLength + 1
    , iMidPos
    , iEndPos = sText.length
    , iMaxHeight
    , bVisibility
    ;

  if ($text) {
    iMaxHeight = parseInt($text.css("height").slice(0, -2), 10); // i.e. parse number from "32px"

    // we expect that less than ellipsis length number of characters never needs to be clamped

    // if text overflow - clamping is needed
    if ($text[0].scrollHeight > iMaxHeight) {

      // save the visibility state and hide the text
      bVisibility = $text.css("visibility");
      $text.css("visibility", "hidden");

      // search by bisection to find the position of ellipsis
      sLastText = sText;
      do {

        // check the middle position and update text
        iMidPos = (iStartPos + iEndPos) >> 1;

        $text.textContent = sText.slice(0, iMidPos - iEllipsisLength) + sEllipsis;
        // check for text overflow
        if ($text.scrollHeight > iMaxHeight) {
          iEndPos = iMidPos;
        } else {
          iStartPos = iMidPos;
          sLastText = $text.textContent;
        }
      } while(iEndPos - iStartPos > 1);

      // reset to the original visibility state
      $text.css("visibility", bVisibility);
    }

    // set the last valid solution in case of overflow
    if ($text.scrollHeight > iMaxHeight) {
      $text.textContent = sLastText;
    }
  }
};

/**
 * Defines whether browser supports native line clamp or not
 *
 * @returns {Boolean}
 * @private
 * @readonly
 * @since 1.22
 * @static
 */
sap.suite.ui.commons.ProcessFlowLaneHeader._hasNativeLineClamp = (function() {
  return document.documentElement.style.webkitLineClamp !== undefined;
}());

/**
 * Enable/disable ellipsis support for non-webkit browsers (for the case where there is no native ellipsis support).
 * It is recommended to disable the ellipsis support in case the control is inserted
 * into a container of variable width as the ellipsis position is not updated automatically.
 * By default the ellipsis support is enabled.
 *
 * @param {Boolean} bSupportEnabled false if the ellipsis support is to be disabled
 * @since 1.22
 * @public
 */
sap.suite.ui.commons.ProcessFlowLaneHeader.enableEllipsisSupportForText = function (bSupportEnabled) {
  this._ellipsisDisabled = !bSupportEnabled;
};

/**
 * Setter for the virtual table span in PF node element count.
 *
 * @param {number} [iElements] number of PF node elements which will be under this header control
 * @since 1.23
 * @see sap.suite.ui.commons.sap.suite.ui.commons.ProcessFlowLaneHeader._setVirtualTableSpan
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader._setVirtualTableSpan = function (iElements) {
  this._virtualTableSpan = iElements;
};

/**
 * Getter for the virtual table span in object count. The value is used by the PF renderer to set a colspan for 2*iElements+1 lanes to fit this lane header control.
 * By default is set to 1;
 *
 * @returns {number} number of PF node elements which will be under this header control
 * @since 1.23
 * @private
 */
sap.suite.ui.commons.ProcessFlowLaneHeader._getVirtualTableSpan = function () {
  return this._virtualTableSpan;
};

}; // end of sap/suite/ui/commons/ProcessFlowLaneHeader.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowNode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ProcessFlowNode.
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowNode");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProcessFlowNode.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIsTitleClickable isTitleClickable} : boolean (default: false)</li>
 * <li>{@link #getLaneId laneId} : string</li>
 * <li>{@link #getNodeId nodeId} : string</li>
 * <li>{@link #getState state} : sap.suite.ui.commons.ProcessFlowNodeState (default: sap.suite.ui.commons.ProcessFlowNodeState.Neutral)</li>
 * <li>{@link #getChildren children} : string[]</li>
 * <li>{@link #getTitleAbbreviation titleAbbreviation} : string</li>
 * <li>{@link #getStateText stateText} : string</li>
 * <li>{@link #getTexts texts} : string[]</li>
 * <li>{@link #getHighlighted highlighted} : boolean (default: false)</li>
 * <li>{@link #getFocused focused} : boolean (default: false)</li>
 * <li>{@link #getTag tag} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ProcessFlowNode#event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ProcessFlowNode#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control enables you to see documents (or other items) in respect to their statuses – positive, negative, neutral, planned. In addition to the node title (which can be optionally a hyperlink) also two other text fields are provided and can be filled. The process flow nodes consider all styles depending on the status they are in. The user can update or change the content of the node. The content of the node can be also filtered according to updated data and specific parameters set. This means that also the node’s style is affected.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ProcessFlowNode", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"isTitleClickable" : {type : "boolean", group : "Misc", defaultValue : false, deprecated: true},
		"laneId" : {type : "string", group : "Misc", defaultValue : null},
		"nodeId" : {type : "string", group : "Misc", defaultValue : null},
		"state" : {type : "sap.suite.ui.commons.ProcessFlowNodeState", group : "Misc", defaultValue : sap.suite.ui.commons.ProcessFlowNodeState.Neutral},
		"children" : {type : "string[]", group : "Misc", defaultValue : null},
		"titleAbbreviation" : {type : "string", group : "Misc", defaultValue : null},
		"stateText" : {type : "string", group : "Misc", defaultValue : null},
		"texts" : {type : "string[]", group : "Misc", defaultValue : null},
		"highlighted" : {type : "boolean", group : "Misc", defaultValue : false},
		"focused" : {type : "boolean", group : "Misc", defaultValue : false},
		"tag" : {type : "object", group : "Misc", defaultValue : null}
	},
	events : {
		"titlePress" : {deprecated: true}, 
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowNode with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ProcessFlowNode.extend
 * @function
 */

sap.suite.ui.commons.ProcessFlowNode.M_EVENTS = {'titlePress':'titlePress','press':'press'};


/**
 * Getter for property <code>title</code>.
 * The node title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setTitle
 * @function
 */


/**
 * Getter for property <code>isTitleClickable</code>.
 * Specifies if the node title is clickable.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isTitleClickable</code>
 * @public
 * @deprecated Since version 1.26. 
 * According to the new requirement there should be only one click event for each node (click on the whole node – see Press event) that is why titlePress event should not be used any longer. Hence isTitleClickable should not be used either.
 * @name sap.suite.ui.commons.ProcessFlowNode#getIsTitleClickable
 * @function
 */

/**
 * Setter for property <code>isTitleClickable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsTitleClickable  new value for property <code>isTitleClickable</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.26. 
 * According to the new requirement there should be only one click event for each node (click on the whole node – see Press event) that is why titlePress event should not be used any longer. Hence isTitleClickable should not be used either.
 * @name sap.suite.ui.commons.ProcessFlowNode#setIsTitleClickable
 * @function
 */


/**
 * Getter for property <code>laneId</code>.
 * Specifies the assignment of the node to the respective lane.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>laneId</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getLaneId
 * @function
 */

/**
 * Setter for property <code>laneId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLaneId  new value for property <code>laneId</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setLaneId
 * @function
 */


/**
 * Getter for property <code>nodeId</code>.
 * >Node identifier.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>nodeId</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getNodeId
 * @function
 */

/**
 * Setter for property <code>nodeId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNodeId  new value for property <code>nodeId</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setNodeId
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * State of the node.
 *
 * Default value is <code>sap.suite.ui.commons.ProcessFlowNodeState.Neutral</code>
 *
 * @return {sap.suite.ui.commons.ProcessFlowNodeState} the value of property <code>state</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>sap.suite.ui.commons.ProcessFlowNodeState.Neutral</code> 
 *
 * @param {sap.suite.ui.commons.ProcessFlowNodeState} oState  new value for property <code>state</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setState
 * @function
 */


/**
 * Getter for property <code>children</code>.
 * Defines an array of children of the node.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>children</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getChildren
 * @function
 */

/**
 * Setter for property <code>children</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aChildren  new value for property <code>children</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setChildren
 * @function
 */


/**
 * Getter for property <code>titleAbbreviation</code>.
 * Title abbreviation is used in the compact mode.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>titleAbbreviation</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getTitleAbbreviation
 * @function
 */

/**
 * Setter for property <code>titleAbbreviation</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitleAbbreviation  new value for property <code>titleAbbreviation</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setTitleAbbreviation
 * @function
 */


/**
 * Getter for property <code>stateText</code>.
 * Description of the state, for example "Status OK".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>stateText</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getStateText
 * @function
 */

/**
 * Setter for property <code>stateText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStateText  new value for property <code>stateText</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setStateText
 * @function
 */


/**
 * Getter for property <code>texts</code>.
 * The property contains the additional texts on the node. The expected type is array of strings. One array must not contain more than two strings. Additional strings in the array will be ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>texts</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getTexts
 * @function
 */

/**
 * Setter for property <code>texts</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aTexts  new value for property <code>texts</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setTexts
 * @function
 */


/**
 * Getter for property <code>highlighted</code>.
 * The parameter defines if the node should be displayed in highlighted state.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>highlighted</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getHighlighted
 * @function
 */

/**
 * Setter for property <code>highlighted</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHighlighted  new value for property <code>highlighted</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setHighlighted
 * @function
 */


/**
 * Getter for property <code>focused</code>.
 * The parameter defines if the node should be displayed in focus state.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>focused</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getFocused
 * @function
 */

/**
 * Setter for property <code>focused</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFocused  new value for property <code>focused</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setFocused
 * @function
 */


/**
 * Getter for property <code>tag</code>.
 * The user-defined object which is returned back to the user by a node click event.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>tag</code>
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#getTag
 * @function
 */

/**
 * Setter for property <code>tag</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oTag  new value for property <code>tag</code>
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#setTag
 * @function
 */


/**
 * This event handler is executed when the user clicks the node title. This event is fired only when the title is clickable (isTitleClickable equals true).
 *
 * @name sap.suite.ui.commons.ProcessFlowNode#titlePress
 * @event
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use Press event instead ( click on the node)
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent The node identification.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/> itself. 
 *  
 * This event handler is executed when the user clicks the node title. This event is fired only when the title is clickable (isTitleClickable equals true).
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use Press event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlowNode#attachTitlePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use Press event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlowNode#detachTitlePress
 * @function
 */

/**
 * Fire event titlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> The node identification.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.26. 
 * Should not be used any longer, use Press event instead ( click on the node)
 * @name sap.suite.ui.commons.ProcessFlowNode#fireTitlePress
 * @function
 */


/**
 * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress event has been fired.
 *
 * @name sap.suite.ui.commons.ProcessFlowNode#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.oEvent The node identification.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/> itself. 
 *  
 * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress event has been fired.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.ProcessFlowNode</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ProcessFlowNode#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oEvent' of type <code>object</code> The node identification.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ProcessFlowNode} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ProcessFlowNode#firePress
 * @function
 */


// Start of sap/suite/ui/commons/ProcessFlowNode.js
/**
* Process Flow Node controller.
*/
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.m.Text'); // unlisted dependency retained


/* This is a current zoom level for the node. The level of details on the node is derived from this value.*/
sap.suite.ui.commons.ProcessFlowNode.prototype._zoomLevel = sap.suite.ui.commons.ProcessFlowZoomLevel.Two;
/* The consumer defined object which is returned back to the consumer with node click event.*/
sap.suite.ui.commons.ProcessFlowNode.prototype._tag = null;
/* The display state of the node. This property dictates the regular, highlighted, dimmed visual style of the control */
sap.suite.ui.commons.ProcessFlowNode.prototype._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Regular;
/* This property defines the folded corners for the single node control. The values true - means folded corner
false/null/undefined - means normal corner
*/
sap.suite.ui.commons.ProcessFlowNode.prototype._foldedCorner = false;
sap.suite.ui.commons.ProcessFlowNode.prototype._foldedCornerControl = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._parent = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._headerControl = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._stateTextControl = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._iconControl = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._text1Control = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._text2Control = null;
sap.suite.ui.commons.ProcessFlowNode.prototype._navigationFocus = false;
sap.suite.ui.commons.ProcessFlowNode.prototype._sMouseEvents = " mousedown mouseup mouseenter mouseleave ";
sap.suite.ui.commons.ProcessFlowNode.prototype._sMouseTouchEvents = (sap.ui.Device.support.touch) ? 'saptouchstart saptouchcancel touchstart touchend' : '';

  if(sap.ui.Device.browser.msie) {
    sap.suite.ui.commons.ProcessFlowNode.prototype._grabCursorClass = "sapSuiteUiGrabCursorIEPF";
    sap.suite.ui.commons.ProcessFlowNode.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorIEPF";
    } else {
      sap.suite.ui.commons.ProcessFlowNode.prototype._grabCursorClass = "sapSuiteUiGrabCursorPF";
      sap.suite.ui.commons.ProcessFlowNode.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorPF";
    }
  sap.suite.ui.commons.ProcessFlowNode.prototype._nodeHoverClass= "sapSuiteUiCommonsProcessFlowNodeHover";
  sap.suite.ui.commons.ProcessFlowNode.prototype._nodeActiveClass= "sapSuiteUiCommonsProcessFlowNodeActive";
  sap.suite.ui.commons.ProcessFlowNode.prototype._nodeFCHoverClass = "sapSuiteUiCommonsProcessFlowFoldedCornerNodeHover";
  sap.suite.ui.commons.ProcessFlowNode.prototype._nodeFCActiveClass = "sapSuiteUiCommonsProcessFlowFoldedCornerNodeActive";
  sap.suite.ui.commons.ProcessFlowNode.prototype._nodeFCIconHoverClass =  "sapSuiteUiCommonsProcessFlowFoldedCornerNodeIconHover";

/**
 *  ProcessFlowNode initial function
 *  @public
 */
sap.suite.ui.commons.ProcessFlowNode.prototype.init = function() {
  sap.ui.core.IconPool.addIcon("context-menu", "businessSuite", "PFBusinessSuiteInAppSymbols", "e02b", true);
};

/**
 * Destroy all created controls
 * @public
 */
sap.suite.ui.commons.ProcessFlowNode.prototype.exit = function() {
  if( this._foldedCornerControl ) {
    this._foldedCornerControl.destroy();
    this._foldedCornerControl = null;
  }
  if( this._headerControl ) {
    this._headerControl.destroy();
    this._headerControl = null;
  }
  if( this._stateTextControl ) {
    this._stateTextControl.destroy();
    this._stateTextControl = null;
  }
  if( this._iconControl ) {
    this._iconControl.destroy();
    this._iconControl = null;
  }
  if( this._text1Control ) {
    this._text1Control.destroy();
    this._text1Control = null;
  }
  if( this._text2Control ) {
    this._text2Control.destroy();
    this._text2Control = null;
  }
  this.$().unbind(this._sMouseEvents, this._handleEvents);
  if (sap.ui.Device.support.touch) {
    this.$().unbind(this._sMouseTouchEvents, this._handleEvents);
  }
};

/**
* the event binding must be removed to avoid memory leaks
* @public
*/ 
sap.suite.ui.commons.ProcessFlowNode.prototype.onBeforeRendering = function() {
  this.$().unbind(this._sMouseEvents, this._handleEvents);
  if (sap.ui.Device.support.touch) {
    this.$().unbind(this._sMouseTouchEvents, this._handleEvents);
  }
};

/**
* Setter for the parent flow control. It is used to propagate the onNodeTitlePresses event
* @private
* @param {sap.suite.ui.commons.ProcessFlowNode} oControl
*/
sap.suite.ui.commons.ProcessFlowNode.prototype._setParentFlow = function( oControl ) {
  this._parent = oControl;
};

/**
 * Getter for folded corner
 * @private
 * @returns {sap.ui.core.Icon}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getFoldedCornerControl = function() {
  if( this._foldedCornerControl ) {
    this._foldedCornerControl.destroy();
  }
  this._foldedCornerControl = new sap.ui.core.Icon({
    id: this.getId() + "-corner-icon",
    src: sap.ui.core.IconPool.getIconURI("context-menu", "businessSuite"),
    visible: true
  });
  this._foldedCornerControl.addStyleClass("sapUiIconPointer");

  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel4");
      break;
  }
  this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1");

  return this._foldedCornerControl;
};

/**
 * Get header control
 * @private
 * @returns {sap.m.Text}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getHeaderControl = function() { // EXC_SAP_006_1
  if( this._headerControl ) {
    this._headerControl.destroy();
  }

  var nOfLines = 0;
  var sWidth = "";
  var bVisible = true;
  var sText = this.getTitle();

  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      nOfLines = 3;
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      nOfLines = 3;
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      nOfLines = 2;
      sText = this.getTitleAbbreviation();
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      sText = "";
      nOfLines = 0;
      sWidth = "0px";
      bVisible = false;
      break;
  }
  this._headerControl = new sap.m.Text({
    id: this.getId() + "-nodeid-anchor-title",
    text: sText,
    visible: bVisible,
    wrapping: true,
    width: sWidth,
    maxLines: nOfLines
  });
  if( this.getIsTitleClickable()) {
    this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleClickable");
  }
  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel4");
      break;
  }
  this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Title");
  return this._headerControl;
};

/**
 * Get icon control
 * @private
 * @returns {sap.ui.core.Icon}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getIconControl = function() { // EXC_SAP_006_1
  if( this._iconControl ) {
    this._iconControl.destroy();
  }
  var sSrc = null;
  var bVisible = true;
  var stateText = this.getStateText();

  // do not display icon when stateText is empty string
  if ( ( stateText === undefined || stateText === null || stateText.trim().length === 0 ) &&
      this._getZoomLevel() !== sap.suite.ui.commons.ProcessFlowZoomLevel.Four ) {
    sSrc = null;
  }
  else {
    switch( this.getState() ) {
      case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
        sSrc = "sap-icon://message-success";
        break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
      case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
        sSrc = "sap-icon://message-error";
        break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
        sSrc = null; // latest request: do not display state icon, was "sap-icon://to-be-reviewed"
        break;
      case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
        sSrc = "sap-icon://process";
        break;
    }
  }
  this._iconControl = new sap.ui.core.Icon({
    id: this.getId() + "-icon",
    src: sSrc,
    visible: bVisible
  });
  this._iconControl.addStyleClass("sapUiIconPointer");

  // correct RTL behaviour for state icon
  var bRtl = sap.ui.getCore().getConfiguration().getRTL();

  if (bRtl) {
    this._iconControl.addStyleClass("sapUiIconSuppressMirrorInRTL");
  }
  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      var sIconAlignStyle = "sapSuiteUiCommonsProcessFlowNode3StateIconLeft";

      if (bRtl) {
        sIconAlignStyle = "sapSuiteUiCommonsProcessFlowNode3StateIconRight";
      }
      this._iconControl.addStyleClass(sIconAlignStyle);
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconCenter");
      break;
  }
  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel4");
      break;
  }
  this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIcon");
  return this._iconControl;
};

/**
 * Get state text control
 * @private
 * @returns {sap.m.Text}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getStateTextControl = function() { // EXC_SAP_006_1, EXC_JSHINT_047
  if (this._stateTextControl ) {
    this._stateTextControl.destroy();
  }
  var nOfLines = 2;
  var sWidth = "";
  var bVisible = true;
  var oState = this.getState();
  var sText = (oState === sap.suite.ui.commons.ProcessFlowNodeState.Planned) ? "" : this.getStateText(); // latest request: do not display state text for planned state
  if (oState === sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative && sText === oState) {
    sText = "Planned Negative"; 
  }
  // number of lines
  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      nOfLines = 2;
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      sText = "";
      nOfLines = 0;
      sWidth = "0px";
      bVisible = false;
      break;
  }
  this._stateTextControl = new sap.m.Text({
    id: this.getId() + "-stateText",
    text: sText,
    visible: bVisible,
    wrapping: true,
    width: sWidth,
    maxLines: nOfLines
  });
  switch( oState ) {
    case sap.suite.ui.commons.ProcessFlowNodeState.Positive:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePositive");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Negative:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Planned:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePlanned");
      break;
    case sap.suite.ui.commons.ProcessFlowNodeState.Neutral:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateNeutral");
      break;
     case sap.suite.ui.commons.ProcessFlowNodeState.PlannedNegative:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePlanned");
      break;
  }
  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel4");
      break;
  }
  this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateText");
  return this._stateTextControl;
};

/**
 * Get internal text control
 * @private
 * @param {String} textId
 * @param {String} textToDisplay
 * @param {sap.m.Text} oControl
 * @returns {sap.m.Text}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getTextControlInternal = function( textId, textToDisplay, oControl ) {
  if( oControl  ) {
    oControl.destroy();
  }

  var nOfLines = 2;
  var sWidth = "";
  var bVisible = true;
  var sText = textToDisplay;

  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      nOfLines = 2;
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      nOfLines = 0;
      sWidth = "0px";
      bVisible = false;
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      sText = "";
      nOfLines = 0;
      sWidth = "0px";
      bVisible = false;
      break;
  }
  if( this.getState) {
    oControl = new sap.m.Text({
      id: this.getId() + textId,
      text: sText,
      visible: bVisible,
      wrapping: true,
      width: sWidth,
      maxLines: nOfLines
    });
  }
  return oControl;
};

/**
 * Get text1 control
 * @private
 * @returns {sap.m.Text}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getText1Control = function() {
  var textToDisplay = this.getTexts();

  if( textToDisplay && textToDisplay.length > 0 ) {
    textToDisplay = textToDisplay[0];
  }
  this._text1Control = this._getTextControlInternal("-text1-control",textToDisplay, this._text1Control);

  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel1");
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel2");
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
      break;
  }
  this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Text");
  return this._text1Control;
};

/**
 * Get text2 control
 * @private
 * @returns {sap.m.Text}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getText2Control = function() {
  var textToDisplay = this.getTexts();

  if( textToDisplay && textToDisplay.length > 1 ) {
    textToDisplay = textToDisplay[1];
  }
  else {
    textToDisplay = "";
  }
  this._text2Control = this._getTextControlInternal("-text2-control", textToDisplay, this._text2Control);

  switch( this._getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
      break;
  }
  this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Text");
  return this._text2Control;
};


 /**
 * Get zoom level
 * @private
 * @returns {object}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getZoomLevel = function() {
  return this._zoomLevel;
};

/**
 * Set zoom level
 * @private
 * @param {object} zoomLevel
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._setZoomLevel = function(zoomLevel) {
  this._zoomLevel = zoomLevel;
};

sap.suite.ui.commons.ProcessFlowNode.prototype._setNavigationFocus = function( navigationFocus ) {
  this._navigationFocus = navigationFocus;
};

sap.suite.ui.commons.ProcessFlowNode.prototype._getNavigationFocus = function() {
  return this._navigationFocus;
};


/**
 * Set folded corner
 * @private
 * @param {Boolean} foldedCorner
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._setFoldedCorner = function( foldedCorner ) {
  this._foldedCorner = foldedCorner;
};

/**
 * Get folded corner
 * @private
 * @returns {Boolean}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getFoldedCorner = function( ) {
  return this._foldedCorner;
};

/**
 * Set tag
 * @private
 * @param {object} tagObject
 */
sap.suite.ui.commons.ProcessFlowNode.prototype.setTag = function( tagObject ) {
  this._tag = tagObject;
};

/**
 * Get tag
 * @private
 * @returns {object}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype.getTag = function( ) {
  return this._tag;
};

/**
 * Based on the focused and highlighted we define display state
 * @private
 * @returns {object}
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._getDisplayState = function() {
  var bIsFocused = this.getFocused();
  var bIsHighlighted = this.getHighlighted();

  if (bIsFocused && bIsHighlighted) {
    this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused;
  }
  else if (bIsFocused) {
    this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.RegularFocused;
  }
  else if (bIsHighlighted){
    this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted;
  }
  else { // it cannot stay in focused or highlighted mode if there is no such flag.
    if( this._displayState == sap.suite.ui.commons.ProcessFlowDisplayState.HighlightedFocused ||
        this._displayState == sap.suite.ui.commons.ProcessFlowDisplayState.RegularFocused ||
        this._displayState == sap.suite.ui.commons.ProcessFlowDisplayState.Highlighted ) {
      this._setRegularState();
    }
  }
  /*
  not possible to calculate inside, the dimmed must come from outside
  sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed
  sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused
  */
  return this._displayState;
};

/**
 * Set to dimmed state
 * @private
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._setDimmedState = function() {
  var bIsFocused = this.getFocused();
  var bIsHighlighted = this.getHighlighted();

  if (bIsHighlighted) {
    throw new Error("Cannot set dimmed state to highlighed node " + this.getNodeId());
  }
  this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed;

  if (bIsFocused) {
    this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused;
  }
};

/**
 * Set highlighted nodes to the regular state
 * @private
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._setRegularState = function() {
  this._displayState = sap.suite.ui.commons.ProcessFlowDisplayState.Regular;
};

/**
 * @param {sap.ui.base.Event} oEvent
 * @private
 */
sap.suite.ui.commons.ProcessFlowNode.prototype._handleClick = function(oEvent) {
  // if id include link, it is click on title
  if ( this._getDisplayState() === sap.suite.ui.commons.ProcessFlowDisplayState.Dimmed ||
    this._getDisplayState() === sap.suite.ui.commons.ProcessFlowDisplayState.DimmedFocused) {
   jQuery.sap.log.info("Event ignored, node in dimmend state.");
  }
  else {
    if (this._parent) {
      if (oEvent.target.id.indexOf("title") >= 0 && this.getIsTitleClickable()) {
        this._parent.fireNodeTitlePress(this);
      }
      else {
        this._parent.fireNodePress(this);
      }
      this._parent._setFocusOnMouseClick( this );
    }
  }
  if (oEvent && !oEvent.isPropagationStopped()) {
    oEvent.stopPropagation();
  }
  if (oEvent && !oEvent.isImmediatePropagationStopped()) {
    oEvent.stopImmediatePropagation();
  }
};

/**
 * @param {sap.ui.base.Event} oEvent
 * @private
 */
sap.suite.ui.commons.ProcessFlowNode.prototype.onclick = function(oEvent) {
  if (oEvent && !oEvent.isDefaultPrevented()) {
    oEvent.preventDefault();
  }
  this._handleClick(oEvent);
};

sap.suite.ui.commons.ProcessFlowNode.prototype.onAfterRendering = function(oEvent) {
  if (oEvent && !oEvent.isDefaultPrevented()) {
    oEvent.preventDefault();
  }
  this._sMouseEvents = this._sMouseEvents.concat(' ', this._sMouseTouchEvents);
  this.$().bind(this._sMouseEvents, jQuery.proxy(this._handleEvents, this));
  if (oEvent && !oEvent.isPropagationStopped()) {
    oEvent.stopPropagation();
  }
  if (oEvent && !oEvent.isImmediatePropagationStopped()) {
    oEvent.stopImmediatePropagation();
  }
};

sap.suite.ui.commons.ProcessFlowNode.prototype._handleEvents = function(oEvent) {
  var $ThisChildren = this.$().find('*');
  var $ThisAttribute = this.$().attr('id');
  var isFoldedCorner = this._getFoldedCorner();
  var oScrollContainer = this.getParent();
  
    if (oEvent && !oEvent.isDefaultPrevented()) {
      oEvent.preventDefault();
    }
    switch(oEvent.type) {
      case 'mousedown':
        this.$().removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
        $ThisChildren.removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
        if (isFoldedCorner) {
          jQuery('#'+$ThisAttribute).removeClass(this._nodeFCHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
          jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
          jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
        }
        break;
      case 'mouseup':
        if ( oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
          oScrollContainer.$().removeClass(this._grabbingCursorClass);
        }
        this.$().removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
        $ThisChildren.removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
        if (isFoldedCorner) {
          jQuery('#'+$ThisAttribute).removeClass(this._nodeHoverClass).addClass(this._nodeFCHoverClass);
          jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
          jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
        }
        break;
      case 'mouseenter':
        /* in case the cursor is in the "grabbing" state ( the user is scrolling and comes over the node) the cursor's state should not be changed to the pointer */
        if (!oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
          this.$().addClass(this._nodeHoverClass);
          $ThisChildren.addClass(this._nodeHoverClass);
          if (isFoldedCorner) { 
            jQuery('#'+$ThisAttribute).removeClass(this._nodeHoverClass).addClass(this._nodeFCHoverClass);
            jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
            jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
          }
        }
        break;
      case 'mouseleave':
        this.$().removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
        $ThisChildren.removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
        if (isFoldedCorner) {
          jQuery('#'+$ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCHoverClass );
          jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
          jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
        }
        if (!oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
          oScrollContainer.$().addClass(this._grabCursorClass);
        }
        break;
      case 'touchstart':
        if (sap.ui.Device.support.touch) {
          this.$().addClass(this._nodeActiveClass);
          $ThisChildren.addClass(this._nodeActiveClass);
          if (isFoldedCorner) {
            jQuery('#'+$ThisAttribute).removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
            jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
            jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
          }
        }
        break;
      case 'saptouchstart':
        this.$().removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
        $ThisChildren.removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
        if (isFoldedCorner) {
          jQuery('#'+$ThisAttribute).removeClass(this._nodeFCHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
          jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
          jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
        }
        break;
      case 'touchend':
        if (sap.ui.Device.support.touch) {
          this.$().removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
          $ThisChildren.removeClass(this._nodeActiveClass + ' ' +  this._nodeHoverClass);
          if (isFoldedCorner) {
            jQuery('#'+$ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' +  this._nodeFCHoverClass);
            jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
            jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
          }
        }
        this._handleClick(oEvent);
        break;
      case 'saptouchcancel':
        this.$().removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
        $ThisChildren.removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
        if (isFoldedCorner) {
          jQuery('#'+$ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCHoverClass);
          jQuery('div[id^='+$ThisAttribute+'][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
          jQuery('span[id^='+$ThisAttribute+'][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
        }
        break;
    }
};

}; // end of sap/suite/ui/commons/ProcessFlowNode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowRenderer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ProcessFlowRenderer");


/**
 * @class ProcessFlow renderer.
 * @static
 */
sap.suite.ui.commons.ProcessFlowRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.suite.ui.commons.ProcessFlowRenderer.render = function(oRm, oControl) {
  var sStyleZoomLevelClass = this.getZoomStyleClass(oControl)
      , i, j, n, m
      , oNode
      , oNextNode
      , nCollNumber
      , calcMatrixNodes
      , mapPositionToLane
      , nLaneNumber
      , oLaneHeaderSymbol
      , bDrawProcessSymbol
      ;

  // write the HTML into the render manager
  oRm.write("<div");
  oRm.writeControlData(oControl);
  oRm.addClass("sapSuiteUiScrollContainerPF");
  oRm.writeClasses();
  oRm.write(">"); // div element

  oRm.write("<div");
  oRm.writeAttribute("id", oControl.getId() + "-scroll-content");
  oRm.write(">"); // div element

  // nothing to render if there are no lanes
  if (!oControl.getLanes() || oControl.getLanes().length == 0) {
    oRm.write("</div>"); // scroll container
    oRm.write("</div>"); // whole control
    return;
  }


  try {
    calcMatrixNodes = oControl._getOrCreateProcessFlow();
    mapPositionToLane = oControl._getOrCreateLaneMap();
  } catch( exc ) {
    oControl._handleException( exc );
    return;
  }

  // fake field for accessibility keyboard interaction
  oRm.write("<span tabindex=0 ");
  oRm.writeAttribute("id", oControl.getId() + "-KbInteractionFakeElement");
  oRm.addClass("sapSuiteUiKbInteractionFakeElementPF");
  oRm.write("></span>");

  oRm.write("<table");
  oRm.writeAttribute("id", oControl.getId() + "-table");
  oRm.addClass("sapSuiteUiCommonsPF");
  oRm.addClass(sStyleZoomLevelClass);
  oRm.writeClasses();

  oRm.write(">");

  nLaneNumber = Object.keys(mapPositionToLane).length;

  oRm.write("<thead");
  oRm.writeAttribute("id", oControl.getId() + "-thead");
  oRm.write(">");

    oRm.write("<tr");
    oRm.addClass("sapSuiteUiCommonsPFHeader");
    oRm.addClass("sapSuiteUiCommonsPFHeaderHidden");
    oRm.writeClasses();
    oRm.write(">");

    // reserve space width for start symbol
      oRm.write("<th></th>");
      i = 0;
      while (i < nLaneNumber - 1) {
        // reserve space width for other parts to be displayed
        oRm.write("<th></th><th></th><th></th><th></th><th></th>");
        i++;
      }

      // space for the last node
      oRm.write("<th></th><th></th><th></th>");

      // reserve space width for end symbol
      oRm.write("<th></th>");
    oRm.write("</tr>");

    oRm.write("<tr");
    oRm.addClass("sapSuiteUiCommonsPFHeaderRow");
    oRm.writeClasses();
    oRm.write(">");
      oRm.write("<th>");
      oLaneHeaderSymbol = sap.suite.ui.commons.ProcessFlowLaneHeader.createNewStartSymbol(oControl._isHeaderMode());
      oRm.renderControl(oLaneHeaderSymbol);
      oRm.write("</th>");

      i = 0;
      // TODO
      // may be mistake here, that the position must be plus 1. What happens if e.g. there is 3 and 5 .... probably
      // fails with "null object" exception
      var nCount = 0;
      var aNodeStates = [];
      bDrawProcessSymbol = false;
      while (i < (nLaneNumber-1)) {
        var positionUp = 1; // each following artificial node has one more '1' at the end 
        oNode = mapPositionToLane[i];
        oNextNode = mapPositionToLane[i+1];
        if (oNode.getLaneId()+positionUp == oNextNode.getLaneId()) {
//        artificial node
          nCount = nCount + 1;
          aNodeStates.push(oNode.getState());
        }
        else {
          if (nCount == 0) {
            this._renderNormalNode(oRm, oControl, oNode, i, nLaneNumber);
          }
          else {
            aNodeStates.push(oNode.getState());
            bDrawProcessSymbol = true;
            this._renderMergedNode(oRm, oControl, oNode, nCount, aNodeStates, bDrawProcessSymbol);
            aNodeStates = [];
            nCount = 0;
          }
        }
        i++;
      }
      if (nCount == 0) {
        if (!oNextNode) {
          oNextNode = mapPositionToLane[0];
        }
        this._renderNormalNode(oRm, oControl, oNextNode, i, nLaneNumber);
      }
      else {
        aNodeStates.push(oNextNode.getState());
        bDrawProcessSymbol = false;
        this._renderMergedNode( oRm, oControl, oNode, nCount, aNodeStates, bDrawProcessSymbol);
        nCount = 0;
      } 
      oRm.write("<th>");
      oLaneHeaderSymbol = sap.suite.ui.commons.ProcessFlowLaneHeader.createNewEndSymbol(oControl._isHeaderMode());
      oRm.renderControl(oLaneHeaderSymbol);
      oRm.write("</th>");
    oRm.write("</tr>");
  oRm.write("</thead>");

  // end of the header (lane objects)

  // starting the body, which means table (node and connection rendering)
  oRm.write("<tbody>");
  m = calcMatrixNodes.length;
  //  first empty line to make the space betwen the header and table (see also visual design document)
  if (m > 0) {
    oRm.write("<tr>");
    oRm.write("<td colspan=\"" + (nLaneNumber*5).toString() + "\"></td>");
    oRm.write("</tr>");
  }

  i = 0;
  while (i < m) {
    oRm.write("<tr>");
    oRm.write("<td></td>");

    n = calcMatrixNodes[i].length;
    j = 0;

    while (j < n - 1) {
      oNode = calcMatrixNodes[i][j];

      if ((j == 0) || (j % 2)) {
        oRm.write("<td>");
      } else {
        oRm.write("<td colspan=\"4\">");
      }

      if (oNode) {
        if (oNode instanceof sap.suite.ui.commons.ProcessFlowNode) {
          oNode._setParentFlow(oControl);
          oNode._setZoomLevel(oControl.getZoomLevel());
          oNode._setFoldedCorner(oControl.getFoldedCorners());
          oRm.renderControl(oNode);
        } else {
          oNode.setZoomLevel(oControl.getZoomLevel());
          oControl.addAggregation("connections", oNode);
          oRm.renderControl(oNode);
        }
      }

      oRm.write("</td>");
      j++;
    }

    // the last space after a node + space under the end symbol
    oRm.write("<td></td>");
    oRm.write("<td></td>");
    oRm.write("</tr>");
    i++;
  }

  oRm.write("</tbody>");
  oRm.write("</table>");
  oRm.write("</div>"); // scroll content
  oRm.write("</div>"); // scroll container
};


sap.suite.ui.commons.ProcessFlowRenderer.getZoomStyleClass = function(oControl) {
  var sStyleClass = "";
  switch( oControl.getZoomLevel() ) {
    case sap.suite.ui.commons.ProcessFlowZoomLevel.One:
      sStyleClass = "sapSuiteUiCommonsPFZoomLevel1";
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Two:
      sStyleClass = "sapSuiteUiCommonsPFZoomLevel2";
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Three:
      sStyleClass = "sapSuiteUiCommonsPFZoomLevel3";
      break;
    case sap.suite.ui.commons.ProcessFlowZoomLevel.Four:
      sStyleClass = "sapSuiteUiCommonsPFZoomLevel4";
      break;
  }
  return sStyleClass;
};

sap.suite.ui.commons.ProcessFlowRenderer._renderNormalNode = function(oRm, oControl, oNode, i, nLaneNumber) {
  oRm.write("<th colspan=\"3\">");
  oRm.renderControl(oNode);
  oRm.write("</th>");
  if (i < nLaneNumber - 1) {
    oRm.write("<th colspan=\"2\">");
    var oLaneHeaderSymbol = sap.suite.ui.commons.ProcessFlowLaneHeader.createNewProcessSymbol(oControl._isHeaderMode());
    // forward the icon click events from the lane header items to the flow control
    oLaneHeaderSymbol.attachPress(jQuery.proxy(oControl.ontouchend, oControl));
    oRm.renderControl(oLaneHeaderSymbol);
    oRm.write("</th>");
}
};

sap.suite.ui.commons.ProcessFlowRenderer._renderMergedNode = function( oRm, oControl, oNode, nCount, aLaneIdNodeStates, bDrawProcessSymbol) {
  var aNodeStates = oControl._mergeLaneIdNodeStates(aLaneIdNodeStates);
  oNode.setState(aNodeStates);
  nCount++;
  var nCollNumber = nCount*3 + (nCount-1)*2;
  oRm.write("<th colspan=\"" + nCollNumber + "\">");
  oRm.renderControl(oNode);
  oRm.write("</th>");
  if (bDrawProcessSymbol) {
    oRm.write("<th colspan=\"2\">");
    var oLaneHeaderSymbol = sap.suite.ui.commons.ProcessFlowLaneHeader.createNewProcessSymbol(oControl._isHeaderMode());
    // forward the icon click events from the lane header items to the flow control
    oLaneHeaderSymbol.attachPress(jQuery.proxy(oControl.ontouchend, oControl));
    oRm.renderControl(oLaneHeaderSymbol);
    oRm.write("</th>");
  }
};

}; // end of sap/suite/ui/commons/ProcessFlowRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.RepeaterViewConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.RepeaterViewConfiguration.
jQuery.sap.declare("sap.suite.ui.commons.RepeaterViewConfiguration");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RepeaterViewConfiguration.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getPath path} : string</li>
 * <li>{@link #getItemMinWidth itemMinWidth} : int (default: -1)</li>
 * <li>{@link #getNumberOfTiles numberOfTiles} : int (default: -1)</li>
 * <li>{@link #getResponsive responsive} : any (default: false)</li>
 * <li>{@link #getExternal external} : boolean (default: false)</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getItemHeight itemHeight} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTemplate template} : sap.ui.core.Control</li>
 * <li>{@link #getExternalRepresentation externalRepresentation} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A configuration control defining how the content of the sap.suite.ui.commons.ViewRepeater control is displayed and what data is bound.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.RepeaterViewConfiguration", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"path" : {type : "string", group : "Misc", defaultValue : null},
		"itemMinWidth" : {type : "int", group : "Misc", defaultValue : -1},
		"numberOfTiles" : {type : "int", group : "Misc", defaultValue : -1},
		"responsive" : {type : "any", group : "Misc", defaultValue : false},
		"external" : {type : "boolean", group : "Misc", defaultValue : false},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"itemHeight" : {type : "int", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"template" : {type : "sap.ui.core.Control", multiple : false}, 
		"externalRepresentation" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.RepeaterViewConfiguration with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.RepeaterViewConfiguration.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index number of the view in View Repeater starting from 1.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIcon
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the regular icon is hovered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIconHovered
 * @function
 */


/**
 * Getter for property <code>path</code>.
 * A path used for rows/titles data binding.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>path</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getPath
 * @function
 */

/**
 * Setter for property <code>path</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPath  new value for property <code>path</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setPath
 * @function
 */


/**
 * Getter for property <code>itemMinWidth</code>.
 * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>itemMinWidth</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getItemMinWidth
 * @function
 */

/**
 * Setter for property <code>itemMinWidth</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iItemMinWidth  new value for property <code>itemMinWidth</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setItemMinWidth
 * @function
 */


/**
 * Getter for property <code>numberOfTiles</code>.
 * The number of tiles/rows that will be shown on a single page in this view.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>numberOfTiles</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getNumberOfTiles
 * @function
 */

/**
 * Setter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iNumberOfTiles  new value for property <code>numberOfTiles</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setNumberOfTiles
 * @function
 */


/**
 * Getter for property <code>responsive</code>.
 * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number of columns depends on the parent control's width. If you resize the control, the number of columns may change respectively so that the content tiles can fill the entire space of a row.
 *
 * Default value is <code>false</code>
 *
 * @return {any} the value of property <code>responsive</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getResponsive
 * @function
 */

/**
 * Setter for property <code>responsive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {any} oResponsive  new value for property <code>responsive</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setResponsive
 * @function
 */


/**
 * Getter for property <code>external</code>.
 * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>external</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getExternal
 * @function
 */

/**
 * Setter for property <code>external</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExternal  new value for property <code>external</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setExternal
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the regular icon is selected.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIconSelected
 * @function
 */


/**
 * Getter for property <code>itemHeight</code>.
 * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true. This value is used for calculating the number of tile rows.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemHeight</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getItemHeight
 * @function
 */

/**
 * Setter for property <code>itemHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemHeight  new value for property <code>itemHeight</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setItemHeight
 * @function
 */


/**
 * Getter for aggregation <code>template</code>.<br/>
 * The control used as a template while displaying rows/tiles in this view. It should not have fixed width wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getTemplate
 * @function
 */


/**
 * Setter for the aggregated <code>template</code>.
 * @param {sap.ui.core.Control} oTemplate
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setTemplate
 * @function
 */
	

/**
 * Destroys the template in the aggregation 
 * named <code>template</code>.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#destroyTemplate
 * @function
 */


/**
 * Getter for aggregation <code>externalRepresentation</code>.<br/>
 * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the "external" property is set to true. This allows you to create custom views, for example, Table views. The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does not have its own model.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getExternalRepresentation
 * @function
 */


/**
 * Setter for the aggregated <code>externalRepresentation</code>.
 * @param {sap.ui.core.Control} oExternalRepresentation
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setExternalRepresentation
 * @function
 */
	

/**
 * Destroys the externalRepresentation in the aggregation 
 * named <code>externalRepresentation</code>.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#destroyExternalRepresentation
 * @function
 */


// Start of sap/suite/ui/commons/RepeaterViewConfiguration.js

}; // end of sap/suite/ui/commons/RepeaterViewConfiguration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.SplitButton.
jQuery.sap.declare("sap.suite.ui.commons.SplitButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SplitButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getLite lite} : boolean (default: false)</li>
 * <li>{@link #getStyle style} : sap.ui.commons.ButtonStyle (default: sap.ui.commons.ButtonStyle.Default)</li>
 * <li>{@link #getStyled styled} : boolean (default: true)</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Split Button Control is a composite control that consists of a default-action Button and a Menu Button control.
 * The default-action button control represents a simple push button. It is used for initiating actions, such as save or print. It can contain some text, an icon, or both; the order of the two can be configured. The action initiated by this button is considered to be the default action for the control, and it must be one of the selections defined in the Menu Button menu.
 * The Menu Button control is a button that opens a menu upon user's click. MenuButton is a composition of the Menu control and the Button control and thus inheriting all features. When a menu item is selected by the user, MenuButton throws an event called itemSelected. The event transfers the itemId of the selected item. As an alternative, the button press event can be used which has a similar behavior.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.SplitButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.SplitButton", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"lite" : {type : "boolean", group : "Appearance", defaultValue : false},
		"style" : {type : "sap.ui.commons.ButtonStyle", group : "Appearance", defaultValue : sap.ui.commons.ButtonStyle.Default},
		"styled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"text" : {type : "string", group : "Appearance", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''}
	},
	aggregations : {
		"menu" : {type : "sap.ui.commons.Menu", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.SplitButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.SplitButton.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible split buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>lite</code>.
 * The split button is rendered as lite split button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lite</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getLite
 * @function
 */

/**
 * Setter for property <code>lite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLite  new value for property <code>lite</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setLite
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Style of the control (e.g. emphasized, accept)
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code>
 *
 * @return {sap.ui.commons.ButtonStyle} the value of property <code>style</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code> 
 *
 * @param {sap.ui.commons.ButtonStyle} oStyle  new value for property <code>style</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyle
 * @function
 */


/**
 * Getter for property <code>styled</code>.
 * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>styled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyled
 * @function
 */

/**
 * Setter for property <code>styled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStyled  new value for property <code>styled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyled
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text .
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIconFirst
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed for the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIcon
 * @function
 */


/**
 * Getter for aggregation <code>menu</code>.<br/>
 * Menu that shall be opened when the menu part of the button is clicked
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 * @name sap.suite.ui.commons.SplitButton#getMenu
 * @function
 */


/**
 * Setter for the aggregated <code>menu</code>.
 * @param {sap.ui.commons.Menu} oMenu
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setMenu
 * @function
 */
	

/**
 * Destroys the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#destroyMenu
 * @function
 */


// Start of sap/suite/ui/commons/SplitButton.js
jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuItem'); // unlisted dependency retained


(function() {

    /**
     * Checks that oMenuItem is in oMenu.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return true if the oMenuItem exists in the menu, false otherwise
     * @private
     */
    function existingMenuItem(oMenu, oMenuItem) {

        if (!oMenuItem || !oMenu || oMenu.getItems().length === 0) {
            return false;
        }

        if (oMenu.indexOfItem(oMenuItem) >= 0) {
            return true;
        }

        var aItems = oMenu.getItems();
        var oSubmenu = null;

        for ( var i = 0; i < aItems.length; i++) {
            oSubmenu = aItems[i].getSubmenu();
            if (existingMenuItem(oSubmenu, oMenuItem)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Interceptor method for menu item <code>setVisible()</code> method. Resets the menu is this menu item is not visible.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetVisibleInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setVisible.apply(oSplitButton._oMenuItem, arguments);

            if (!oSplitButton._oMenuItem.getVisible()) {
                oSplitButton.setMenu(oSplitButton._oMenuButton.getMenu());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setIcon()</code> method. Updates default action button icon as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetIconInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setIcon.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getIcon()) {
                oSplitButton._oDefaultActionButton.setIcon(oSplitButton._oMenuItem.getIcon());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button tooltip as well.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetTooltipInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setTooltip.apply(oSplitButton._oMenuItem, arguments);
            oSplitButton._oDefaultActionButton.setTooltip(oSplitButton._oMenuItem.getTooltip());
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button text as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetTextInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setText.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getText()) {
                oSplitButton._oDefaultActionButton.setText(oSplitButton._oMenuItem.getText());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Interceptor method for menu item <code>setEnabled()</code> method. Updates default action button as well with new property value if the control is enabled.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetEnabledInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setEnabled.apply(oSplitButton._oMenuItem, arguments);
            if (oSplitButton.getEnabled()) {
                oSplitButton._oDefaultActionButton.setEnabled(oSplitButton._oMenuItem.getEnabled());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Does the setup when the SplitButton is created.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.init = function() {

        this._oDefaultActionButton = new sap.ui.commons.Button(this.getId() + "-defaultActionButton");
        var that = this;
        // when default button is clicked and _menuItem is set then the event
        // will be fired
        this._oDefaultActionButton.attachPress(function() {

            if (that._oMenuItem) {
                that._oMenuItem.fireSelect();
            }
        });

        this._oMenuButton = new sap.ui.commons.MenuButton(this.getId() + "-menuButton");
        this._oMenuButton.addStyleClass("sapSuiteUiCommonsSplitButton-menuButton");
        if (this.getMenu()) {
            this._oMenuButton.setMenu(this.getMenu());
        }
    };

    /**
     * Cleans up the SplitButton instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.exit = function() {

        this.destroyAggregation("menu", true);
        this._oDefaultActionButton.destroy();
        this._oDefaultActionButton = null;
        this._oMenuButton.destroy();
        this._oMenuButton = null;
    };

    /**
     * Set the menu to the button and set menu item for the action button. The menu item for action button must exist in the menu. If it doesn't exist the first menu item is set by
     * default.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setMenu = function(oMenu, oMenuItem) {

        var that = this;
        this._oMenuButton.setMenu(oMenu);

        if (existingMenuItem(oMenu, oMenuItem) && oMenuItem.getVisible()) {
            this._oMenuItem = oMenuItem;
        } else {
            // set first menu item by default
            if (oMenu && oMenu.getItems()) {
                var firstMenuItem = oMenu.getItems()[0];
                if (firstMenuItem && firstMenuItem.getVisible()) {
                    this._oMenuItem = firstMenuItem;
                } else {
                    this._oMenuItem = null;
                }
            }
        }

        if (this._oMenuItem) {
            if (!this.getText()) {
                this._oDefaultActionButton.setText(this._oMenuItem.getText() || null);
            }
            if (!this.getIcon()) {
                this._oDefaultActionButton.setIcon(this._oMenuItem.getIcon() || null);
            }
            if (this.getEnabled()) {
                this._oDefaultActionButton.setEnabled(this._oMenuItem.getEnabled());
            }

            this._oDefaultActionButton.setTooltip(this._oMenuItem.getTooltip() || null);

            this._oMenuItem.setTooltip = menuItemSetTooltipInterceptor(that);
            this._oMenuItem.setText = menuItemSetTextInterceptor(that);
            this._oMenuItem.setIcon = menuItemSetIconInterceptor(that);
            this._oMenuItem.setEnabled = menuItemSetEnabledInterceptor(that);
            this._oMenuItem.setVisible = menuItemSetVisibleInterceptor(that);
        }

        return this;
    };

    /**
     * Return the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.getMenu = function() {

        return this._oMenuButton.getMenu();
    };

    /**
     * Destroy the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.destroyMenu = function() {

        this._oMenuButton.destroyMenu();
        return this;
    };

    /**
     * set enabled property for the control
     * 
     * @param bEnabled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setEnabled = function(bEnabled) {

        this._oDefaultActionButton.setEnabled(bEnabled);
        this._oMenuButton.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * set lite property for the control
     * 
     * @param bLite
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setLite = function(bLite) {

        this._oDefaultActionButton.setLite(bLite);
        this._oMenuButton.setLite(bLite);
        this.setProperty("lite", bLite);
    };

    /**
     * set style for the control
     * 
     * @param oStyle
     *                {sap.ui.commons.ButtonStyle}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyle = function(oStyle) {

        this._oDefaultActionButton.setStyle(oStyle);
        this._oMenuButton.setStyle(oStyle);
        this.setProperty("style", oStyle);
    };

    /**
     * set if the control is styled or not
     * 
     * @param bStyled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyled = function(bStyled) {

        this._oDefaultActionButton.setStyled(bStyled);
        this._oMenuButton.setStyled(bStyled);
        this.setProperty("styled", bStyled);
    };

    /**
     * set if the icon for the action button be displayed before or after text
     * 
     * @param bIconFirst
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIconFirst = function(bIconFirst) {

        this._oDefaultActionButton.setIconFirst(bIconFirst);
        this.setProperty("iconFirst", bIconFirst);
    };

    /**
     * set icon (image) to be displayed in action button
     * 
     * @param sIcon
     *                {sap.ui.core.URI}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIcon = function(sIcon) {

        this._oDefaultActionButton.setIcon(sIcon);
        this.setProperty("icon", sIcon);
    };

    /**
     * set text for the action button
     * 
     * @param sText
     *                {string}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setText = function(sText) {

        this._oDefaultActionButton.setText(sText);
        this.setProperty("text", sText);
    };

}());

}; // end of sap/suite/ui/commons/SplitButton.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThingCollection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThingCollection.
jQuery.sap.declare("sap.suite.ui.commons.ThingCollection");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ThingCollection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMinHeight minHeight} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.ux3.ThingViewer[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains a collection of the sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer. It allows you to navigate through them as well as delete them from the collection.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ThingCollection
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ThingCollection", { metadata : {

	publicMethods : [
		// methods
		"shiftPrev", "shiftNext", "addNextContent"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"minHeight" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"content" : {type : "sap.ui.ux3.ThingViewer", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThingCollection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThingCollection.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setHeight
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * The minimal width of the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setMinWidth
 * @function
 */


/**
 * Getter for property <code>minHeight</code>.
 * The minimal height of the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minHeight</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getMinHeight
 * @function
 */

/**
 * Setter for property <code>minHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinHeight  new value for property <code>minHeight</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setMinHeight
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
 * 
 * @return {sap.ui.ux3.ThingViewer[]}
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingViewer} vContent the content to remove or its index or id
 * @return {sap.ui.ux3.ThingViewer} the removed content or null
 * @public
 * @name sap.suite.ui.commons.ThingCollection#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingViewer[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThingCollection#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingViewer</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThingCollection#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#destroyContent
 * @function
 */


/**
 * Displays a previous item in the collection.
 *
 * @name sap.suite.ui.commons.ThingCollection#shiftPrev
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Displays the next item in the collection.
 *
 * @name sap.suite.ui.commons.ThingCollection#shiftNext
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Inserts an element into the next display position.
 *
 * @name sap.suite.ui.commons.ThingCollection#addNextContent
 * @function
 * @param {sap.ui.ux3.ThingViewer} oOContent
 *         An instance of ThingViewer or an instance of its descendant.
 * @type sap.suite.ui.commons.ThingCollection
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/ThingCollection.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ThingCollection.prototype.init = function() {
	this._iCenterNum = 0;
    this._bScrollDisabled = false;
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    this._oRemoveButton = new sap.ui.commons.Link({
        id: this.getId() + "-remove-button",
        tooltip: this._rb.getText("THINGCOLLECTION_BUTTON_REMOVE_TOOLTIP"),
        press: function() {
            that._removeCenterContent();
        }
    });
    this._oRemoveButton.addStyleClass("sapUiUx3OverlayCloseButton");

    this._initTouchEvents();
};

sap.suite.ui.commons.ThingCollection.prototype.exit = function() {
	this._oRemoveButton.destroy();
};

sap.suite.ui.commons.ThingCollection.prototype.onBeforeRendering = function() {
    this._oCenterControl = this.getContent()[this._iCenterNum] || null;
};

sap.suite.ui.commons.ThingCollection.prototype.onAfterRendering = function() {
    var that = this;

    jQuery.sap.byId(this.getId() + "-nav-prev").bind("click", function() { that.shiftPrev(); });
    jQuery.sap.byId(this.getId() + "-nav-next").bind("click", function() { that.shiftNext(); });

    this._updateArrows();
    
    if(this.getContent().length <= 1) {
        this._hideRemoveButton();        
    }
    
    jQuery.sap.byId(this._oRemoveButton.getId()).attr("role", "button");
    jQuery.sap.byId(this._oRemoveButton.getId()).attr("aria-disabled", "false");
};

sap.suite.ui.commons.ThingCollection.prototype.addContent = function(oContent) {
    this.addAggregation("content", oContent, true);
    this._updateArrows();
    this._showRemoveButton();
    return this;
};

sap.suite.ui.commons.ThingCollection.prototype.addNextContent = function(oContent) {
    this.insertAggregation("content", oContent, this._iCenterNum + 1, true);
    this._updateArrows();
    this._showRemoveButton();
    return this;  		
};

sap.suite.ui.commons.ThingCollection.prototype.shiftPrev = function() {
    if (this._isShiftPrevForbidden()) {
        return;
    }

    var that = this;
    this._hideRemoveButton();
    this._bScrollDisabled = true;

    var sContainerId = "#" + this.getId() + "-container";
    var oPrevPanel = jQuery(sContainerId + ">.sapSuiteTcPrev");
    var oCenterPanel = jQuery(sContainerId + ">.sapSuiteTcCenter");
    var oNextPanel = jQuery(sContainerId + ">.sapSuiteTcNext");

    var oRm = sap.ui.getCore().createRenderManager();
    
    var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
    this._iCenterNum--;
    var oDirection = {};
    oDirection[sDirection] = "+=110%";
    
    this._renderPrevPanel(oRm, this.getContent()[this._iCenterNum]);

    oCenterPanel.animate(oDirection, 800);

    oPrevPanel.animate(oDirection, 800, function() {
        oNextPanel.css(sDirection, "-110%");

        that._renderNextPanel(oRm);        // clear next panel
        oRm.destroy();

        that._bScrollDisabled = false;
        that._updateArrows();
        that._showRemoveButton();
        jQuery(sContainerId).focus();
        oCenterPanel.show();                // restore center panel if it was hidden on removing content
    });
    
    oPrevPanel.removeClass("sapSuiteTcPrev").addClass("sapSuiteTcCenter").attr("aria-hidden", "false");
    oCenterPanel.removeClass("sapSuiteTcCenter").addClass("sapSuiteTcNext").attr("aria-hidden", "true");
    oNextPanel.removeClass("sapSuiteTcNext").addClass("sapSuiteTcPrev");
};

sap.suite.ui.commons.ThingCollection.prototype.shiftNext = function() {
    if (this._isShiftNextForbidden()) {
        return;
    }

    var that = this;
    this._hideRemoveButton();
    this._bScrollDisabled = true;

    var sContainerId = "#" + this.getId() + "-container";
    var oPrevPanel = jQuery(sContainerId + ">.sapSuiteTcPrev");
    var oCenterPanel = jQuery(sContainerId + ">.sapSuiteTcCenter");
    var oNextPanel = jQuery(sContainerId + ">.sapSuiteTcNext");

    var oRm = sap.ui.getCore().createRenderManager();
    
    var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
    this._iCenterNum++;
    
    var oDirection = {};
    oDirection[sDirection] = "-=110%";
    
    this._renderNextPanel(oRm, this.getContent()[this._iCenterNum]);

    oCenterPanel.animate(oDirection, 800);

    oNextPanel.animate(oDirection, 800, function() {
        oPrevPanel.css(sDirection, "110%");

        that._renderPrevPanel(oRm);     // clear previous panel
        oRm.destroy();

        that._bScrollDisabled = false;
        that._updateArrows();
        that._showRemoveButton();
        jQuery(sContainerId).focus();
        oCenterPanel.show();            // restore center panel if it was hidden on removing content
    });

    oPrevPanel.removeClass("sapSuiteTcPrev").addClass("sapSuiteTcNext");
    oCenterPanel.removeClass("sapSuiteTcCenter").addClass("sapSuiteTcPrev").attr("aria-hidden", "true");
    oNextPanel.removeClass("sapSuiteTcNext").addClass("sapSuiteTcCenter").attr("aria-hidden", "false");
};

sap.suite.ui.commons.ThingCollection.prototype.onsapprevious = function(oEvent) {
    this.shiftPrev();
    oEvent.preventDefault();
};

sap.suite.ui.commons.ThingCollection.prototype.onsapnext = function(oEvent) {
    this.shiftNext();
    oEvent.preventDefault();
};

sap.suite.ui.commons.ThingCollection.prototype._initTouchEvents = function() {
    if (jQuery.sap.touchEventMode != "OFF") {
        var that = this;

        this.onswipeleft = function(oEvent) {
            oEvent.preventDefault();
            that.shiftNext();
        };
        this.onswiperight = function(oEvent) {
            oEvent.preventDefault();
            that.shiftPrev();
        };
    }
};

sap.suite.ui.commons.ThingCollection.prototype._removeCenterContent = function() {
    this._hideRemoveButton();           // hide remove button immediately to prevent double click
    this.removeAggregation("content", this.getContent()[this._iCenterNum], true);

    var that = this;
    var iContentLength = this.getContent().length;

    var oCenterPanel = jQuery("#" + this.getId() + "-container>.sapSuiteTcCenter");
    oCenterPanel.hide(600);

    if (that._iCenterNum >= iContentLength) {
        that._iCenterNum = iContentLength;
        that.shiftPrev();
    } else {
        that._iCenterNum -= 1;
        that.shiftNext();
    }
};

sap.suite.ui.commons.ThingCollection.prototype._showRemoveButton = function() {
    if (this.getContent().length > 1) {
        jQuery.sap.byId(this.getId() + "-remove-button").show();
    }
};

sap.suite.ui.commons.ThingCollection.prototype._hideRemoveButton = function() {
    jQuery.sap.byId(this.getId() + "-remove-button").hide();
};

sap.suite.ui.commons.ThingCollection.prototype._updateArrows = function() {
    var oNavPrev = jQuery.sap.byId(this.getId() + "-nav-prev");
    var oNavNext = jQuery.sap.byId(this.getId() + "-nav-next");
    var sPrevTooltip = "";
    var sNextTooltip = "";

	if (this._isShiftPrevForbidden()) {
        oNavPrev.removeClass("sapSuiteTcNavPrevArrow");
    } else {
        oNavPrev.addClass("sapSuiteTcNavPrevArrow");
        sPrevTooltip = this._rb.getText("THINGCOLLECTION_BUTTON_PREVIOUS_TOOLTIP");
    }
	oNavPrev.attr("title", sPrevTooltip);
	
    if (this._isShiftNextForbidden()) {
        oNavNext.removeClass("sapSuiteTcNavNextArrow");
    } else {
        oNavNext.addClass("sapSuiteTcNavNextArrow");
        sNextTooltip = this._rb.getText("THINGCOLLECTION_BUTTON_NEXT_TOOLTIP");
    }
    oNavNext.attr("title", sNextTooltip);
};

sap.suite.ui.commons.ThingCollection.prototype._isShiftPrevForbidden = function() {
	return this._bScrollDisabled || (this._iCenterNum <= 0);
};

sap.suite.ui.commons.ThingCollection.prototype._isShiftNextForbidden = function() {
	return this._bScrollDisabled || (this._iCenterNum >= this.getContent().length - 1);
};

sap.suite.ui.commons.ThingCollection.prototype._renderPrevPanel = function(oRm, oControl) {
	this._renderPanel(oRm, oControl, true);
};

sap.suite.ui.commons.ThingCollection.prototype._renderNextPanel = function(oRm, oControl) {
	this._renderPanel(oRm, oControl, false);
};

sap.suite.ui.commons.ThingCollection.prototype._renderPanel = function(oRm, oControl, bLeft) {
    var sPanelSelector = "#" + this.getId() + "-container>" + (bLeft ? ".sapSuiteTcPrev" : ".sapSuiteTcNext");
    var oPanel = jQuery(sPanelSelector);

    if (oPanel.length > 0) {

        if (oControl) {
            oRm.renderControl(oControl);
        } else {
            oRm.write("");
        }

        oRm.flush(oPanel[0]);
    }
};

}; // end of sap/suite/ui/commons/ThingCollection.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThreePanelThingInspector.
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingInspector");

jQuery.sap.require('sap.ui.ux3.ThingInspector'); // unlisted dependency retained



/**
 * Constructor for a new ThreePanelThingInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getSidebarWidth sidebarWidth} : sap.ui.core.CSSSize (default: '224px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenuContent menuContent} : sap.ui.commons.Link[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.ThingInspector#constructor sap.ui.ux3.ThingInspector}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.ThingInspector control. It displays the sap.suite.ui.commons.ThreePanelThingViewer control in the sap.ui.ux3.Overlay control.
 * @extends sap.ui.ux3.ThingInspector
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.ux3.ThingInspector.extend("sap.suite.ui.commons.ThreePanelThingInspector", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"logo" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"sidebarWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '224px'}
	},
	aggregations : {
		"menuContent" : {type : "sap.ui.commons.Link", multiple : true, singularName : "menuContent"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThreePanelThingInspector.extend
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setShowHeader
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A URL of the source of the ThingViewer's key visual image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setLogo
 * @function
 */


/**
 * Getter for property <code>sidebarWidth</code>.
 * The width of the ThingViewer's navigation panel.
 *
 * Default value is <code>224px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>sidebarWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getSidebarWidth
 * @function
 */

/**
 * Setter for property <code>sidebarWidth</code>.
 *
 * Default value is <code>224px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSidebarWidth  new value for property <code>sidebarWidth</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setSidebarWidth
 * @function
 */


/**
 * Getter for aggregation <code>menuContent</code>.<br/>
 * The items of the ThingViewer's Action Menu.
 * 
 * @return {sap.ui.commons.Link[]}
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getMenuContent
 * @function
 */


/**
 * Inserts a menuContent into the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *          oMenuContent the menuContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the menuContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the menuContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the menuContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#insertMenuContent
 * @function
 */

/**
 * Adds some menuContent <code>oMenuContent</code> 
 * to the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#addMenuContent
 * @function
 */

/**
 * Removes an menuContent from the aggregation named <code>menuContent</code>.
 *
 * @param {int | string | sap.ui.commons.Link} vMenuContent the menuContent to remove or its index or id
 * @return {sap.ui.commons.Link} the removed menuContent or null
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#removeMenuContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>menuContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Link[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#removeAllMenuContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Link</code> in the aggregation named <code>menuContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#indexOfMenuContent
 * @function
 */
	

/**
 * Destroys all the menuContent in the aggregation 
 * named <code>menuContent</code>.
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#destroyMenuContent
 * @function
 */


// Start of sap/suite/ui/commons/ThreePanelThingInspector.js
jQuery.sap.require('sap.ui.ux3.ThingInspector'); // unlisted dependency retained


sap.suite.ui.commons.ThreePanelThingInspector.prototype.init = function() {
    sap.ui.ux3.ThingInspector.prototype.init.apply(this);

    var that = this;
    this._oThingViewer.destroy();
    this._oThingViewer = new sap.suite.ui.commons.ThreePanelThingViewer(this.getId() + "-thingViewer");
    this.setAggregation("thingViewer", this._oThingViewer);

    this._oThingViewer.attachFacetSelected(function(oEvent) {
        var oItem = oEvent.getParameters().item;

        if (that.fireFacetSelected({ id: oItem.getId(), key: oItem.getKey(), item: oItem })) {
            that.setSelectedFacet(oItem);
        } else {
            oEvent.preventDefault();
        }
    });
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setShowHeader = function(showHeader) {
    this._oThingViewer.setShowHeader(showHeader);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getShowHeader = function() {
    this._oThingViewer.getShowHeader();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setLogo = function(oUri) {
    this._oThingViewer.setLogo(oUri);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getLogo = function() {
    this._oThingViewer.getLogo();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getSidebarWidth = function() {
    this._oThingViewer.getSidebarWidth();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setSidebarWidth = function(oWidth) {
    this._oThingViewer.setSidebarWidth(oWidth);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.addMenuContent = function(oContent) {
    this._oThingViewer.addMenuContent(oContent);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.insertMenuContent = function(oContent, iIndex) {
    this._oThingViewer.insertMenuContent(oContent, iIndex);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getMenuContent = function() {
    return this._oThingViewer.getMenuContent();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.removeMenuContent = function(oContent) {
    return this._oThingViewer.removeMenuContent(oContent);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.removeAllMenuContent = function() {
    return this._oThingViewer.removeAllMenuContent();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.indexOfMenuContent = function(oContent) {
    return this._oThingViewer.indexOfMenuContent(oContent);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.destroyMenuContent = function() {
    this._oThingViewer.destroyMenuContent();
    return this;
};

}; // end of sap/suite/ui/commons/ThreePanelThingInspector.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TileContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.TileContent.
jQuery.sap.declare("sap.suite.ui.commons.TileContent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TileContent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFooter footer} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: "Auto")</li>
 * <li>{@link #getUnit unit} : string</li>
 * <li>{@link #getDisabled disabled} : boolean (default: false)</li>
 * <li>{@link #getFrameType frameType} : sap.suite.ui.commons.FrameType (default: sap.suite.ui.commons.FrameType.Auto)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control serves a universal container for different types of content and footer.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.TileContent
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.TileContent", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"footer" : {type : "string", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : "Auto"},
		"unit" : {type : "string", group : "Misc", defaultValue : null},
		"disabled" : {type : "boolean", group : "Misc", defaultValue : false},
		"frameType" : {type : "sap.suite.ui.commons.FrameType", group : "Appearance", defaultValue : sap.suite.ui.commons.FrameType.Auto}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.TileContent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.TileContent.extend
 * @function
 */


/**
 * Getter for property <code>footer</code>.
 * The footer text of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footer</code>
 * @public
 * @name sap.suite.ui.commons.TileContent#getFooter
 * @function
 */

/**
 * Setter for property <code>footer</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooter  new value for property <code>footer</code>
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setFooter
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Updates the size of the tile. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>"Auto"</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.TileContent#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>"Auto"</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setSize
 * @function
 */


/**
 * Getter for property <code>unit</code>.
 * The percent sign, the currency symbol, or the unit of measure.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>unit</code>
 * @public
 * @name sap.suite.ui.commons.TileContent#getUnit
 * @function
 */

/**
 * Setter for property <code>unit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setUnit
 * @function
 */


/**
 * Getter for property <code>disabled</code>.
 * Disables control if true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disabled</code>
 * @public
 * @name sap.suite.ui.commons.TileContent#getDisabled
 * @function
 */

/**
 * Setter for property <code>disabled</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisabled  new value for property <code>disabled</code>
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setDisabled
 * @function
 */


/**
 * Getter for property <code>frameType</code>.
 * The frame type: 1x1 or 2x1.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.suite.ui.commons.FrameType} the value of property <code>frameType</code>
 * @public
 * @name sap.suite.ui.commons.TileContent#getFrameType
 * @function
 */

/**
 * Setter for property <code>frameType</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.suite.ui.commons.FrameType} oFrameType  new value for property <code>frameType</code>
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setFrameType
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The switchable view that depends on the tile type.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.TileContent#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.TileContent} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/TileContent.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.TileContent.prototype.init = function() {
	this._oDelegate = {
		onAfterRendering: function(oEvent) {
			oEvent.srcControl.$().removeAttr("tabindex");
		}
	};
};

sap.suite.ui.commons.TileContent.prototype._getContentType = function() {
	if (this.getContent()) {
		var sContentType = this.getContent().getMetadata().getName();
		if (sContentType == "sap.suite.ui.commons.NewsContent") {
			return "News";
		}
	}
};

sap.suite.ui.commons.TileContent.prototype.onAfterRendering = function() {
	var oContent = this.getContent();
	var thisRef = jQuery(this.getDomRef());
	if(!thisRef.attr("title")) {
		var sCntTooltip = oContent.getTooltip_AsString();
		var aTooltipEments = thisRef.find("*");
		aTooltipEments.removeAttr("title");
		var oCntTooltip = sCntTooltip ? sCntTooltip : "";
		thisRef.attr("title", oCntTooltip + "\n" + this._getFooterText());
	}
	
};

sap.suite.ui.commons.TileContent.prototype._getFooterText = function() {
    var sFooter = this.getFooter();
    var sUnit = this.getUnit();
    return sUnit 
         ? (sap.ui.getCore().getConfiguration().getRTL() 
                ? ((sFooter ? sFooter + " ," : "") + sUnit) 
                : (sUnit + (sFooter ? ", " + sFooter : ""))) 
         : sFooter;                     
};

sap.suite.ui.commons.TileContent.prototype.onBeforeRendering = function() {
	if (this.getContent()) {
		if (this.getDisabled()) {
			this.getContent().addDelegate(this._oDelegate);
		} else {
			this.getContent().removeDelegate(this._oDelegate);
		}
	}
};

sap.suite.ui.commons.TileContent.prototype.setContent = function(oObject, bSuppressInvalidate) {
	if (this.getContent()) {
		this.getContent().removeDelegate(this._oDelegate);
	}
	
	this.setAggregation("content", oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.TileContent.prototype.getAltText = function() {
	var sAltText = "";
	var bIsFirst = true;
	var oContent = this.getContent();
	
	if (oContent.getAltText) {
		sAltText += oContent.getAltText();
		bIsFirst = false;
	} else if (oContent.getTooltip_AsString()){
		sAltText += oContent.getTooltip_AsString();
		bIsFirst = false;
	}

	if (this.getUnit()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getUnit();
		bIsFirst = false;
	}

	if (this.getFooter()) {
		sAltText += (bIsFirst ? "" : "\n" ) + this.getFooter();
	}
	return sAltText;
};

}; // end of sap/suite/ui/commons/TileContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TileContent2X2') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.TileContent2X2.
jQuery.sap.declare("sap.suite.ui.commons.TileContent2X2");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TileContent2X2.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFooter footer} : string</li>
 * <li>{@link #getSize size} : sap.suite.ui.commons.InfoTileSize (default: "Auto")</li>
 * <li>{@link #getUnit unit} : string</li>
 * <li>{@link #getDisabled disabled} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control serves a universal container for different types of content and footer.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.24. 
 * API is not yet finished and might change completely
 * @name sap.suite.ui.commons.TileContent2X2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.TileContent2X2", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"footer" : {type : "string", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.suite.ui.commons.InfoTileSize", group : "Misc", defaultValue : "Auto"},
		"unit" : {type : "string", group : "Misc", defaultValue : null},
		"disabled" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.TileContent2X2 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.TileContent2X2.extend
 * @function
 */


/**
 * Getter for property <code>footer</code>.
 * The footer text of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footer</code>
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#getFooter
 * @function
 */

/**
 * Setter for property <code>footer</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooter  new value for property <code>footer</code>
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#setFooter
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Updates the size of the tile. If not set then the default size is applied based on the device tile.
 *
 * Default value is <code>"Auto"</code>
 *
 * @return {sap.suite.ui.commons.InfoTileSize} the value of property <code>size</code>
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>"Auto"</code> 
 *
 * @param {sap.suite.ui.commons.InfoTileSize} oSize  new value for property <code>size</code>
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#setSize
 * @function
 */


/**
 * Getter for property <code>unit</code>.
 * The percent sign, the currency symbol, or the unit of measure.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>unit</code>
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#getUnit
 * @function
 */

/**
 * Setter for property <code>unit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#setUnit
 * @function
 */


/**
 * Getter for property <code>disabled</code>.
 * Disables control if true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disabled</code>
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#getDisabled
 * @function
 */

/**
 * Setter for property <code>disabled</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisabled  new value for property <code>disabled</code>
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#setDisabled
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The switchable view that depends on the tile type.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.TileContent2X2} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TileContent2X2#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/TileContent2X2.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.TileContent2X2.prototype.init = function() {
	this._oDelegate = {
		onAfterRendering: function(oEvent) {
			oEvent.srcControl.$().removeAttr("tabindex");
		}
	};
};

sap.suite.ui.commons.TileContent2X2.prototype._getContentType = function() {
	if (this.getContent()) {
		var sContentType = this.getContent().getMetadata().getName();
		if (sContentType == "sap.suite.ui.commons.NewsContent") {
			return "News";
		}
	}
};

sap.suite.ui.commons.TileContent2X2.prototype.onAfterRendering = function() {
	var oContent = this.getContent();
	var thisRef = jQuery(this.getDomRef());
	if(!thisRef.attr("title")) {
		var sCntTooltip = oContent.getTooltip_AsString();
		var aTooltipEments = thisRef.find("*");
		aTooltipEments.removeAttr("title");
		var oCntTooltip = sCntTooltip ? sCntTooltip : "";
		thisRef.attr("title", oCntTooltip + "\n" + this._getFooterText());
	}
	
};

sap.suite.ui.commons.TileContent2X2.prototype._getFooterText = function() {
    var sFooter = this.getFooter();
    var sUnit = this.getUnit();
    return sUnit 
         ? (sap.ui.getCore().getConfiguration().getRTL() 
                ? ((sFooter ? sFooter + " ," : "") + sUnit) 
                : (sUnit + (sFooter ? ", " + sFooter : ""))) 
         : sFooter;                     
};

sap.suite.ui.commons.TileContent2X2.prototype.onBeforeRendering = function() {
	if (this.getContent()) {
		if (this.getDisabled()) {
			this.getContent().addDelegate(this._oDelegate);
		} else {
			this.getContent().removeDelegate(this._oDelegate);
		}
	}
};

sap.suite.ui.commons.TileContent2X2.prototype.setContent = function(oObject, bSuppressInvalidate) {
	if (this.getContent()) {
		this.getContent().removeDelegate(this._oDelegate);
	}
	
	this.setAggregation("content", oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.TileContent2X2.prototype.getAltText = function() {
	var sAltText = "";
	var oContent = this.getContent();
	
	if (oContent.getAltText) {
		sAltText += oContent.getAltText();
	} else if (oContent.getTooltip_AsString()){
		sAltText += oContent.getTooltip_AsString();
	}
	
	return sAltText;
};

}; // end of sap/suite/ui/commons/TileContent2X2.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineFilterListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.TimelineFilterListItem.
jQuery.sap.declare("sap.suite.ui.commons.TimelineFilterListItem");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TimelineFilterListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Provides Filter List Item for Timeline Control
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.TimelineFilterListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.TimelineFilterListItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"key" : {type : "string", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.TimelineFilterListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.TimelineFilterListItem.extend
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.suite.ui.commons.TimelineFilterListItem#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.suite.ui.commons.TimelineFilterListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineFilterListItem#setKey
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.TimelineFilterListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.TimelineFilterListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineFilterListItem#setText
 * @function
 */


// Start of sap/suite/ui/commons/TimelineFilterListItem.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.TimelineFilterListItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/TimelineFilterListItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.TimelineItem.
jQuery.sap.declare("sap.suite.ui.commons.TimelineItem");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TimelineItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDateTime dateTime} : any</li>
 * <li>{@link #getUserName userName} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getFilterValue filterValue} : string</li>
 * <li>{@link #getUserNameClickable userNameClickable} : boolean (default: false)</li>
 * <li>{@link #getReplyCount replyCount} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getEmbeddedControl embeddedControl} : sap.ui.core.Control</li>
 * <li>{@link #getReplyList replyList} : sap.m.List</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.TimelineItem#event:userNameClicked userNameClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.TimelineItem#event:replyPost replyPost} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.TimelineItem#event:replyListOpen replyListOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * TimelineItem
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.TimelineItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.TimelineItem", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"dateTime" : {type : "any", group : "Misc", defaultValue : null},
		"userName" : {type : "string", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "string", group : "Misc", defaultValue : null},
		"filterValue" : {type : "string", group : "Misc", defaultValue : null},
		"userNameClickable" : {type : "boolean", group : "Misc", defaultValue : false},
		"replyCount" : {type : "int", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"embeddedControl" : {type : "sap.ui.core.Control", multiple : false}, 
		"replyList" : {type : "sap.m.List", multiple : false}
	},
	events : {
		"userNameClicked" : {}, 
		"replyPost" : {}, 
		"replyListOpen" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.TimelineItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.TimelineItem.extend
 * @function
 */

sap.suite.ui.commons.TimelineItem.M_EVENTS = {'userNameClicked':'userNameClicked','replyPost':'replyPost','replyListOpen':'replyListOpen'};


/**
 * Getter for property <code>dateTime</code>.
 * Datetime value of Timeline item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>dateTime</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getDateTime
 * @function
 */

/**
 * Setter for property <code>dateTime</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oDateTime  new value for property <code>dateTime</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setDateTime
 * @function
 */


/**
 * Getter for property <code>userName</code>.
 * User name shown in the title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>userName</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getUserName
 * @function
 */

/**
 * Setter for property <code>userName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUserName  new value for property <code>userName</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setUserName
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Text shown in the title after user name
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setTitle
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text shown inside the item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon for this item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setIcon
 * @function
 */


/**
 * Getter for property <code>filterValue</code>.
 * Text for filter value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>filterValue</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getFilterValue
 * @function
 */

/**
 * Setter for property <code>filterValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFilterValue  new value for property <code>filterValue</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setFilterValue
 * @function
 */


/**
 * Getter for property <code>userNameClickable</code>.
 * Make user name as a clickable to raise userNameClicked event
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>userNameClickable</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getUserNameClickable
 * @function
 */

/**
 * Setter for property <code>userNameClickable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bUserNameClickable  new value for property <code>userNameClickable</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setUserNameClickable
 * @function
 */


/**
 * Getter for property <code>replyCount</code>.
 * count of the replies to the post
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>replyCount</code>
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getReplyCount
 * @function
 */

/**
 * Setter for property <code>replyCount</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iReplyCount  new value for property <code>replyCount</code>
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setReplyCount
 * @function
 */


/**
 * Getter for aggregation <code>embeddedControl</code>.<br/>
 * Embed other control in timeline item, such as a button or a check box, etc.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getEmbeddedControl
 * @function
 */


/**
 * Setter for the aggregated <code>embeddedControl</code>.
 * @param {sap.ui.core.Control} oEmbeddedControl
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setEmbeddedControl
 * @function
 */
	

/**
 * Destroys the embeddedControl in the aggregation 
 * named <code>embeddedControl</code>.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#destroyEmbeddedControl
 * @function
 */


/**
 * Getter for aggregation <code>replyList</code>.<br/>
 * Reply list related to the post
 * 
 * @return {sap.m.List}
 * @public
 * @name sap.suite.ui.commons.TimelineItem#getReplyList
 * @function
 */


/**
 * Setter for the aggregated <code>replyList</code>.
 * @param {sap.m.List} oReplyList
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#setReplyList
 * @function
 */
	

/**
 * Destroys the replyList in the aggregation 
 * named <code>replyList</code>.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#destroyReplyList
 * @function
 */


/**
 * Fire when user name in the item header is clicked
 *
 * @name sap.suite.ui.commons.TimelineItem#userNameClicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'userNameClicked' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself. 
 *  
 * Fire when user name in the item header is clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#attachUserNameClicked
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'userNameClicked' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#detachUserNameClicked
 * @function
 */

/**
 * Fire event userNameClicked to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.TimelineItem#fireUserNameClicked
 * @function
 */


/**
 * fire when Reply button is clicked
 *
 * @name sap.suite.ui.commons.TimelineItem#replyPost
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value content of reply post
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'replyPost' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself. 
 *  
 * fire when Reply button is clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#attachReplyPost
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'replyPost' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#detachReplyPost
 * @function
 */

/**
 * Fire event replyPost to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> content of reply post</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.TimelineItem#fireReplyPost
 * @function
 */


/**
 * fire when the reply link is clicked to open reply popover
 *
 * @name sap.suite.ui.commons.TimelineItem#replyListOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'replyListOpen' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself. 
 *  
 * fire when the reply link is clicked to open reply popover
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.TimelineItem</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#attachReplyListOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'replyListOpen' event of this <code>sap.suite.ui.commons.TimelineItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.TimelineItem#detachReplyListOpen
 * @function
 */

/**
 * Fire event replyListOpen to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.TimelineItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.TimelineItem#fireReplyListOpen
 * @function
 */


// Start of sap/suite/ui/commons/TimelineItem.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained


sap.suite.ui.commons.TimelineItem.prototype.init = function() {
	var that = this;
	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	this.resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
  //initialize _showIcons prop.
	this._showIcons = false;
  
	this._replyLink = new sap.m.Link({
		text: this.resBundle.getText("TIMELINE_REPLY"),
		press: function(oEvent) {
			that._openReplyDialog();
		}
	});
  
	this._jamBar = new sap.m.Toolbar({
		content: [this._replyLink]
	  	});
	
	this._replyInput = new sap.m.Input();
	this._replyPop = new sap.m.Popover({
		title: this.resBundle.getText("TIMELINE_REPLIES"),   
		placement: sap.m.PlacementType.Vertical,
		footer: new sap.m.Toolbar({
			content: [
			          this._replyInput,
			          new sap.m.Button({
			        	  text: this.resBundle.getText("TIMELINE_REPLY"),
			        	  press: function() {
			        		  that._replyPost();
			        		  that._replyPop.close();
			        	  }
			          })
			         ]
		}),
		// contentHeight : "15rem",
		contentWidth: "30rem"
	});
	
	//notch orientation
	this._orientation = "V";
  
};

sap.suite.ui.commons.TimelineItem.prototype._replyPost = function() {

	var replyText = this._replyInput.getValue();
	this.fireReplyPost({value: replyText});

};

sap.suite.ui.commons.TimelineItem.prototype._openReplyDialog = function() {
	this.fireReplyListOpen();
	this._replyInput.setValue('');

	if (!this._list) {
		this._list = this.getReplyList(); //when odata update happens, only once?
	}

	if (this._list != null) {
		this._replyPop.addContent(this._list);
		jQuery.sap.delayedCall(100, this, function() {
			this._replyPop.openBy(this._replyLink);
		}); // have to wait till the odata update is done, render is done

	} else {
		this._replyPop.openBy(this._replyLink);
	}

};
sap.suite.ui.commons.TimelineItem.prototype._formatDateValue = function(iDate) {
// Check different input type for Date
	var oDate;
	if (iDate instanceof Date) {
		oDate = iDate;
	} else if (typeof iDate === "string") {
	// handle format /Date(milliseconds)/
	  if (iDate.indexOf("Date") != -1) {
	  	var iTime = iDate.substring(iDate.indexOf("(") + 1, iDate.indexOf(")"));
	  	oDate = new Date(parseInt(iTime));
	  } else {
		  return iDate;
	  }
	}	else {
		oDate = new Date(parseInt(iDate));
	}
	var returnedDate = "";
//	var u = false;
	var diff = 0, t, T = new Date();
/*	var cyear = u ? T.getUTCFullYear() : T.getFullYear();
	var cmonth = u ? T.getUTCMonth() : T.getMonth();
	var cday = u ? T.getUTCDate() : T.getDate();
	var tyear = u ? oDate.getUTCFullYear() : oDate.getFullYear();
	var tmonth = u ? oDate.getUTCMonth() : oDate.getMonth();
	var tday = u ? oDate.getUTCDate() : oDate.getDate();*/
	var cyear = T.getFullYear();
	var cmonth = T.getMonth();
	var cday = T.getDate();
	var tyear = oDate.getFullYear();
	var tmonth = oDate.getMonth();
	var tday = oDate.getDate();
	var cdate = Date.UTC(cyear, cmonth, cday);
	var tdate = Date.UTC(tyear, tmonth, tday);
	t = cdate.valueOf() - tdate.valueOf();
	diff = Math.floor(t / (24 * 60 * 60 * 1000));
	var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({style: "short"});
  var timeFormat = sap.ui.core.format.DateFormat.getTimeInstance({style: "short"});

	if (diff == 0) {
		returnedDate = this.resBundle.getText('TIMELINE_TODAY');
	} else if (diff == 1) {
		returnedDate = this.resBundle.getText('TIMELINE_YESTERDAY');
//	} else if (diff > 1){
	} else {
		returnedDate = dateFormat.format(oDate);
	}
/*	} else {
		return oDate.toString();
	}*/
	returnedDate += " " + this.resBundle.getText('TIMELINE_AT') + " " + timeFormat.format(oDate);
	return returnedDate;
};
      
      
sap.suite.ui.commons.TimelineItem.prototype._getImageControl = function() {
	var sIconSrc = this.getIcon() ? this.getIcon() : "activity-items";
	var sImgId = this.getId()+ '-icon';
	var mProperties = {src : sIconSrc};
	var aCssClasses = [ 'sapSuiteUiCommonsTimelineItemIcon' ];
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId,
			this._oImageControl, this, mProperties, aCssClasses);

	return this._oImageControl;
};      


sap.suite.ui.commons.TimelineItem.prototype._isOfTypeTimelineItem = function() {
	return true;
};

sap.suite.ui.commons.TimelineItem.prototype.setLayout = function(position, alignment){
	this._position = position;
	this._alignment = alignment;
};

sap.suite.ui.commons.TimelineItem.prototype.setUserNameClickable = function(userNameClickable) {
	this.setProperty("userNameClickable", userNameClickable, true);
	if (!this._userNameLink) {
		var that = this;
		this._userNameLink = new sap.m.Link({
		text : this.getUserName(),
		tooltip: this.getUserName(),
		press : function(oEvent) {that.fireUserNameClicked();}});	
	}
};

sap.suite.ui.commons.TimelineItem.prototype.setText = function(text) {  // todo... change m.Text
	this.setProperty("text", text);
	if (!this._textBox){
		this._textBox = new sap.m.Text({
			maxLines : 10,
			text : this.getText()		
		});
	}
};

sap.suite.ui.commons.TimelineItem.prototype.onBeforeRendering = function() {
	if (this.getUserNameClickable() && (!this._userNameLink)) {
		var that = this;
		this._userNameLink = new sap.m.Link({
		text : this.getUserName(),
		tooltip:this.getUserName(),
		press : function(oEvent) {that.fireUserNameClicked();}});	
	}
	if (!this._list) {
		this._list = this.getReplyList(); //when odata update happens, only once?

	};

	if (this._list && this._list.getItems().length > 0) {
		this._replyLink.setText(this.resBundle.getText("TIMELINE_REPLY") + " (" + this._list.getItems().length + ")");

	} else if (this.getReplyCount()) {
		this._replyLink.setText(this.resBundle.getText("TIMELINE_REPLY") + " (" + this.getReplyCount() + ")");
	}
	
};

sap.suite.ui.commons.TimelineItem.prototype.onAfterRendering = function() {

	if (this.getParent() && this.getParent()._performUiChanges) {
		this.getParent()._performUiChanges(this);
	}
};

sap.suite.ui.commons.TimelineItem.prototype._getUserPictureControl = function() {

	var sImgId = this.getId() + "-img";
	var sSize = "2rem";
	var sHeight = sSize;
	var sWidth = sSize;

	var mProperties = {
		src: this.getUserPicture(),
		height: sHeight,
		width: sWidth,
		size: sSize
	};

	this._oUserPictureControl = sap.m.ImageHelper.getImageControl(sImgId, this._oUserPictureControl, this, mProperties);
	this._oUserPictureControl.setDensityAware(false); // Jam Can't deal with that
	return this._oUserPictureControl;
};


sap.suite.ui.commons.TimelineItem.prototype.exit = function() {

	if (this._oImageControl) {
		this._oImageControl.destroy();
		this._oImageControl = undefined;
	}
	if (this._userNameLink) {
		this._userNameLink.destroy();
		this._userNameLink = undefined;
	}
	if (this._replyLink) {
		this._replyLink.destroy();
		this._replyLink = undefined;
	}
	if (this._replyPop) {
		this._replyPop.destroy();
		this._replyPop = undefined;
	}
	if (this._jamBar) {
		this._jamBar.destroy();
		this._jamBar = undefined;
	}
	if (this._oUserPictureControl) {
		this._oUserPictureControl.destroy();
		this._oUserPictureControl = undefined;
	}
	if (this._textBox) {
		this._textBox.destroy();
		this._textBox = undefined;
	}
};

      

}; // end of sap/suite/ui/commons/TimelineItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.UnifiedThingGroup.
jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new UnifiedThingGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getDesign design} : sap.suite.ui.commons.ThingGroupDesign (default: sap.suite.ui.commons.ThingGroupDesign.ZeroIndent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display the facet header information.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingGroup", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"design" : {type : "sap.suite.ui.commons.ThingGroupDesign", group : "Misc", defaultValue : sap.suite.ui.commons.ThingGroupDesign.ZeroIndent}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.UnifiedThingGroup.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the group.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the group.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setDescription
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Defines how the control is rendered.
 *
 * Default value is <code>ZeroIndent</code>
 *
 * @return {sap.suite.ui.commons.ThingGroupDesign} the value of property <code>design</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>ZeroIndent</code> 
 *
 * @param {sap.suite.ui.commons.ThingGroupDesign} oDesign  new value for property <code>design</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the group.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/UnifiedThingGroup.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.UnifiedThingGroup.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/UnifiedThingGroup.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.UnifiedThingInspector.
jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingInspector");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new UnifiedThingInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTransactionsVisible transactionsVisible} : boolean (default: false)</li>
 * <li>{@link #getActionsVisible actionsVisible} : boolean (default: false)</li>
 * <li>{@link #getDestroyPageOnBack destroyPageOnBack} : boolean (default: true)</li>
 * <li>{@link #getConfigurationVisible configurationVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFacets facets} : sap.suite.ui.commons.FacetOverview[]</li>
 * <li>{@link #getFacetContent facetContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getKpis kpis} : sap.suite.ui.commons.KpiTile[]</li>
 * <li>{@link #getTransactions transactions} : sap.ui.core.Control[]</li>
 * <li>{@link #getActions actions} : sap.m.Button[]</li>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:backAction backAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:transactionsButtonPress transactionsButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:actionsButtonPress actionsButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:configurationButtonPress configurationButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control provides an ability to display a thing (for example, object factsheet) on the desktop, tablet, and phone devices in a Fiori style.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingInspector", { metadata : {

	publicMethods : [
		// methods
		"getSelectedFacet", "navigateToDetailWithContent", "navigateToDetail", "navigateToPage", "navigateToPageId"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"transactionsVisible" : {type : "boolean", group : "Misc", defaultValue : false},
		"actionsVisible" : {type : "boolean", group : "Misc", defaultValue : false},
		"destroyPageOnBack" : {type : "boolean", group : "Misc", defaultValue : true},
		"configurationVisible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
		"facets" : {type : "sap.suite.ui.commons.FacetOverview", multiple : true, singularName : "facet"}, 
		"facetContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "facetContent"}, 
		"navContainer" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
		"kpis" : {type : "sap.suite.ui.commons.KpiTile", multiple : true, singularName : "kpi"}, 
		"transactions" : {type : "sap.ui.core.Control", multiple : true, singularName : "transaction", deprecated: true}, 
		"actions" : {type : "sap.m.Button", multiple : true, singularName : "action", deprecated: true}, 
		"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}, 
		"objectHeader" : {type : "sap.m.ObjectHeader", multiple : false, visibility : "hidden"}
	},
	events : {
		"backAction" : {}, 
		"transactionsButtonPress" : {allowPreventDefault : true}, 
		"actionsButtonPress" : {allowPreventDefault : true}, 
		"configurationButtonPress" : {}, 
		"navigate" : {allowPreventDefault : true}, 
		"afterNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.UnifiedThingInspector.extend
 * @function
 */

sap.suite.ui.commons.UnifiedThingInspector.M_EVENTS = {'backAction':'backAction','transactionsButtonPress':'transactionsButtonPress','actionsButtonPress':'actionsButtonPress','configurationButtonPress':'configurationButtonPress','navigate':'navigate','afterNavigate':'afterNavigate'};


/**
 * Getter for property <code>height</code>.
 * The height of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setHeight
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setTitle
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setName
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setDescription
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setIcon
 * @function
 */


/**
 * Getter for property <code>transactionsVisible</code>.
 * If set to true, the Transaction button appears.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>transactionsVisible</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTransactionsVisible
 * @function
 */

/**
 * Setter for property <code>transactionsVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTransactionsVisible  new value for property <code>transactionsVisible</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setTransactionsVisible
 * @function
 */


/**
 * Getter for property <code>actionsVisible</code>.
 * If set to true, the Actions button appears.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>actionsVisible</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getActionsVisible
 * @function
 */

/**
 * Setter for property <code>actionsVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bActionsVisible  new value for property <code>actionsVisible</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setActionsVisible
 * @function
 */


/**
 * Getter for property <code>destroyPageOnBack</code>.
 * If set to true, destroys a page when the user chooses the Back button to leave this page.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>destroyPageOnBack</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getDestroyPageOnBack
 * @function
 */

/**
 * Setter for property <code>destroyPageOnBack</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDestroyPageOnBack  new value for property <code>destroyPageOnBack</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setDestroyPageOnBack
 * @function
 */


/**
 * Getter for property <code>configurationVisible</code>.
 * If set to true, the Configuration button appears.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>configurationVisible</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getConfigurationVisible
 * @function
 */

/**
 * Setter for property <code>configurationVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bConfigurationVisible  new value for property <code>configurationVisible</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setConfigurationVisible
 * @function
 */


/**
 * Getter for aggregation <code>facets</code>.<br/>
 * The list of the sap.suite.ui.commons.FacetOverview objects.
 * 
 * @return {sap.suite.ui.commons.FacetOverview[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getFacets
 * @function
 */


/**
 * Inserts a facet into the aggregation named <code>facets</code>.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *          oFacet the facet to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facet should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facet is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertFacet
 * @function
 */

/**
 * Adds some facet <code>oFacet</code> 
 * to the aggregation named <code>facets</code>.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *            oFacet the facet to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addFacet
 * @function
 */

/**
 * Removes an facet from the aggregation named <code>facets</code>.
 *
 * @param {int | string | sap.suite.ui.commons.FacetOverview} vFacet the facet to remove or its index or id
 * @return {sap.suite.ui.commons.FacetOverview} the removed facet or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeFacet
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facets</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.FacetOverview[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllFacets
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.FacetOverview</code> in the aggregation named <code>facets</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *            oFacet the facet whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfFacet
 * @function
 */
	

/**
 * Destroys all the facets in the aggregation 
 * named <code>facets</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyFacets
 * @function
 */


/**
 * Getter for aggregation <code>facetContent</code>.<br/>
 * The content that appears on the detail page of the UnifiedThingInspector.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getFacetContent
 * @function
 */


/**
 * Inserts a facetContent into the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFacetContent the facetContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facetContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facetContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facetContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertFacetContent
 * @function
 */

/**
 * Adds some facetContent <code>oFacetContent</code> 
 * to the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFacetContent the facetContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addFacetContent
 * @function
 */

/**
 * Removes an facetContent from the aggregation named <code>facetContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFacetContent the facetContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed facetContent or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeFacetContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facetContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllFacetContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>facetContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFacetContent the facetContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfFacetContent
 * @function
 */
	

/**
 * Destroys all the facetContent in the aggregation 
 * named <code>facetContent</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyFacetContent
 * @function
 */


/**
 * Getter for aggregation <code>kpis</code>.<br/>
 * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
 * 
 * @return {sap.suite.ui.commons.KpiTile[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getKpis
 * @function
 */


/**
 * Inserts a kpi into the aggregation named <code>kpis</code>.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *          oKpi the kpi to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the kpi should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the kpi is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the kpi is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertKpi
 * @function
 */

/**
 * Adds some kpi <code>oKpi</code> 
 * to the aggregation named <code>kpis</code>.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *            oKpi the kpi to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addKpi
 * @function
 */

/**
 * Removes an kpi from the aggregation named <code>kpis</code>.
 *
 * @param {int | string | sap.suite.ui.commons.KpiTile} vKpi the kpi to remove or its index or id
 * @return {sap.suite.ui.commons.KpiTile} the removed kpi or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeKpi
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>kpis</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.KpiTile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllKpis
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.KpiTile</code> in the aggregation named <code>kpis</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *            oKpi the kpi whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfKpi
 * @function
 */
	

/**
 * Destroys all the kpis in the aggregation 
 * named <code>kpis</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyKpis
 * @function
 */


/**
 * Getter for aggregation <code>transactions</code>.<br/>
 * Menu items for transaction popup.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTransactions
 * @function
 */


/**
 * Inserts a transaction into the aggregation named <code>transactions</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTransaction the transaction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the transaction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the transaction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the transaction is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertTransaction
 * @function
 */

/**
 * Adds some transaction <code>oTransaction</code> 
 * to the aggregation named <code>transactions</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTransaction the transaction to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#addTransaction
 * @function
 */

/**
 * Removes an transaction from the aggregation named <code>transactions</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTransaction the transaction to remove or its index or id
 * @return {sap.ui.core.Control} the removed transaction or null
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeTransaction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>transactions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllTransactions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>transactions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTransaction the transaction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfTransaction
 * @function
 */
	

/**
 * Destroys all the transactions in the aggregation 
 * named <code>transactions</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the transactionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyTransactions
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Action sheet controls.
 * 
 * @return {sap.m.Button[]}
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.m.Button}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.m.Button}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.m.Button} vAction the action to remove or its index or id
 * @return {sap.m.Button} the removed action or null
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.2. 
 * Deprecated due to the incorrect work with data binding. Open the popup in the actionsButtonPress event handler instead.
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyActions
 * @function
 */


/**
 * Getter for aggregation <code>pages</code>.<br/>
 * Contains pages except for Master and Detail.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getPages
 * @function
 */


/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertPage
 * @function
 */

/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addPage
 * @function
 */

/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removePage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfPage
 * @function
 */
	

/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyPages
 * @function
 */


/**
 * The event is fired when the user chooses the Back button.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#backAction
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'backAction' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Back button.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachBackAction
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'backAction' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachBackAction
 * @function
 */

/**
 * Fire event backAction to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireBackAction
 * @function
 */


/**
 * The event is fired when the user chooses the Transactions button.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#transactionsButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.caller The object that initiated the event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'transactionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Transactions button.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachTransactionsButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'transactionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachTransactionsButtonPress
 * @function
 */

/**
 * Fire event transactionsButtonPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> The object that initiated the event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireTransactionsButtonPress
 * @function
 */


/**
 * The event is fired when the user chooses the Actions button.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#actionsButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.caller The object that initiated the event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Actions button.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachActionsButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachActionsButtonPress
 * @function
 */

/**
 * Fire event actionsButtonPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> The object that initiated the event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireActionsButtonPress
 * @function
 */


/**
 * The event is fired when the user chooses the Configuration button.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#configurationButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.caller The object that initiated the event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'configurationButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Configuration button.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachConfigurationButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'configurationButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachConfigurationButtonPress
 * @function
 */

/**
 * Fire event configurationButtonPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> The object that initiated the event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireConfigurationButtonPress
 * @function
 */


/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * This event is propogated from the inner NavContainer. The event can also return internal Master and Detail pages.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#navigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page that was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page that was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page that will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page that will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page that is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are: "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * This event is propogated from the inner NavContainer. The event can also return internal Master and Detail pages.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachNavigate
 * @function
 */

/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page that was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page that was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page that will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page that will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page that is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are: "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * This event is propogated from the inner NavContainer. The event can also return internal Master and Detail pages.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#afterNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page that had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page that had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page that is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page that is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page that has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are: "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * This event is propogated from the inner NavContainer. The event can also return internal Master and Detail pages.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachAfterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachAfterNavigate
 * @function
 */

/**
 * Fire event afterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page that had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page that had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page that is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page that is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page that has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are: "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireAfterNavigate
 * @function
 */


/**
 * Returns a currently selected facet.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#getSelectedFacet
 * @function
 * @type sap.suite.ui.commons.FacetOverview
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Navigates to the Detail page.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#navigateToDetailWithContent
 * @function
 * @param {object} oAFacetData
 *         Contains content for the detail page to which the control must navigate.
 * @type sap.suite.ui.commons.UnifiedThingInspector
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * The control that shows the Detail page that is already set. This method can be used instead of navigateToDetailWithContent when the content is already set by addFacetContent.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#navigateToDetail
 * @function
 * @type sap.suite.ui.commons.UnifiedThingInspector
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * The method that adds any sap.m.Page to the aggregated NavContainer.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#navigateToPage
 * @function
 * @param {sap.m.Page} oOPage
 *         The sap.m.Page instance that is added to NavContainer of UnifiedThingInspector.
 * @param {boolean} bAddDefaultFooter
 *         If set to true, the default page footer is added from UnifiedThingInspector.
 * @type sap.suite.ui.commons.UnifiedThingInspector
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * The method that navigates to sap.m.Page.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#navigateToPageId
 * @function
 * @param {string} sSId
 *         The ID of sap.m.Page instance where the user navigates to.
 * @type sap.suite.ui.commons.UnifiedThingInspector
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/UnifiedThingInspector.js
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.suite.ui.commons.UnifiedThingInspector.prototype.init = function(){
	this._altKey = false; // flag for MAC - it shows whether the Alt key is pressed
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    /*this boolean is used to determine if animation of transition to detail page has been finished.
    if true - animation is still happening and control does not allow to navigate to another detail page (in navigateToDetail()).
    */
    this._bDetailPageIsTransitioning = false;
    
    this._oNavContainer = new sap.m.NavContainer(this.getId() + "-nav-container", {
        navigate: function (oEvent) {
            that._bDetailPageIsTransitioning = true;
            that.fireNavigate(oEvent);
        },
        afterNavigate: function (oEvent) {
            that._bDetailPageIsTransitioning = false;
            
            if (that.getDestroyPageOnBack()) {
	            var oPage = oEvent.getParameter("from");
	            var iIndex = that._oNavContainer.indexOfPage(oPage);
	            
	            if (iIndex > 1 && oEvent.getParameter("isBack")) {
	            	oPage.destroy(true);
	            }
            }
            
            that.fireAfterNavigate(oEvent);
        }
    });
    this.setAggregation("navContainer", this._oNavContainer);

    this._oActionSheet = new sap.m.ActionSheet(this.getId() + "-action-sheet", {
        showCancelButton: true,
        placement: sap.m.PlacementType.Top
    });

    this._oTransactionSheet = new sap.suite.ui.commons.LinkActionSheet(this.getId() + "-transaction-sheet", {
        showCancelButton: true,
        placement: sap.m.PlacementType.Top,
        itemPress: function(oEvent){
        	var oItem = oEvent.getParameter("item");
        	if (oItem.getMetadata().getName() == "sap.m.Link" && oItem._bEnterWasPressed) {
        		that._bDontOpenTransactions = true;
        	}
        }
    });

    this._oKpiScrollCont = new sap.m.ScrollContainer(this.getId() + "-kpi-scroll-container", {
        width : "100%",
        horizontal : this.isPhone()
    });
    
    this._oKpiScrollCont.addStyleClass("sapSuiteUtiKpiBox");

    this._oFacetsGrid = new sap.ui.layout.Grid(this.getId() + "-facets-grid", {
        defaultSpan: "L6 M12 S12",
        hSpacing: 1,
        vSpacing: 1,
        width: "auto"
    });
    this._oFacetsGrid.addStyleClass("sapSuiteUtiFacetGrid");

    this._oHeader = this._createHeaderObject(this.getId() + "-header");
    this._oHeader.getObjectHeader()._titleText.setMaxLines(2);

    this._oHeaderGrid = new sap.ui.layout.Grid(this.getId() + "-header-grid", {
        hSpacing: 0,
        vSpacing: 0,
        content: [
            this._oHeader,
            this._oKpiScrollCont
        ]
    });

    this._oMasterPage = new sap.m.Page(this.getId() + "-master-page", {
        content: [this._oHeaderGrid, this._oFacetsGrid],
        showNavButton: true,
        footer: new sap.m.Bar(this.getId() + "-master-footer", {
            contentRight: [
                new sap.m.Button(this.getId() + "-master-action-button", {
                    icon : "sap-icon://action",
                    tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_ACTIONS"),
                    press : function () {
                        var object = {};
                        object.caller = this;
                        if (that.fireActionsButtonPress(object)) {
	                        if (that._oActionSheet.getButtons().length) {
	                        	that._oActionSheet.openBy(this);
	                        } else {
	                        	jQuery.sap.log.info("The are no actions for displaying");
	                        }
                        }
                    }
                })
            ]
        }),
        navButtonPress: function () {
            that.fireBackAction();
        }
    });

    this._oMasterPage.getFooter().insertContentRight(
        new sap.m.Button(this.getId() + "-master-transaction-button", {
            text: that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_OPENWITH") + "...",
            tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_TRANSACTIONS_TOOLTIP"),
            press : function () {
            	if (!that._bDontOpenTransactions) {
                	var object = {};
                	object.caller = this;
                	if (that.fireTransactionsButtonPress(object)) {
                		if (that._oTransactionSheet.getItems().length) {
                			that._oTransactionSheet.openBy(this);
                		} else {
                			jQuery.sap.log.info("The are no transactions for displaying");
                		}
                	}
            	} else {
            		that._bDontOpenTransactions = false;
            	}

            }
        }),
        0
    );

    this._oDetailPage = new sap.m.Page(this.getId() + "-detail-page", {
        showNavButton: true,
        footer: new sap.m.Bar(this.getId() + "-detail-footer", {
            contentRight: [
                new sap.m.Button(this.getId() + "-detail-action-button", {
                    icon : "sap-icon://action",
                    tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_ACTIONS"),
                    press : function () {
                        var object = {};
                        object.caller = this;
                        if (that.fireActionsButtonPress(object)) {
	                        if (that._oActionSheet.getButtons().length) {
	                        	that._oActionSheet.openBy(this);
	                        } else {
	                        	jQuery.sap.log.info("The are no actions for displaying");
	                        }
                        }
                    }
                })
            ]
        }),
        navButtonPress: function () {
            that._navigateToMaster();
        }
    });

    this._oDetailPage.getFooter().insertContentRight(
        new sap.m.Button(this.getId() + "-detail-transaction-button", {
            text: that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_OPENWITH") + "...",
            tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_TRANSACTIONS_TOOLTIP"),
            press : function () {
                    var object = {};
                    object.caller = this;
                	if (that.fireTransactionsButtonPress(object)) {
                		if (that._oTransactionSheet.getItems().length) {
                			that._oTransactionSheet.openBy(this);
                		} else {
                			jQuery.sap.log.info("The are no transactions for displaying");
                		}
                	}
            }
        }),
        0
    );

    this._oNavContainer.addPage(this._oMasterPage);
    this._oNavContainer.addPage(this._oDetailPage);
    
    if(!jQuery.device.is.desktop) {
        sap.ui.Device.orientation.attachHandler(function (oE) {
	        that._updateHeaderLayoutData(oE);
	        that._adjustFacetLayout();
        });
    }

    this.setModel = function (oModel, sName){
        sap.suite.ui.commons.UnifiedThingInspector.prototype.setModel.apply(this, arguments);
        this._oActionSheet.setModel(oModel, sName);
        this._oTransactionSheet.setModel(oModel, sName);
        return this;
    };
    
    this._bindedAdjustFacetLayout = this._adjustFacetLayout.bind(this);
  
	this._oDelegate = {
		onclick: function(oEvent) {
			that.$().find(".sapSuiteFov").removeAttr("tabindex");
			var oFo = jQuery(oEvent.currentTarget);
			oFo.attr("tabindex", 0);
			jQuery.sap.focus(oFo);
		},
		onAfterRendering: function(oEvent) {
			that._adjustFacetLayout();
			if (that._sCurrentFoId == oEvent.srcControl.getId()) {
				oEvent.srcControl.$().attr("tabindex", 0);
			}
		},
		onkeydown: function(oEvent) {
			var oFo = oEvent.srcControl.$();
			
			var fnMove = function(oNewFo) {
				if (oNewFo.length) {
					oNewFo.attr("tabindex", 0);
					jQuery.sap.focus(oNewFo.get(0));
					oFo.removeAttr("tabindex");
					that._sCurrentFoId = oNewFo.attr("id");
				}
			};
			
			var fnMoveArr = function(oSite) {
				var oNewFo = that.$().find((oSite.row != undefined ? "[data-row=" + oSite.row + "]" : "")
					+ (oSite.col != undefined ? "[data-col=" + oSite.col + "]" : "")
					+ (oSite.f != undefined ? "[data-f=" + oSite.f + "]" : ""));
				fnMove(oNewFo);
			};
			
			var sRow = oFo.attr("data-row");
			var sCol = oFo.attr("data-col");
			var sF = oFo.attr("data-f");
			
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iArrowLeft = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			var iArrowRight = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			
			switch(oEvent.which) {
				case jQuery.sap.KeyCodes.ARROW_UP:
					fnMoveArr({row: parseInt(sRow) - 1, col: sCol});
					oEvent.preventDefault();
					break;
				case jQuery.sap.KeyCodes.ARROW_DOWN:
					fnMoveArr({row: parseInt(sRow) + 1, col: sCol});
					oEvent.preventDefault();
					break;
				case iArrowLeft:
					if (iArrowRight == that._prevKey && !oFo.is(that._prevFo)) {
						fnMove(that._prevFo);
					} else {
						fnMoveArr({col: parseInt(sCol) - 1, f: sF});
					}
					oEvent.preventDefault();
					break;
				case iArrowRight:
					if (iArrowLeft == that._prevKey && !oFo.is(that._prevFo)) {
						fnMove(that._prevFo);
					} else {
						fnMoveArr({col: parseInt(sCol) + 1, f: sF});
					}
					oEvent.preventDefault();
					break;
				case jQuery.sap.KeyCodes.HOME:
					fnMove(that.$().find("[data-home]"));
					oEvent.preventDefault();
					break;
				case jQuery.sap.KeyCodes.END:
					fnMove(that.$().find("[data-end]"));
					oEvent.preventDefault();
			}
			
			that._prevKey = oEvent.which;
			that._prevFo = oFo;
		}
	};
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.exit = function () {
    var that = this;
    this._oActionSheet.destroy();
    this._oTransactionSheet.destroy();

    sap.ui.Device.orientation.detachHandler(function () {
        that._updateHeaderLayoutData();
    });
    
    sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._updateHeaderLayoutData = function (oE) {
    var sContainerWidth = "";
    var oScrollContainer = jQuery.sap.byId(this.getId() + "-kpi-scroll-container-scroll");
    var sSCClass = this.getScrollClass();
    
    if (jQuery.device.is.tablet && !oE.landscape) {
       sContainerWidth = "100%";
       oScrollContainer.addClass(sSCClass);
    } else {
    	oScrollContainer.removeClass(sSCClass);
    }
    
    oScrollContainer.css("width", sContainerWidth);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._adjustFacetLayout = function() {	
	var iFacetsLength = this.getFacets().length;
    if (iFacetsLength > 0) {
    	this.getFacets()[0].$().attr("data-home", true);
    	this.getFacets()[iFacetsLength - 1].$().attr("data-end", true);
    }
	
	if (this.$().outerWidth(true) >= 1024 || this._oFacetsGrid.$().hasClass("sapUiRespGridMedia-Std-Desktop")) {
		this._adjustTwoColumnFacetLayout();
	} else {
		this._adjustOneColumnFacetLayout();
	}
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._adjustOneColumnFacetLayout = function() {
	var iFacetsLength = this.getFacets().length;

	for (var i = 0; i < iFacetsLength; i++) {
		this.getFacets()[i].$().attr("data-row", i).attr("data-col", 0)
		.parent().css("margin-top", "").removeClass("sapSuiteUtiFacetLeft");
	}
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._adjustTwoColumnFacetLayout = function() {
	this._adjustOneColumnFacetLayout();
    
    //Correct layout to avoid issues with gaps between cards
    var aFacets = this.getFacets();
    var fFacetBalance = 0;
    
    var iLRow = 0, iRRow = 0, iF = -1;
    
    var iFacetsLength = aFacets.length;
    
    for (var i = 0; i < iFacetsLength; i++) {
    	var fHeight = parseFloat(aFacets[i].$().css("height"));
    	
        if (fFacetBalance > 0) {
        	fFacetBalance -= fHeight + parseFloat(aFacets[i].$().parent().css("margin-bottom"));
        	aFacets[i].$().attr("data-row", iRRow).attr("data-col", 1).attr("data-f", iF);
        	iRRow += 1;
        } else {
        	if (fFacetBalance < 0) {
        		aFacets[i].$().parent().css("margin-top", fFacetBalance + "px");
        	} else {
        		aFacets[i].$().parent().addClass("sapSuiteUtiFacetLeft");
        	}
        	
        	fFacetBalance += fHeight + parseFloat(aFacets[i].$().parent().css("margin-bottom"));
        	iF += 1;
        	aFacets[i].$().attr("data-row", iLRow).attr("data-col", 0).attr("data-f", iF);
        	iLRow += 1;
        }
    }
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onAfterRendering = function() {
	if(this._sTitleResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
	}
	
    var oHeader = jQuery.sap.domById(this.getId() + "-header");
    if (oHeader) {
    	this._sTitleResizeHandlerId = sap.ui.core.ResizeHandler.register(oHeader,  jQuery.proxy(this._handleResize, this));
    	this._handleResize();
    }
    
    if(jQuery.device.is.tablet && jQuery.device.is.portrait) {
        jQuery.sap.byId(this.getId() + "-kpi-scroll-container-scroll").css("width", "100%").addClass(this.getScrollClass());
    }
    
    var iFacetsLength = this.getFacets().length;
    for (var i = 0; i < iFacetsLength; i++) {
    	this.getFacets()[i].addDelegate(this._oDelegate);
    }
    
    var aCurrentFo = jQuery.sap.byId(this._sCurrentFoId);
    if (aCurrentFo.length == 0) {
    	aCurrentFo = this.$().find("[data-home]");
    	this._sCurrentFoId = aCurrentFo.attr("id");
    }
    aCurrentFo.attr("tabindex", 0);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._handleResize = function() {
	this._adjustFacetLayout();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._getFontSize = function(iCont, iWidth) {
	var nSize = iWidth/(iCont*0.5);
	if(nSize > 28) {
		return 28;
	} else if(nSize < 20) {
		return 20;
	} else {
		return nSize;	
	}
	
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onBeforeRendering = function() {
    var that=this;
    if (this.getConfigurationVisible()) {
        if (this._oMasterPage.getFooter().getContentLeft().length == 0) {
            this._oMasterPage.getFooter().addContentLeft(new sap.m.Button(this.getId() + "-master-settings-button", {
                icon : "sap-icon://action-settings",
                tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_SETTINGS_TOOLTIP"),
                press : function () {
                    var object = {};
                    object.caller = this;
                    that.fireConfigurationButtonPress(object);
                }
            }), true);
        }
        
        if (this._oDetailPage.getFooter().getContentLeft().length == 0) {
            this._oDetailPage.getFooter().addContentLeft(new sap.m.Button(this.getId() + "-detail-settings-button", {
                icon : "sap-icon://action-settings",
                tooltip : that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_SETTINGS_TOOLTIP"),
                press : function () {
                    var object = {};
                    object.caller = this;
                    that.fireConfigurationButtonPress(object);
                }
            }), true);
        }
    } else {
        this._oMasterPage.getFooter().removeAllContentLeft(true);
        this._oDetailPage.getFooter().removeAllContentLeft(true);
    }

    sap.ui.getCore().byId(this.getId() + "-master-action-button").setVisible(this.getActionsVisible());
    sap.ui.getCore().byId(this.getId() + "-detail-action-button").setVisible(this.getActionsVisible());

    sap.ui.getCore().byId(this.getId() + "-master-transaction-button").setVisible(this.getTransactionsVisible());
    sap.ui.getCore().byId(this.getId() + "-detail-transaction-button").setVisible(this.getTransactionsVisible());

    //If there are no KPIs - do not show scroll container at all.
    //This fixes issue when there are no KPIs but on phone we have two rows in header.
    this._oKpiScrollCont.setVisible(!!this.getKpis().length);
    
    //If there is less than 3 tiles - pass specific class flag
    if (this.getKpis().length < 3) {
        this._oKpiScrollCont.addStyleClass("sapSuiteUtiKpiLT3");
    }
    
    this._fitKpiTiles();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._fitKpiTiles = function() {
	var sHeaderSpan;
    var sKpiCntSpan;
    var iKpiLength = this.getKpis().length;

    switch (iKpiLength) {
        case 0:
            sHeaderSpan = "L12 M12 S12";
            sKpiCntSpan = "L12 M12 S12";
            break;
        case 1:
            sHeaderSpan = "L9 M12 S12";
            sKpiCntSpan = "L3 M12 S12";
            break;
        case 2:
            sHeaderSpan = "L7 M12 S12";
            sKpiCntSpan = "L5 M12 S12";
            break;
        default:
            sHeaderSpan = "L6 M12 S12";
            sKpiCntSpan = "L6 M12 S12";
    }

    this._oHeader.setLayoutData(new sap.ui.layout.GridData({span: sHeaderSpan}));
    this._oKpiScrollCont.setLayoutData(new sap.ui.layout.GridData({span: sKpiCntSpan}));
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.isPhone = function() {
    return jQuery.device.is.phone || jQuery.device.is.iphone;
};

// overridden properties setters
sap.suite.ui.commons.UnifiedThingInspector.prototype.setTitle = function(sTitle) {
    this.setProperty("title", sTitle, true);
    this._oMasterPage.setTitle(sTitle);
    this._oDetailPage.setTitle(sTitle);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setName = function(sName) {
	this._oHeader.setName(sName);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setDescription = function(sDescription) {
	this._oHeader.setDescription(sDescription);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getName = function() {
	return this._oHeader.getName();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getDescription = function() {
	return this._oHeader.getDescription();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setIcon = function(sIcon) {
    this._oHeader.setIcon(sIcon);
    this.setProperty("icon", sIcon, true);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getScrollClass = function() {
	var iKpiCount = this.getKpis().length;
	var sScrollClass = "";
	if (iKpiCount == 1) {
		sScrollClass = "sapSuiteUtiScOne";
	} else if (iKpiCount == 2) {
		sScrollClass = "sapSuiteUtiScTwo";
	} else if (iKpiCount > 2) {
		sScrollClass = "sapSuiteUtiScThree";
	}
	
	return sScrollClass;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._navigateToMaster = function() {
    this._oNavContainer.back();
};

/*Method should be called when user selects some facet. Developer should supply this method with content for detail page.
Method checks if there is any other already happening transition to detail page. E.g. user double clicked facet. If page is 
still transitioning - we cancel newly added navigation.
*/
sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetailWithContent = function(aFacetData) {
	
    if (!this._bDetailPageIsTransitioning) {
        this.removeAllFacetContent();
        if (jQuery.isArray(aFacetData)) {
            for (var i = 0; i < aFacetData.length; i++) {
                this.addFacetContent(aFacetData[i]);
            }
        } else {
            this.addFacetContent(aFacetData);
        }
        this._oNavContainer.to(this._oDetailPage.getId());
        this._oDetailPage.scrollTo(0);
    }
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetail = function() {
    this._oNavContainer.to(this._oDetailPage.getId());
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToPage = function(oPage, addDefaultFooter) {
    var that = this;
    oPage.attachNavButtonPress(function(oEvent){
            that._oNavContainer.back();     
    });
    
    if(addDefaultFooter == undefined || addDefaultFooter) {
            var oFooter = this._oMasterPage.getFooter().clone();
            oPage.setFooter(oFooter);               
    }

    this._oNavContainer.addPage(oPage);
    this._oNavContainer.to(oPage.getId());
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToPageById = function(sId) {
    this._oNavContainer.to(sId);
    return this;
};

/***** Actions aggregation overridden methods *****/

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeFacet = function(oFacet, bSuppressInvalidate) {
	oFacet.removeDelegate(this._oDelegate);
    return this.removeAggregation("facets", oFacet, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllFacets = function(bSuppressInvalidate) {
	for (var i = 0; i < this.getFacets().length; i++) {
		this.getFacets()[i].removeDelegate(this._oDelegate);
	}
	
    return this.removeAllAggregation("facets", bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getActions = function() {
    return this._oActionSheet.getButtons();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertAction = function(oAction, iIndex) {
    this._oActionSheet.insertButton(oAction, iIndex);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addAction = function(oAction) {
    this._oActionSheet.addButton(oAction);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAction = function(vAction) {
    return this._oActionSheet.removeButton(vAction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllActions = function() {
    return this._oActionSheet.removeAllButtons();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfAction = function(oAction) {
    return this._oActionSheet.indexOfButton(oAction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyActions = function() {
    this._oActionSheet.destroyButtons();
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getTransactions = function() {
    return this._oTransactionSheet.getItems();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addTransaction = function(oTransaction) {
	this._oTransactionSheet.addItem(oTransaction);
	return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertTransaction = function(oTransaction, iIndex) { 
	this._oTransactionSheet.insertItem(oTransaction, iIndex);
    return this;
}; 

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeTransaction = function(oTransaction) { 
	return this._oTransactionSheet.removeItem(oTransaction);
}; 

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllTransactions = function() { 
	return this._oTransactionSheet.removeAllItems();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfTransaction = function(oTransaction) {
    return this._oTransactionSheet.indexOfItem(oTransaction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyTransactions = function() {
    this._oTransactionSheet.destroyItems();
    return this;
};

/**************************************************************
 * AGGREGATION FORWARDING inspired by Split Container
 **************************************************************/

sap.suite.ui.commons.UnifiedThingInspector.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName){
    var args = Array.prototype.slice.call(arguments);
    if(sAggregationName === "facets"){
        args[1] = "content";
        return this._oFacetsGrid[sFunctionName].apply(this._oFacetsGrid, args.slice(1));
    }else if(sAggregationName === "kpis"){
        args[1] = "content";
        return this._oKpiScrollCont[sFunctionName].apply(this._oKpiScrollCont, args.slice(1));
    }else if(sAggregationName === "facetContent"){
        args[1] = "content";
        return this._oDetailPage[sFunctionName].apply(this._oDetailPage, args.slice(1));
    }else {
        return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, args.slice(1));
    }
};


/**************************************************************
 * START - forward aggregation related methods to the inner aggregation
 **************************************************************/
sap.suite.ui.commons.UnifiedThingInspector.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple){
    return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getAggregation = function(sAggregationName, oDefaultForCreation){
    return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfAggregation = function(sAggregationName, oObject){
    return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate){
    this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
    this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getPages = function() {
    return this._oNavContainer.getPages().slice(2);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertPage = function(oPage, iIndex, bSuppressInvalidate) {
    this._oNavContainer.insertPage(oPage, iIndex + 2, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addPage = function(oPage, bSuppressInvalidate) {
    this._oNavContainer.addPage(oPage, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removePage = function(oPage, bSuppressInvalidate) {
    return this._oNavContainer.removePage(oPage, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllPages = function(bSuppressInvalidate) {
	var aPages = this.getPages();
	
	for (var i = aPages.length - 1; i >= 0; i--) {
		this._oNavContainer.removePage(aPages[i], bSuppressInvalidate);
	}
    return aPages;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfPage = function(oPage) {
	var i = this._oNavContainer.indexOfPage(oPage);
    return i > 1 ? i - 2 : -1;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyPages = function(bSuppressInvalidate) {
	var aPages = this.getPages();
	
	for (var i = aPages.length - 1; i >= 0; i--) {
		aPages[i].destroy(bSuppressInvalidate);
	}
    return this;
};


/**************************************************************
 * END - forward aggregation related methods to the inner aggregation
 **************************************************************/

sap.suite.ui.commons.UnifiedThingInspector.prototype._createHeaderObject = function(sId) {
//    var that = this;
    sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingInspector.Header", {
        metadata: {
            properties: {
                name: "string",
                description: "string",
                icon: "sap.ui.core.URI"
            },
            aggregations: {
            	"objectHeader" : {type : "sap.m.ObjectHeader", multiple : false}
            }
        },
        init : function() {
            this._oObjectHeader = new sap.m.ObjectHeader (this.getId() + "-object-header", { condensed: true });
            this.setAggregation("objectHeader", this._oObjectHeader);
        },
        setDescription : function(sDesc) {
        	this._oObjectHeader.removeAllAttributes();
        	this._oObjectHeader.addAttribute(new sap.m.ObjectAttribute({ text: sDesc }));
        },
        setName : function(sName) {
        	this._oObjectHeader.setTitle(sName);
        },
        getDescription : function() {
        	if(this._oObjectHeader.getAttributes().length == 1) {
        		return this._oObjectHeader.getAttributes()[0].getText();
        	} else {
        		return "";
        	}
        },
        getName : function() {
        	return this._oObjectHeader.getTitle();
        },
        setIcon: function(sIcon) {
            var bValueChanged = !jQuery.sap.equal(this.getIcon(), sIcon);

            if (bValueChanged) {
                if (this._oIcon) {
                    this._oIcon.destroy();
                    this._oIcon = undefined;
                }

                if (sIcon) {
                    this._oIcon = sap.ui.core.IconPool.createControlByURI( {
                        id: this.getId() + "-icon-image",
                        src: sIcon
                    }, sap.m.Image);

                    this._oIcon.addStyleClass("sapSuiteUtiHeaderIconImage");

                    if (this._oIcon instanceof sap.ui.core.Icon) {
                        this._oIcon.setSize("64px");
                    }
                }
            }

            return this.setProperty("icon", sIcon);
        },
        exit: function() {
            if (this._oIcon) {
                this._oIcon.destroy();
            }
        },
        renderer: function(oRm, oControl) {
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("sapSuiteUtiHeader");
            oRm.writeClasses();
            oRm.write(">");

            if (oControl._oIcon) {
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-icon");
                oRm.addClass("sapSuiteUtiHeaderIcon");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oIcon);
                oRm.write("</div>");
            }
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-content");
                if (oControl._oIcon) {
                    oRm.addClass("sapSuiteUtiHeaderContentWithIcon");
                } else {
                    oRm.addClass("sapSuiteUtiHeaderContent");
                }
                oRm.writeClasses();
                oRm.write(">");
                oRm.renderControl(oControl.getObjectHeader());
                oRm.write("</div>");
            oRm.write("</div>");
        }
    });

    return new sap.suite.ui.commons.UnifiedThingInspector.Header(sId);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._isMasterPage = function() {
	return -1 != this._oNavContainer.getCurrentPage().getId().indexOf("-master-page");
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onkeydown = function(oEvent) {
	switch (oEvent.keyCode) {
		case jQuery.sap.KeyCodes.S:
			if ((this._altKey || oEvent.altKey) && this.getConfigurationVisible()) {
				this.$().find("button[id*='-settings-button']:visible").focus();
				oEvent.stopPropagation();
			}
			break;
		case jQuery.sap.KeyCodes.O:
			if ((this._altKey || oEvent.altKey) && this.getTransactionsVisible()) {
				this.$().find("button[id*='-transaction-button']:visible").focus();
				oEvent.stopPropagation();
			}
			break;
		case jQuery.sap.KeyCodes.K:
			if ((this._altKey || oEvent.altKey) && this.getActionsVisible()) {
				this.$().find("button[id*='-action-button']:visible").focus();
				oEvent.stopPropagation();
			}
			break;
		case jQuery.sap.KeyCodes.ALT:
			this._altKey = true;
	}
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onkeyup = function(oEvent) {
	if (jQuery.sap.KeyCodes.ALT == oEvent.keyCode) {
		this._altKey = false;
	}
};

}; // end of sap/suite/ui/commons/UnifiedThingInspector.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.VerticalNavigationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.VerticalNavigationBar.
jQuery.sap.declare("sap.suite.ui.commons.VerticalNavigationBar");

jQuery.sap.require('sap.ui.ux3.NavigationBar'); // unlisted dependency retained



/**
 * Constructor for a new VerticalNavigationBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.NavigationBar#constructor sap.ui.ux3.NavigationBar}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.NavigationBar and allows you to display navigation items vertically. The navigation list can contain sap.ui.ux3.NavigationItem or sap.suite.ui.commons.CountingNavigationItem controls.
 * @extends sap.ui.ux3.NavigationBar
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.VerticalNavigationBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.ux3.NavigationBar.extend("sap.suite.ui.commons.VerticalNavigationBar", { metadata : {

	library : "sap.suite.ui.commons"
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.VerticalNavigationBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.VerticalNavigationBar.extend
 * @function
 */


// Start of sap/suite/ui/commons/VerticalNavigationBar.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.VerticalNavigationBar.prototype.init = function(){
//   // do something for initialization...
//};

sap.suite.ui.commons.VerticalNavigationBar.prototype._handleActivation = function(oEvent) {
    // add forwarding to parent since IE doesn't support 'pointer-events:none;'
    if (oEvent.target.tagName == "SPAN") {
        oEvent.target = oEvent.target.parentElement;
    }
    sap.ui.ux3.NavigationBar.prototype._handleActivation.call(this, oEvent);
};

sap.suite.ui.commons.VerticalNavigationBar.prototype.onAfterRendering = function() {
	sap.ui.ux3.NavigationBar.prototype.onAfterRendering.apply(this);
	
	if (!this._oBarItemsMap) {
		this._oBarItemsMap = {};
	}

	var that = this;
	
	jQuery(".sapSuiteTvNavBarItemLink").mousemove(function() {
        that._showTooltip(jQuery(this).attr("id"));
    }).mouseleave(function(oEvent) {
        that._hideTooltip(jQuery(this).attr("id"));
    });
};

sap.suite.ui.commons.VerticalNavigationBar.prototype.exit = function() {
	this._oBarItemsMap = null;
	sap.ui.ux3.NavigationBar.prototype.exit.apply(this);
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._handleScroll = function() {
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._showTooltip = function(sTargetId) {
    var oItem = this._oBarItemsMap[sTargetId];
    if (!oItem) {
    	oItem = sap.ui.getCore().byId(sTargetId);
    	
    	if (oItem) {
	    	this._oBarItemsMap[sTargetId] = oItem;
	    	
	        var oTooltip = new sap.ui.commons.RichTooltip({
	            text : oItem.getTooltip_AsString() || oItem.getText()
	        });
	
	        oTooltip.addStyleClass("sapSuiteTvNavBarItemTltp");

	        oTooltip._currentControl = oItem;
	        oItem.addDelegate(oTooltip);
	        oItem.setAggregation("tooltip", oTooltip, true);
    	}
    }
    
    if (oItem && !oItem.doOpen) {
    	oItem.doOpen = true;
        oItem.openTimer = setTimeout(function() {
                oItem.getTooltip().openPopup(oItem);
                
                oItem.closeTimer = setTimeout(function() {
                    oItem.getTooltip().closePopup();
                    oItem.doOpen = false;
                }, 10000);
        }, 2000);
    }
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._hideTooltip = function(sTargetId) {
    var oItem = this._oBarItemsMap[sTargetId];
    if (oItem) {
    	oItem.doOpen = false;
    	clearTimeout(oItem.openTimer);
    	clearTimeout(oItem.closeTimer);
        oItem.getTooltip().closePopup();
    }
};
}; // end of sap/suite/ui/commons/VerticalNavigationBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ViewRepeater') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ViewRepeater.
jQuery.sap.declare("sap.suite.ui.commons.ViewRepeater");

jQuery.sap.require('sap.ui.commons.RowRepeater'); // unlisted dependency retained



/**
 * Constructor for a new ViewRepeater.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getItemMinWidth itemMinWidth} : int</li>
 * <li>{@link #getResponsive responsive} : boolean (default: false)</li>
 * <li>{@link #getDefaultViewIndex defaultViewIndex} : int (default: 0)</li>
 * <li>{@link #getShowSearchField showSearchField} : boolean (default: true)</li>
 * <li>{@link #getShowViews showViews} : boolean (default: true)</li>
 * <li>{@link #getExternal external} : boolean (default: false)</li>
 * <li>{@link #getItemHeight itemHeight} : int</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getViews views} : sap.suite.ui.commons.RepeaterViewConfiguration[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getExternalRepresentation externalRepresentation} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ViewRepeater#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ViewRepeater#event:changeView changeView} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.RowRepeater#constructor sap.ui.commons.RowRepeater}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.commons.RowRepeater control providing an ability to change data representation by switching between a number of views. The data can be displayed not only in rows but also in tiles that are adjusted to fill the entire horizontal space in a row.
 * @extends sap.ui.commons.RowRepeater
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ViewRepeater
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.commons.RowRepeater.extend("sap.suite.ui.commons.ViewRepeater", { metadata : {

	library : "sap.suite.ui.commons",
	properties : {
		"itemMinWidth" : {type : "int", group : "Misc", defaultValue : null},
		"responsive" : {type : "boolean", group : "Misc", defaultValue : false},
		"defaultViewIndex" : {type : "int", group : "Misc", defaultValue : 0},
		"showSearchField" : {type : "boolean", group : "Misc", defaultValue : true},
		"showViews" : {type : "boolean", group : "Misc", defaultValue : true},
		"external" : {type : "boolean", group : "Misc", defaultValue : false},
		"itemHeight" : {type : "int", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'}
	},
	aggregations : {
		"views" : {type : "sap.suite.ui.commons.RepeaterViewConfiguration", multiple : true, singularName : "view"}
	},
	associations : {
		"externalRepresentation" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"search" : {}, 
		"changeView" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ViewRepeater with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ViewRepeater.extend
 * @function
 */

sap.suite.ui.commons.ViewRepeater.M_EVENTS = {'search':'search','changeView':'changeView'};


/**
 * Getter for property <code>itemMinWidth</code>.
 * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to true.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemMinWidth</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getItemMinWidth
 * @function
 */

/**
 * Setter for property <code>itemMinWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemMinWidth  new value for property <code>itemMinWidth</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setItemMinWidth
 * @function
 */


/**
 * Getter for property <code>responsive</code>.
 * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number of columns depends on the parent control's width. If you resize the control, the number of columns may change respectively so that the content tiles can fill the entire space of a row.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>responsive</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getResponsive
 * @function
 */

/**
 * Setter for property <code>responsive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bResponsive  new value for property <code>responsive</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setResponsive
 * @function
 */


/**
 * Getter for property <code>defaultViewIndex</code>.
 * The index of the default view starting from 0. The view is selected on the initial rendering of the control. If the index is greater than the total quantity of the views, the last view is selected.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>defaultViewIndex</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getDefaultViewIndex
 * @function
 */

/**
 * Setter for property <code>defaultViewIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iDefaultViewIndex  new value for property <code>defaultViewIndex</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setDefaultViewIndex
 * @function
 */


/**
 * Getter for property <code>showSearchField</code>.
 * Indicates if the search field panel is shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSearchField</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getShowSearchField
 * @function
 */

/**
 * Setter for property <code>showSearchField</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSearchField  new value for property <code>showSearchField</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setShowSearchField
 * @function
 */


/**
 * Getter for property <code>showViews</code>.
 * Indicates if the view selector panel is shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showViews</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getShowViews
 * @function
 */

/**
 * Setter for property <code>showViews</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowViews  new value for property <code>showViews</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setShowViews
 * @function
 */


/**
 * Getter for property <code>external</code>.
 * Indicates if the external representation of the current view is rendered.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>external</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getExternal
 * @function
 */

/**
 * Setter for property <code>external</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExternal  new value for property <code>external</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setExternal
 * @function
 */


/**
 * Getter for property <code>itemHeight</code>.
 * The height of the tile in the current view in pixels. Only applicable if the responsive property is set to true. This value is used for calculating the number of tile rows.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemHeight</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getItemHeight
 * @function
 */

/**
 * Setter for property <code>itemHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemHeight  new value for property <code>itemHeight</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setItemHeight
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the control. Only applicable if the responsive property is set to true.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>views</code>.<br/>
 * The list of views for the data representation.
 * 
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration[]}
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getViews
 * @function
 */


/**
 * Inserts a view into the aggregation named <code>views</code>.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *          oView the view to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the view should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the view is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#insertView
 * @function
 */

/**
 * Adds some view <code>oView</code> 
 * to the aggregation named <code>views</code>.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *            oView the view to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#addView
 * @function
 */

/**
 * Removes an view from the aggregation named <code>views</code>.
 *
 * @param {int | string | sap.suite.ui.commons.RepeaterViewConfiguration} vView the view to remove or its index or id
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} the removed view or null
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#removeView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>views</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#removeAllViews
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.RepeaterViewConfiguration</code> in the aggregation named <code>views</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *            oView the view whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#indexOfView
 * @function
 */
	

/**
 * Destroys all the views in the aggregation 
 * named <code>views</code>.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#destroyViews
 * @function
 */


/**
 * The control to be rendered instead of the repeater's own content.
 *
 * @return {string} Id of the element which is the current target of the <code>externalRepresentation</code> association, or null
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getExternalRepresentation
 * @function
 */

/**
 * The control to be rendered instead of the repeater's own content.
 *
 * @param {string | sap.ui.core.Control} vExternalRepresentation 
 *    Id of an element which becomes the new target of this <code>externalRepresentation</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setExternalRepresentation
 * @function
 */


	
/**
 * This event is fired when the user performs a search.
 *
 * @name sap.suite.ui.commons.ViewRepeater#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.query The search query.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself. 
 *  
 * This event is fired when the user performs a search.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ViewRepeater#fireSearch
 * @function
 */


/**
 * This event is fired when a user switches between views.
 *
 * @name sap.suite.ui.commons.ViewRepeater#changeView
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.oldViewIndex Contains an index of the previous view in the Views aggregation.
 * @param {int} oControlEvent.getParameters.newViewIndex Contains an index of the new view in the Views aggregation.
 * @param {string} oControlEvent.getParameters.filterId Contains an ID of the filter in the Filters aggregation.
 * @param {string} oControlEvent.getParameters.sorterId Contains an ID of the sorter in the Sorters aggregation.
 * @param {int} oControlEvent.getParameters.page Contains a page number.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'changeView' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself. 
 *  
 * This event is fired when a user switches between views.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#attachChangeView
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'changeView' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#detachChangeView
 * @function
 */

/**
 * Fire event changeView to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldViewIndex' of type <code>int</code> Contains an index of the previous view in the Views aggregation.</li>
 * <li>'newViewIndex' of type <code>int</code> Contains an index of the new view in the Views aggregation.</li>
 * <li>'filterId' of type <code>string</code> Contains an ID of the filter in the Filters aggregation.</li>
 * <li>'sorterId' of type <code>string</code> Contains an ID of the sorter in the Sorters aggregation.</li>
 * <li>'page' of type <code>int</code> Contains a page number.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ViewRepeater#fireChangeView
 * @function
 */


// Start of sap/suite/ui/commons/ViewRepeater.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.ViewRepeater.prototype.init = function() {
    var that = this;

    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    this.addStyleClass("suiteUiVr");
    
    sap.ui.commons.RowRepeater.prototype.init.call(this);

    this._oSegBtn = new sap.ui.commons.SegmentedButton({
        id: this.getId()+"-segBtn"
    });
    this._repopulateViewSelector();

    this._oSearchField = new sap.ui.commons.SearchField({
        id: this.getId()+"-searchFld",
        enableFilterMode: true,
        enableListSuggest: false,
        search: function(oEvent) {
            that.fireSearch({query: oEvent.getParameter("query")});
        }
    });
    
    this.attachFilter(function(oEvent) {
    	this._currentFilterId = oEvent.getParameter("filterId");
    });
    
    this.attachSort(function(oEvent) {
    	this._currentSorterId = oEvent.getParameter("sorterId");
    });
    
};

sap.suite.ui.commons.ViewRepeater.prototype.setDefaultViewIndex = function(value) {
    this.setProperty("defaultViewIndex", value);
    this._selectDefaultView();
    return this;
};

sap.suite.ui.commons.ViewRepeater.prototype._selectDefaultView = function() {
    var iView = this.getDefaultViewIndex();
    if (iView === this._currentViewIndex) return;
    var aViews = this.getViews() || [];
    if ( aViews.length > 0) {
        if (iView >= aViews.length) iView = aViews.length-1;
        this.selectView(iView);
        var sDefViewBtnId = this.getId()+"-"+aViews[iView].getId()+"-triggerBtn";
        this._oSegBtn.setSelectedButton(sDefViewBtnId);
    }
};

sap.suite.ui.commons.ViewRepeater.prototype._repopulateViewSelector = function() {
    var that = this;

    var result = that._oSegBtn.removeAllAggregation("buttons", true);
    jQuery.each(result, function(i, oButton) {
        oButton.destroy();
    });

    var aViews = this.getViews() || [];
    for (var i=0; i<aViews.length; i++) {
        var oView = aViews[i];

        if (oView.getExternal() === true) {
            var oExtRepr = oView.getExternalRepresentation();
            if (!oExtRepr.getModel()) {
                oExtRepr.setModel(this.getModel());
            }
        }

        var oViewButton = new sap.ui.commons.Button({
            id: this.getId() + "-" + oView.getId() + "-triggerBtn",
            text: oView.getTitle() || ( oView.getIcon() ? undefined : this._rb.getText("VIEWREPEATER_TAB_DEFAULT_NAME", [(i+1)]) ),
            icon: oView.getIcon(),
            iconHovered: oView.getIconHovered(),
            iconSelected: oView.getIconSelected(),
            tooltip: oView.getTooltip(),
            lite: true
        });
        // this would overwrite button press
        that._oSegBtn.addButton(oViewButton);
        // restore needed button press

        //call selector passing view itself
        oViewButton.attachPress(oView, function(ev, oViewData) {
            that.selectView(oViewData);
            //rerendering is needed because in Chrome there is a bug in rendering of the last button
            that._oSegBtn.rerender();
        });

    }

    this._selectDefaultView();
};

sap.suite.ui.commons.ViewRepeater.prototype.setModel = function(oModel, sName) {
    sap.ui.base.ManagedObject.prototype.setModel.call(this, oModel, sName);
    this._repopulateViewSelector();
    return this;
};

sap.suite.ui.commons.ViewRepeater.prototype.addView = function(oRowRepeaterView) {
    this.addAggregation("views", oRowRepeaterView);
    this._repopulateViewSelector();
    
    return this;
};

sap.suite.ui.commons.ViewRepeater.prototype.removeAllViews = function() {
    var result = this.removeAllAggregation("views");
    this._repopulateViewSelector();
    return result;
};

sap.suite.ui.commons.ViewRepeater.prototype.insertView = function(oView, iIndex) {
	this.insertAggregation("views", oView, iIndex);
	this._repopulateViewSelector();
	
	return this;
};
    
sap.suite.ui.commons.ViewRepeater.prototype.removeView = function(oView) {
	var result = this.removeAggregation("views", oView);
	this._repopulateViewSelector();
	return result;
};
    
//TODO write correct jsdoc
//the method switch view to selected one
// vView can be the instance of RowRepeaterView or its index in the views aggregation
sap.suite.ui.commons.ViewRepeater.prototype.selectView = function(vView) {
    var oView, iViewIndex = 0;
    switch (typeof vView) {
        case "number": {
            oView = this.getViews()[vView];
            iViewIndex = vView;
            break;
        }
        case "object": {
        	var iViewsNumber = this.getViews().length;
        	
            for (var i = 0; i < iViewsNumber; i++) {
            	if (vView.getId() === this.getViews()[i].getId()) {
            		oView = vView;
            		iViewIndex = i;
            		break;
            	}
            }
        }
    }
    if (!oView) {
    	return;
    }

    //set Responsive
    var bResponsive = oView.getResponsive();
    if (typeof bResponsive == "boolean") {
        this.setResponsive(bResponsive);
    }
    //set Item Min Width
    var iItemMinWidth = oView.getItemMinWidth();
    if (typeof iItemMinWidth == "number" &&
        iItemMinWidth > 0 &&
        iItemMinWidth != this.setItemMinWidth()) {
        this.setItemMinWidth(iItemMinWidth);
    }
    
    var iItemHeight = oView.getItemHeight();
    if (iItemHeight != this.getItemHeight() && iItemHeight > 0) {
    	this.setItemHeight(iItemHeight);
    }
    
    //set Number Of Tiles
    if (oView.getNumberOfTiles() > 0 &&
    		oView.getNumberOfTiles() != this.setNumberOfRows()) {
    	this.setNumberOfRows(oView.getNumberOfTiles());
    	
    }
    
    //set External flag
    var bExternal = oView.getExternal();
    if (bExternal === true) {
        this.setExternal(true);
        this.setExternalRepresentation( oView.getExternalRepresentation() );
    } else {
        this.setExternal(false);
        this.setExternalRepresentation(null);
    }

    var iCurrentPage = this.getCurrentPage();

    //bind Template
    var sPath = oView.getPath();
    var oTemplate = oView.getTemplate();
    if (sPath && oTemplate) {
        this.bindRows(sPath, oTemplate);

        this._applyFilter(this._currentFilterId);
        this._applySorter(this._currentSorterId);
    }

    if (this._currentViewIndex || iViewIndex != this._currentViewIndex) {
    	this.fireChangeView({
    		newViewIndex: iViewIndex,
    		oldViewIndex: this._currentViewIndex,
    		filterId: this._currentFilterId,
    		sorterId: this._currentSorterId,
    		page: iCurrentPage
    	});
    }

    this._currentViewIndex = iViewIndex;

    this._oView = oView;
};

sap.suite.ui.commons.ViewRepeater.prototype._applyFilter = function(sFilterId, oListBinding) {
    if (sFilterId) {
        if (!oListBinding) {
        	oListBinding = this.getBinding("rows");
        }
        
    	var aFilters = this.getFilters();
    	var i = aFilters.length;
    	
	    for (var n = 0; n < i; n++) {
			if(aFilters[n].getId() === sFilterId) {
				var oFilter = aFilters[n];
				break;
			}
		}
		if (oFilter) {
			oListBinding.filter(oFilter.getFilters());
		}
    }	
};

sap.suite.ui.commons.ViewRepeater.prototype._applySorter = function(sSorterId, oListBinding) {
    if (sSorterId) {
        if (!oListBinding) {
        	oListBinding = this.getBinding("rows");
        }
        
    	var aSorters = this.getSorters();
    	var i = aSorters.length;
    	
	    for (var n = 0; n < i; n++) {
			if(aSorters[n].getId() === sSorterId) {
				var oSorter = aSorters[n];
				break;
			}
		}
		if (oSorter) {
			oListBinding.sort(oSorter.getSorter());
		}
    }	
};

sap.suite.ui.commons.ViewRepeater.prototype.onBeforeRendering = function() {
    if (this.getResponsive() && this.getShowMoreSteps() == 0) {
    	if (!this._bInit) {
	    	this.setNumberOfRows(0);
    	}
    } else if (this._oView && this._oView.getNumberOfTiles() > 0 &&
        		this._oView.getNumberOfTiles() != this.getNumberOfRows()
        		&& !this.getResponsive()) {
        	this.setNumberOfRows(this._oView.getNumberOfTiles());
    }
    this._bInit = false;
};

sap.suite.ui.commons.ViewRepeater.prototype._updateBodyPosition = function() {
	var iViewSwHeight = jQuery("#" + this.getId() + ">div.suiteUiVrViewSwHolder").outerHeight();
	var iPtbHeight = jQuery("#" + this.getId() + ">div.sapUiRrPtb").outerHeight();
	var iStbHeight = jQuery("#" + this.getId() + ">div.sapUiRrStb").outerHeight();
	var iFtrHeight = jQuery("#" + this.getId() + ">div.sapUiRrFtr").outerHeight();
	
	var oBody = jQuery.sap.byId(this.getId() + "-body");
	oBody.css("top", iViewSwHeight + iPtbHeight + iStbHeight + 3);
	oBody.css("bottom", iFtrHeight);
};

sap.suite.ui.commons.ViewRepeater.prototype.onAfterRendering = function() {
	this._computeWidths(true);

	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
	if (this.getResponsive()) {
		if (this.getShowMoreSteps() == 0) {
			jQuery("#" + this.getId() + ">div.sapUiRrFtr").hide();
		}
		
		jQuery.sap.delayedCall(100, this, function () {
			this._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId() + "-body"),  jQuery.proxy(this._handleResize, this));
			
			if (this.getShowMoreSteps() == 0) {
				this._updateBodyPosition();
			}
		});
	}
};

sap.suite.ui.commons.ViewRepeater.prototype._handleResize = function () {
    if(!this.getDomRef()){
        return;
    }

    this._computeWidths();
    
    if (this.getResponsive() && this.getShowMoreSteps() == 0) {
		var oBody = jQuery.sap.byId(this.getId() + "-body");
		var iBodyHeight = oBody.height();
		
		var iNumberOfTilesInRow = this._itemsPerRow;
		//+3px for the spaces between tiles
		var iNumberOfRows = Math.floor(iBodyHeight / (this.getItemHeight() + 3));
		
		var iNumberOfTiles = iNumberOfRows * iNumberOfTilesInRow;
		if (iNumberOfTiles != this.getNumberOfRows()) {
			this._bInit = true;
			this.setNumberOfRows(iNumberOfTiles);
		} else {
			jQuery("#" + this.getId() + ">div.sapUiRrFtr").show();
		}
    }
};

sap.suite.ui.commons.ViewRepeater.prototype._computeWidths = function (bInitial) {
    var oThis = this;       // UI5 object
    var $This = this.$();   // DOM object
    var iItemMinWidth = oThis.getItemMinWidth();

    var iNumberOfCols =
        (this.getResponsive()===true) ? Math.floor($This.width()/iItemMinWidth) : 1;
    var iPercentWidth = Math.floor(100/iNumberOfCols);

    // since one percent includes several pixels
    // rounding error may cause an overflow above the actual width of control
    if($This.width()*iPercentWidth/100 < iItemMinWidth){
        iNumberOfCols--;
        iPercentWidth = Math.floor(100/iNumberOfCols);
    }

    if (bInitial || oThis._height != $This.height() || oThis._itemsPerRow != iNumberOfCols) {
        jQuery("#"+this.getId()+" .sapUiRrBody").css("width", "100%");

        var iOrphanedPercents = 100-(iNumberOfCols*iPercentWidth);
        var w;

        jQuery("#"+this.getId()+" .sapUiRrBody li").each( function(index) {
            //distribute orphaned percents along the row
            w = iPercentWidth;
            if (index % iNumberOfCols < iOrphanedPercents) w++;
            jQuery(this).css("width", w+"%");
            jQuery(this).css("margin", "0");
        });

        oThis._height = $This.height();
        oThis._itemsPerRow = iNumberOfCols;
        oThis._percentWidth = iPercentWidth;
    }

};

sap.suite.ui.commons.ViewRepeater.prototype.startPagingAnimation = function() {
	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
	
    // local variables
    var oCore = sap.ui.getCore(),
        oRenderManager = oCore.getRenderManager(),
        sId = this.getId(),
        iPageFrom = this.iPreviousPage,
        iPageTo = this.getCurrentPage(),
        iNumberOfRows = this.getNumberOfRows(),
        iStartIndex = (iPageTo-1) * iNumberOfRows,
        aRows = this.getRows(),
        iCurrentVisibleRows = this._getRowCount()>iNumberOfRows*iPageTo ? iNumberOfRows : this._getRowCount()-iNumberOfRows*(iPageTo-1),
        iLastPage = Math.ceil( this._getRowCount()/iNumberOfRows ),
        n, i, w,
        oBinding = this.getBinding("rows");

    // DOM elements
    var oDomCurrentLI,
        oJQDomULFrom = jQuery(jQuery.sap.domById(sId+"-page_"+iPageFrom)),
        oDomBodyDIV = jQuery.sap.domById(sId+"-body"),
        oJQDomBodyDIV = jQuery(oDomBodyDIV);

    // fix the height on the body DIV to allow an animated height change
    oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

    // create UL for new page
    var sDirection;
    if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
        sDirection = (iPageTo<iPageFrom) ? "left" : "right";
    }else{
        sDirection = (iPageTo<iPageFrom) ? "right" : "left";
    }

    // load the required contexts
    if (oBinding) {
        // update the rows aggregation
        this._bSecondPage = !this._bSecondPage;
        this.updateRows(true);
        aRows = this.getRows();
        iStartIndex = (this._bSecondPage ? 1 : 0) * iNumberOfRows;
    }

    // create the rows where we navigate to in the DOM
    var sStyleString = "\"top:-" + oJQDomULFrom.outerHeight(true) + "px;" + sDirection + ":" + oJQDomULFrom.outerWidth(true) + "px;\"";
    jQuery("<ul id=\"" + sId + "-page_" + iPageTo + "\" class=\"sapUiRrPage\" style=" + sStyleString + "/>").appendTo(oDomBodyDIV);
    var oDomULTo = oDomBodyDIV.lastChild;
    var oJQDomULTo = jQuery(oDomULTo);
    var iOrphanedPercents = 100-(this._itemsPerRow*this._percentWidth);
    for( n=iStartIndex, i=0; n<iStartIndex+iCurrentVisibleRows; n++, i++ ) {
        //distribute orphaned percents along the row
        w = this._percentWidth;
        if (i % this._itemsPerRow < iOrphanedPercents) w++;
        jQuery("<li id=\"" + sId + "-row_" + n + "\" style=\"width:"+w+"%\" class=\"sapUiRrRow\"/>").appendTo(oDomULTo);
        oDomCurrentLI =  oDomULTo.lastChild;
        oRenderManager.render(aRows[n], oDomCurrentLI);
    }

    // animate the paging effect
    if(sDirection==="right") {
        oJQDomULFrom.animate({right:-oJQDomULFrom.outerWidth(true)},"slow");
        oJQDomULTo.animate({right:0},"slow");
    } else {
        oJQDomULFrom.animate({left:-oJQDomULFrom.outerWidth(true)},"slow");
        oJQDomULTo.animate({left:0},"slow");
    }

    // animate the height change if number of displayed rows changes
    oJQDomBodyDIV.animate({height:oJQDomULTo.outerHeight(true)},"slow",jQuery.proxy(this.endPagingAnimation,this));
};

sap.suite.ui.commons.ViewRepeater.prototype.endPagingAnimation = function() {
	sap.ui.commons.RowRepeater.prototype.endPagingAnimation.call(this);
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId() + "-body"),  jQuery.proxy(this._handleResize, this));
};

sap.suite.ui.commons.ViewRepeater.prototype.exit = function() {
	this._oSegBtn.destroy();
	this._oSearchField.destroy();
	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
};
}; // end of sap/suite/ui/commons/ViewRepeater.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ChartTile.
jQuery.sap.declare("sap.suite.ui.commons.ChartTile");




/**
 * Constructor for a new ChartTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUnit unit} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.suite.ui.commons.InfoTile#constructor sap.suite.ui.commons.InfoTile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is the implementation of the InfoTile to show a comparison or bullet chart.
 * @extends sap.suite.ui.commons.InfoTile
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.25. 
 * This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
 * @name sap.suite.ui.commons.ChartTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.suite.ui.commons.InfoTile.extend("sap.suite.ui.commons.ChartTile", { metadata : {

	deprecated : true,
	library : "sap.suite.ui.commons",
	properties : {
		"unit" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ChartTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ChartTile.extend
 * @function
 */


/**
 * Getter for property <code>unit</code>.
 * The percent sign, the currency symbol, or the unit of measure.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>unit</code>
 * @public
 * @name sap.suite.ui.commons.ChartTile#getUnit
 * @function
 */

/**
 * Setter for property <code>unit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.suite.ui.commons.ChartTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ChartTile#setUnit
 * @function
 */


// Start of sap/suite/ui/commons/ChartTile.js
/*!
 * @copyright@
 */


sap.suite.ui.commons.ChartTile.prototype.init = function() {
    sap.suite.ui.commons.InfoTile.prototype.init.apply(this);
 };

sap.suite.ui.commons.ChartTile.prototype.onAfterRendering = function() {
    this._addDescriptionMargin();
};

sap.suite.ui.commons.ChartTile.prototype.onBeforeRendering = function() {
    this._setContentProperty("size", this.getSize());
};

/**
 * Calculates and sets negative margin and padding of the description div element accordingly to the width of the unit of measure div element.
 *
 * @private
 */
sap.suite.ui.commons.ChartTile.prototype._addDescriptionMargin = function() {
    if (this.getDescription() && this.getUnit()) {
        var $Description = jQuery.sap.byId(this.getId() + "-description").hide();
        var iWidth = jQuery.sap.byId(this.getId() + "-unit").outerWidth() + 1;      // add 1 to eliminate rounding issue in IE
        $Description.css("margin-right", "-" + iWidth + "px").css("padding-right", iWidth + "px").show();
    }
};

sap.suite.ui.commons.ChartTile.prototype._setContentProperty = function(sProp, sValue) {
    var oCnt = this.getContent();
    if(oCnt) {
        oCnt.setProperty(sProp, sValue);
    }
};
}; // end of sap/suite/ui/commons/ChartTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThreePanelThingViewer.
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingViewer");

jQuery.sap.require('sap.ui.ux3.ThingViewer'); // unlisted dependency retained



/**
 * Constructor for a new ThreePanelThingViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowHeader showHeader} : boolean</li>
 * <li>{@link #getSidebarWidth sidebarWidth} : sap.ui.core.CSSSize (default: '244px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenuContent menuContent} : sap.ui.commons.Link[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.ThingViewer#constructor sap.ui.ux3.ThingViewer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.ThingViewer control. The first panel can display a thing icon, a title, the Action Menu button, up to two rows of text descriptions (the first is wrapped, the second is truncated), vertical navigation bar (sap.suite.ui.commons.VerticalNavigationBar), and an image aka key visual. The second panel displays the header area as a vertical panel containing ThingGroup objects. The third panel is a main content area designed to display ThingGroup objects.
 * @extends sap.ui.ux3.ThingViewer
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.ux3.ThingViewer.extend("sap.suite.ui.commons.ThreePanelThingViewer", { metadata : {

	publicMethods : [
		// methods
		"selectDefaultFacet"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"logo" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : null},
		"sidebarWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '244px'}
	},
	aggregations : {
		"menuContent" : {type : "sap.ui.commons.Link", multiple : true, singularName : "menuContent"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThreePanelThingViewer.extend
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setLogo
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Shows or hides a middle panel named Header that contains general information.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setShowHeader
 * @function
 */


/**
 * Getter for property <code>sidebarWidth</code>.
 * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default value is "244px".
 *
 * Default value is <code>244px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>sidebarWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getSidebarWidth
 * @function
 */

/**
 * Setter for property <code>sidebarWidth</code>.
 *
 * Default value is <code>244px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSidebarWidth  new value for property <code>sidebarWidth</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setSidebarWidth
 * @function
 */


/**
 * Getter for aggregation <code>menuContent</code>.<br/>
 * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as a popup when a user chooses a button in the top title section of the navigation panel.
 * 
 * @return {sap.ui.commons.Link[]}
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getMenuContent
 * @function
 */


/**
 * Inserts a menuContent into the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *          oMenuContent the menuContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the menuContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the menuContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the menuContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#insertMenuContent
 * @function
 */

/**
 * Adds some menuContent <code>oMenuContent</code> 
 * to the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#addMenuContent
 * @function
 */

/**
 * Removes an menuContent from the aggregation named <code>menuContent</code>.
 *
 * @param {int | string | sap.ui.commons.Link} vMenuContent the menuContent to remove or its index or id
 * @return {sap.ui.commons.Link} the removed menuContent or null
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#removeMenuContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>menuContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Link[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#removeAllMenuContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Link</code> in the aggregation named <code>menuContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#indexOfMenuContent
 * @function
 */
	

/**
 * Destroys all the menuContent in the aggregation 
 * named <code>menuContent</code>.
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#destroyMenuContent
 * @function
 */


/**
 * Marks the first facet(navigation item) as selected if no facets selected and fires facetSelected event.
 *
 * @name sap.suite.ui.commons.ThreePanelThingViewer#selectDefaultFacet
 * @function
 * @type sap.suite.ui.commons.ThreePanelThingViewer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/ThreePanelThingViewer.js

jQuery.sap.require('sap.ui.ux3.NavigationBar'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.ThingViewer'); // unlisted dependency retained

///*
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ThreePanelThingViewer.prototype.init = function() {
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    this._oNavBar = new sap.suite.ui.commons.VerticalNavigationBar();
    this.setAggregation("navBar",this._oNavBar);

    this._oNavBar.attachSelect(function(oControlEvent) {
        var item = oControlEvent.getParameters().item;
        if (that.fireFacetSelected({id: item.getId(), key: item.getKey(), item: item})) {
            that.setSelectedFacet(item);
        } else {
            oControlEvent.preventDefault();
        }
    });

    this._iSelectedMenuItem = 0;
    this._oMenuButton = new sap.ui.commons.Button({
        id: this.getId() + "-menu-button",
        tooltip: this._rb.getText("THREEPANELTHINGVIEWER_BUTTON_MENU_TOOLTIP"),
        lite: true,
        press: function() {
            that._toggleMenuPopup();
        }
    });
    this._oMenuButton.addStyleClass("sapSuiteTvTitleMb");
    this.fAnyEventHandlerProxy = jQuery.proxy(this.onAnyEvent, this);
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.exit = function() {
    this._oMenuButton.destroy();
    jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onAfterRendering = function() {
    this._bMenuOpened = false;
    this._updateMenuPopup();
    this._toggleHeaderContent();
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.selectDefaultFacet = function() {
    this._selectDefault();
    return this;
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._toggleMenuPopup = function() {
    jQuery.sap.byId(this.getId() + "-menu-popup").toggle();
    this._bMenuOpened = !this._bMenuOpened;

    if (this._bMenuOpened) {
        jQuery.sap.bindAnyEvent(this.fAnyEventHandlerProxy);
        this.getMenuContent()[0].focus();
        this._iSelectedMenuItem = 0;
    } else {
        jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._updateMenuPopup = function() {
    var iHeaderWidth = jQuery.sap.byId(this.getId() + "-header").width();
    var oMenuPopup = jQuery.sap.byId(this.getId() + "-menu-popup");
    var sStyle = sap.ui.getCore().getConfiguration().getRTL() ? "right":"left";
    var iSize = this.getMenuContent().length;

    oMenuPopup.css(sStyle, (iHeaderWidth - 22) + "px");
    oMenuPopup.children().each(function (index) {
        var $this = jQuery(this);
        $this.attr("tabindex", "-1");
        $this.attr("role", "menuitem");
        $this.attr("aria-posinset", index+1);
        $this.attr("aria-setsize", iSize);
    });
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderFacetContent = function() {
    var $content = jQuery.sap.byId(this.getId() + "-facetContent");
    if ($content.length > 0) {
        var oRm = sap.ui.getCore().createRenderManager();
        sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFacetContent(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
        this._resize = false;
        this._setTriggerValue();
        this._onresize();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderHeader = function() {
	var $content = jQuery.sap.byId(this.getId() + "-header");
	if ($content.length > 0) {
		var oRm = sap.ui.getCore().createRenderManager();
		sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeader(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
	}
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderHeaderContent = function() {
    var $content = jQuery.sap.byId(this.getId() + "-headerContent");
    if ($content.length > 0) {
        var oRm = sap.ui.getCore().createRenderManager();
        sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeaderContent(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._toggleHeaderContent = function() {
    var oContent = jQuery.sap.byId(this.getId() + "-headerContent");
    if (this.getShowHeader()) {
        oContent.show();
    } else {
        oContent.hide();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onAnyEvent = function(oEvent) {
    if (this._bMenuOpened && (oEvent.type == "mousedown" || oEvent.type == "focusin")) {
        var oSource = oEvent.target;
        var oDomRef = jQuery.sap.domById(this.getId() + "-menu-popup");

        if (!jQuery.sap.containsOrEquals(oDomRef, oSource) || oSource.tagName == "BODY") {
            this._toggleMenuPopup();
        }
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapescape = function() {
    if (this._bMenuOpened) {
        this._toggleMenuPopup();
        this._oMenuButton.focus();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapnext = function(oEvent) {
    if (this._bMenuOpened) {
        var aMenuContent = this.getMenuContent();
        this._iSelectedMenuItem++;

        if (this._iSelectedMenuItem >= aMenuContent.length) {
            this._iSelectedMenuItem = 0;
        }

        aMenuContent[this._iSelectedMenuItem].focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapprevious = function(oEvent) {
    if (this._bMenuOpened) {
        var aMenuContent = this.getMenuContent();
        this._iSelectedMenuItem--;

        if (this._iSelectedMenuItem < 0) {
            this._iSelectedMenuItem = aMenuContent.length - 1;
        }

        aMenuContent[this._iSelectedMenuItem].focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.setShowHeader = function(bShowHeader) {
    this.setProperty("showHeader", bShowHeader, true);
    this._toggleHeaderContent();
    return this;
};

}; // end of sap/suite/ui/commons/ThreePanelThingViewer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.Timeline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.Timeline.
jQuery.sap.declare("sap.suite.ui.commons.Timeline");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Timeline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getData data} : object</li>
 * <li>{@link #getSortOldestFirst sortOldestFirst} : boolean (default: false)</li>
 * <li>{@link #getAxisOrientation axisOrientation} : sap.suite.ui.commons.TimelineAxisOrientation (default: sap.suite.ui.commons.TimelineAxisOrientation.Vertical)</li>
 * <li>{@link #getAlignment alignment} : sap.suite.ui.commons.TimelineAlignment (default: sap.suite.ui.commons.TimelineAlignment.Right)</li>
 * <li>{@link #getShowIcons showIcons} : boolean (default: true)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getShowHeaderBar showHeaderBar} : boolean (default: true)</li>
 * <li>{@link #getGrowing growing} : boolean (default: true)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int (default: 5)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnableBackendFilter enableBackendFilter} : boolean (default: false)</li>
 * <li>{@link #getEnableAllInFilterItem enableAllInFilterItem} : boolean (default: true)</li>
 * <li>{@link #getEnableSocial enableSocial} : boolean (default: false)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: true)</li>
 * <li>{@link #getEnableScroll enableScroll} : boolean (default: true)</li>
 * <li>{@link #getForceGrowing forceGrowing} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.suite.ui.commons.TimelineItem[]</li>
 * <li>{@link #getFilterList filterList} : sap.suite.ui.commons.TimelineFilterListItem[]</li>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.m.StandardListItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.Timeline#event:filterSelectionChange filterSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.Timeline#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.Timeline#event:addPost addPost} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.Timeline#event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.Timeline#event:suggestionItemSelected suggestionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.Timeline#event:grow grow} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Timeline Control for sFin.
 * @extends sap.ui.core.Control
 * @version 1.26.6
 *
 * @constructor
 * @public
 * @name sap.suite.ui.commons.Timeline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.Timeline", { metadata : {

	publicMethods : [
		// methods
		"getCurrentFilter", "setCurrentFilter"
	],
	library : "sap.suite.ui.commons",
	properties : {
		"data" : {type : "object", group : "Misc", defaultValue : null},
		"sortOldestFirst" : {type : "boolean", group : "Misc", defaultValue : false},
		"axisOrientation" : {type : "sap.suite.ui.commons.TimelineAxisOrientation", group : "Misc", defaultValue : sap.suite.ui.commons.TimelineAxisOrientation.Vertical},
		"alignment" : {type : "sap.suite.ui.commons.TimelineAlignment", group : "Misc", defaultValue : sap.suite.ui.commons.TimelineAlignment.Right},
		"showIcons" : {type : "boolean", group : "Misc", defaultValue : true},
		"noDataText" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"enableBusyIndicator" : {type : "boolean", group : "Misc", defaultValue : true},
		"showHeaderBar" : {type : "boolean", group : "Misc", defaultValue : true},
		"growing" : {type : "boolean", group : "Misc", defaultValue : true},
		"growingThreshold" : {type : "int", group : "Misc", defaultValue : 5},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enableBackendFilter" : {type : "boolean", group : "", defaultValue : false},
		"enableAllInFilterItem" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enableSocial" : {type : "boolean", group : "Misc", defaultValue : false},
		"showSuggestion" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enableScroll" : {type : "boolean", group : "Misc", defaultValue : true},
		"forceGrowing" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"content" : {type : "sap.suite.ui.commons.TimelineItem", multiple : true, singularName : "content"}, 
		"filterList" : {type : "sap.suite.ui.commons.TimelineFilterListItem", multiple : true, singularName : "filterList"}, 
		"suggestionItems" : {type : "sap.m.StandardListItem", multiple : true, singularName : "suggestionItem"}
	},
	events : {
		"filterSelectionChange" : {}, 
		"select" : {}, 
		"addPost" : {}, 
		"suggest" : {}, 
		"suggestionItemSelected" : {}, 
		"grow" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.Timeline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.Timeline.extend
 * @function
 */

sap.suite.ui.commons.Timeline.M_EVENTS = {'filterSelectionChange':'filterSelectionChange','select':'select','addPost':'addPost','suggest':'suggest','suggestionItemSelected':'suggestionItemSelected','grow':'grow'};


/**
 * Getter for property <code>data</code>.
 * Data for Timeline Control..
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>data</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getData
 * @function
 */

/**
 * Setter for property <code>data</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oData  new value for property <code>data</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setData
 * @function
 */


/**
 * Getter for property <code>sortOldestFirst</code>.
 * Whether the oldest item will be displayed first.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>sortOldestFirst</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getSortOldestFirst
 * @function
 */

/**
 * Setter for property <code>sortOldestFirst</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSortOldestFirst  new value for property <code>sortOldestFirst</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setSortOldestFirst
 * @function
 */


/**
 * Getter for property <code>axisOrientation</code>.
 * Timeline axis orientation.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.suite.ui.commons.TimelineAxisOrientation} the value of property <code>axisOrientation</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getAxisOrientation
 * @function
 */

/**
 * Setter for property <code>axisOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAxisOrientation} oAxisOrientation  new value for property <code>axisOrientation</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setAxisOrientation
 * @function
 */


/**
 * Getter for property <code>alignment</code>.
 * Timeline item alignment.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.suite.ui.commons.TimelineAlignment} the value of property <code>alignment</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getAlignment
 * @function
 */

/**
 * Setter for property <code>alignment</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAlignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setAlignment
 * @function
 */


/**
 * Getter for property <code>showIcons</code>.
 * Show icon on each Timeline item.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showIcons</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getShowIcons
 * @function
 */

/**
 * Setter for property <code>showIcons</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowIcons  new value for property <code>showIcons</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setShowIcons
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setNoDataText
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Sets the width of the Timeline.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setWidth
 * @function
 */


/**
 * Getter for property <code>enableBusyIndicator</code>.
 * When this property is set to "true", Timeline will display a busy indicator when data is being loaded.This BusyIndicator blocks the interaction with the items until data loading is finished.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableBusyIndicator</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getEnableBusyIndicator
 * @function
 */

/**
 * Setter for property <code>enableBusyIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableBusyIndicator  new value for property <code>enableBusyIndicator</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setEnableBusyIndicator
 * @function
 */


/**
 * Getter for property <code>showHeaderBar</code>.
 * Show header tool bar
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeaderBar</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getShowHeaderBar
 * @function
 */

/**
 * Setter for property <code>showHeaderBar</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeaderBar  new value for property <code>showHeaderBar</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setShowHeaderBar
 * @function
 */


/**
 * Getter for property <code>growing</code>.
 * Sets the growing(paging) feature of control. This feature only works with model binding for aggregation "content".
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>growing</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getGrowing
 * @function
 */

/**
 * Setter for property <code>growing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bGrowing  new value for property <code>growing</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setGrowing
 * @function
 */


/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items requested from the server. To activate this you should set "growing" property to "true".
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getGrowingThreshold
 * @function
 */

/**
 * Setter for property <code>growingThreshold</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iGrowingThreshold  new value for property <code>growingThreshold</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setGrowingThreshold
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set Timeline control visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setVisible
 * @function
 */


/**
 * Getter for property <code>enableBackendFilter</code>.
 * This flag enables to get data from backend instead of deriving filter values from front-end values(displayed list).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableBackendFilter</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getEnableBackendFilter
 * @function
 */

/**
 * Setter for property <code>enableBackendFilter</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableBackendFilter  new value for property <code>enableBackendFilter</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setEnableBackendFilter
 * @function
 */


/**
 * Getter for property <code>enableAllInFilterItem</code>.
 * This flag enables to add 'All' in the begining of filter list
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableAllInFilterItem</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getEnableAllInFilterItem
 * @function
 */

/**
 * Setter for property <code>enableAllInFilterItem</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableAllInFilterItem  new value for property <code>enableAllInFilterItem</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setEnableAllInFilterItem
 * @function
 */


/**
 * Getter for property <code>enableSocial</code>.
 * enable Jam Integration
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableSocial</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getEnableSocial
 * @function
 */

/**
 * Setter for property <code>enableSocial</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableSocial  new value for property <code>enableSocial</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setEnableSocial
 * @function
 */


/**
 * Getter for property <code>showSuggestion</code>.
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSuggestion</code>
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#getShowSuggestion
 * @function
 */

/**
 * Setter for property <code>showSuggestion</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSuggestion  new value for property <code>showSuggestion</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#setShowSuggestion
 * @function
 */


/**
 * Getter for property <code>enableScroll</code>.
 * Enable scroll bar display
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScroll</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getEnableScroll
 * @function
 */

/**
 * Setter for property <code>enableScroll</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScroll  new value for property <code>enableScroll</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setEnableScroll
 * @function
 */


/**
 * Getter for property <code>forceGrowing</code>.
 * If set to true, the "More" button will always show.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>forceGrowing</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getForceGrowing
 * @function
 */

/**
 * Setter for property <code>forceGrowing</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bForceGrowing  new value for property <code>forceGrowing</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setForceGrowing
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * List of Timeline Items.
 * 
 * @return {sap.suite.ui.commons.TimelineItem[]}
 * @public
 * @name sap.suite.ui.commons.Timeline#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.suite.ui.commons.TimelineItem}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.suite.ui.commons.TimelineItem}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.suite.ui.commons.TimelineItem} vContent the content to remove or its index or id
 * @return {sap.suite.ui.commons.TimelineItem} the removed content or null
 * @public
 * @name sap.suite.ui.commons.Timeline#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.TimelineItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.Timeline#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.TimelineItem</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.TimelineItem}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.Timeline#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>filterList</code>.<br/>
 * sap.suite.ui.commons/TimelineFilterListItem
 * 
 * @return {sap.suite.ui.commons.TimelineFilterListItem[]}
 * @public
 * @name sap.suite.ui.commons.Timeline#getFilterList
 * @function
 */


/**
 * Inserts a filterList into the aggregation named <code>filterList</code>.
 *
 * @param {sap.suite.ui.commons.TimelineFilterListItem}
 *          oFilterList the filterList to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filterList should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filterList is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filterList is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#insertFilterList
 * @function
 */

/**
 * Adds some filterList <code>oFilterList</code> 
 * to the aggregation named <code>filterList</code>.
 *
 * @param {sap.suite.ui.commons.TimelineFilterListItem}
 *            oFilterList the filterList to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#addFilterList
 * @function
 */

/**
 * Removes an filterList from the aggregation named <code>filterList</code>.
 *
 * @param {int | string | sap.suite.ui.commons.TimelineFilterListItem} vFilterList the filterList to remove or its index or id
 * @return {sap.suite.ui.commons.TimelineFilterListItem} the removed filterList or null
 * @public
 * @name sap.suite.ui.commons.Timeline#removeFilterList
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>filterList</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.TimelineFilterListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.Timeline#removeAllFilterList
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.TimelineFilterListItem</code> in the aggregation named <code>filterList</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.TimelineFilterListItem}
 *            oFilterList the filterList whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.Timeline#indexOfFilterList
 * @function
 */
	

/**
 * Destroys all the filterList in the aggregation 
 * named <code>filterList</code>.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#destroyFilterList
 * @function
 */


/**
 * Getter for aggregation <code>suggestionItems</code>.<br/>
 * Items for suggestions
 * 
 * @return {sap.m.StandardListItem[]}
 * @public
 * @name sap.suite.ui.commons.Timeline#getSuggestionItems
 * @function
 */


/**
 * Inserts a suggestionItem into the aggregation named <code>suggestionItems</code>.
 *
 * @param {sap.m.StandardListItem}
 *          oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the suggestionItem is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#insertSuggestionItem
 * @function
 */

/**
 * Adds some suggestionItem <code>oSuggestionItem</code> 
 * to the aggregation named <code>suggestionItems</code>.
 *
 * @param {sap.m.StandardListItem}
 *            oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#addSuggestionItem
 * @function
 */

/**
 * Removes an suggestionItem from the aggregation named <code>suggestionItems</code>.
 *
 * @param {int | string | sap.m.StandardListItem} vSuggestionItem the suggestionItem to remove or its index or id
 * @return {sap.m.StandardListItem} the removed suggestionItem or null
 * @public
 * @name sap.suite.ui.commons.Timeline#removeSuggestionItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>suggestionItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.StandardListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.Timeline#removeAllSuggestionItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.StandardListItem</code> in the aggregation named <code>suggestionItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.StandardListItem}
 *            oSuggestionItem the suggestionItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.Timeline#indexOfSuggestionItem
 * @function
 */
	

/**
 * Destroys all the suggestionItems in the aggregation 
 * named <code>suggestionItems</code>.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#destroySuggestionItems
 * @function
 */


/**
 * This event is getting triggered after selecting an item from filter list.
 *
 * @name sap.suite.ui.commons.Timeline#filterSelectionChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.suite.ui.commons.TimelineFilterListItem} oControlEvent.getParameters.selectedItem filterClose event returns selected key value from filterList
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'filterSelectionChange' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * This event is getting triggered after selecting an item from filter list.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#attachFilterSelectionChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'filterSelectionChange' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#detachFilterSelectionChange
 * @function
 */

/**
 * Fire event filterSelectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.suite.ui.commons.TimelineFilterListItem</code> filterClose event returns selected key value from filterList</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.Timeline#fireFilterSelectionChange
 * @function
 */


/**
 * Select Timeline Item
 *
 * @name sap.suite.ui.commons.Timeline#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.suite.ui.commons.TimelineItem} oControlEvent.getParameters.selectedItem Selected TimelineItem
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * Select Timeline Item
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.suite.ui.commons.TimelineItem</code> Selected TimelineItem</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.Timeline#fireSelect
 * @function
 */


/**
 * Event fire when user add a new post
 *
 * @name sap.suite.ui.commons.Timeline#addPost
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value post message
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addPost' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * Event fire when user add a new post
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#attachAddPost
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addPost' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#detachAddPost
 * @function
 */

/**
 * Fire event addPost to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> post message</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.Timeline#fireAddPost
 * @function
 */


/**
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 *
 * @name sap.suite.ui.commons.Timeline#suggest
 * @event
 * @since 1.26.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.suggestValue The current value which has been typed in the input.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#attachSuggest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#detachSuggest
 * @function
 */

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'suggestValue' of type <code>string</code> The current value which has been typed in the input.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#fireSuggest
 * @function
 */


/**
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 *
 * @name sap.suite.ui.commons.Timeline#suggestionItemSelected
 * @event
 * @since 1.26.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem This is the item selected in the suggestion popup.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggestionItemSelected' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#attachSuggestionItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggestionItemSelected' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#detachSuggestionItemSelected
 * @function
 */

/**
 * Fire event suggestionItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> This is the item selected in the suggestion popup.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @since 1.26.1
 * @name sap.suite.ui.commons.Timeline#fireSuggestionItemSelected
 * @function
 */


/**
 * this event is fired when "More" button is clicked.
 *
 * @name sap.suite.ui.commons.Timeline#grow
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'grow' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself. 
 *  
 * this event is fired when "More" button is clicked.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.Timeline</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#attachGrow
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'grow' event of this <code>sap.suite.ui.commons.Timeline</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#detachGrow
 * @function
 */

/**
 * Fire event grow to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.Timeline#fireGrow
 * @function
 */


/**
 * Get the current selected filter key
 *
 * @name sap.suite.ui.commons.Timeline#getCurrentFilter
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Set the current selected filter key
 *
 * @name sap.suite.ui.commons.Timeline#setCurrentFilter
 * @function
 * @param {string} sSelectedItemKey
 *         Returns the TinelineFilterListItem
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/suite/ui/commons/Timeline.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained


sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME = "sapsuiteuicommonsTimelineInternalModel";

sap.suite.ui.commons.Timeline.prototype.init = function() {
	this.data("sap-ui-fastnavgroup", "true", true); // Define group for F6 handling
	this._previousTarget = null;
	this._previousTabPreviousTarget = null;
	this._filterTarget = null;
	this._addTarget = null;
	this._shell = null;
	this._aRows = null;
	this._aDomRefs = null;
	this._sapTabbable = null;
	this._moreButtonFound = false;
	this._pageSize = 10;
	this._addButtonFound = false;
	this._dummy = false;
	this._tabprevious = false;
	this._tabnext = false;
	this._addTarget = null;
	this._filterTarget = null;
	this._moreTarget = null;
	this._saveTarget = null;
	this._previousShellTarget = null;
	sap.m.DisplayListItem.extend("sap.suite.ui.commons.DisplayListItemWithKey", {
		metadata : {
			properties : {
				"key" : {
					type : "string",
					defaultValue : ""
				},
			}
		},
		renderer : 'sap.m.DisplayListItemRenderer'
	});
	var that = this;
	// create an internal model.
	this._prevTargetId = "";
	this._internalModel = new sap.ui.model.json.JSONModel();
	this._finishLoading = false;
	this.setModel(this._internalModel, sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME);
	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	this.resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
	this._emptyList = new sap.m.List();
	this._emptyList.setNoDataText(this.resBundle.getText('TIMELINE_NO_DATA'));
	this._filterIcon = new sap.m.Button(this.getId() + "-filter", {
		type : sap.m.ButtonType.Transparent,
		icon : "sap-icon://filter",
		tooltip : this.resBundle.getText("TIMELINE_FILTER_BY"),
		press : function(oEvent) {
			that._openFilterDialog();
		}
	});
	this._addIcon = new sap.m.Button(this.getId() + "-add", {
    	type:sap.m.ButtonType.Transparent,
    	icon:"sap-icon://add",
    	tooltip : this.resBundle.getText("TIMELINE_ADD"),
    	press : function(oEvent) {			
			that._openAddDialog();
		}
    });
	var oToolbarSpacer = new sap.m.ToolbarSpacer();

	this._headerBar = new sap.m.Toolbar({
		id : this.getId() + "-filterToolBar",
		content : [oToolbarSpacer, this._filterIcon]
	});

	this._filterInfoText = new sap.m.Text({
		maxLines : 1,
		width : "100%"
	});
	this._headerInfoBar = new sap.m.Toolbar({
		id : this.getId() + "-filterInfoBar",
		content : [this._filterInfoText],
		design : sap.m.ToolbarDesign.Info,
		visible : false
	});

	this._filterChange = false;
	this._contentChange = true;
	this._filterDialog = new sap.m.ResponsivePopover(this.getId() + "-popover_filter", {
		title : this.resBundle.getText("TIMELINE_FILTER_BY"),
		placement : sap.m.PlacementType.Auto,
		contentHeight : "15rem",
		contentWidth : "15rem"
	});

	var oDisplayListItemWithKey = new sap.suite.ui.commons.DisplayListItemWithKey({  
		key : "{key}",
		label : "{text}"
	});

	this._filterList = new sap.m.List(this.getId() + "-filterlist", {
		mode : sap.m.ListMode.SingleSelectMaster,
		items : {
			path : "/items",
			template : oDisplayListItemWithKey
		},
		selectionChange : function(oEvent) {

		var oFilterText = that._filterList.getSelectedItem().getLabel();
		that._setFilterInfoText(oFilterText);
		if (that._filterList.getSelectedItem() && !that.getEnableBackendFilter()) {
				that._filterChange = true;
				that._filterText = oFilterText;
				that._resetDisplayItems(oFilterText);
			}
			that.fireFilterSelectionChange({selectedItem : that._filterList.getSelectedItem()}); // jul/17/2014
			that._currentFilterKey = that._filterList.getSelectedItem().getKey();
			that._filterDialog.close();
		}
	});

	this._filterText = this.resBundle.getText("TIMELINE_ALL");
	this._growing = false;
	if (this.getGrowing()) {
		this._growDisplayCount = this.getGrowingThreshold();  //max current display item count
		this._iItemCount = this.getGrowingThreshold();
		this._getMoreButton = new sap.m.Button(this.getId() + "-getmore", {
			text : this.resBundle.getText("TIMELINE_MORE"),
			width : "100%",
			press : function() {
				// fire the event
				that.fireGrow();
				that._iItemCount += that.getGrowingThreshold();
				that._growDisplayCount += that.getGrowingThreshold();
				if (that.oItemNavigation) {
					that.removeDelegate(that.oItemNavigation);
					that.oItemNavigation.destroy();
				}
				that._startItemNavigation();
				if (that._iItemCount > that.getMaxItemsCount()) {
					that._iItemCount = that.getMaxItemsCount();
				}
				var oBindingInfo = that.getBindingInfo("content");
				if (that._growing) {
					oBindingInfo.startIndex = 0;
					oBindingInfo.length = that._iItemCount;
					that.getBinding("content").getContexts(0, that._iItemCount);
					//that.updateAggregation("content");
				} else {
					that.rerender();
				}

			}
		});
	}
	
	// scrolling stuff
//	jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
//	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
//		horizontal : false,
//		vertical : true,
//		zynga : false,
//		preventDefault : false,
//		nonTouchScrolling : "scrollbar"
//	});
//	this._scHeight = 0; //scroller container height
  this._scHeight = 400; //scroller container default height 400px
	this._height = 0;
	this._aFilterList = [];

// resize handler
/*	this.sResizeListenerId = null;
	if (jQuery.device.is.desktop) {
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performScrollChanges, this));
	} else {
		sap.ui.Device.orientation.attachHandler(this._performScrollChanges, this);
		sap.ui.Device.resize.attachHandler(this._performScrollChanges, this);
	}*/
}; // init


sap.suite.ui.commons.Timeline.prototype._createAddDialog = function(){
// add dialog
	var that = this;
	this._addDialog = new sap.m.Popover(this.getId() + "-popover_add", {
		title: this.resBundle.getText("TIMELINE_ADD_POST"),   
		placement: sap.m.PlacementType.Vertical,
		footer:  new sap.m.Bar({
         contentMiddle : [
				new sap.m.Button({
					text: this.resBundle.getText("TIMELINE_OK"),
				    icon: "sap-icon://ok",
				    press: function () {
				      that._addDialog.close();
				      that._addPost();
				     
				    }
				  }),
				  new sap.m.Button({
				      text: this.resBundle.getText("TIMELINE_FILTER_CANCEL"),
				      icon: "sap-icon://cancel",
				      press: function () {
				        that._addDialog.close();
				       
				      }
				    })
               ]
       }),
       contentHeight : "15rem",
	   contentWidth  : "15rem"
	});
    
   	this._addInput = new sap.m.TextArea({
		height: "14rem",
		width: "100%",
		liveChange: function (oEvent) {
			that._liveChange(oEvent);
		}

	}); 
};

sap.suite.ui.commons.Timeline.prototype._createSuggestionPopup = function(oInput) {
	var that = this;
	this._suggestionPopup = new sap.m.Popover(oInput.getId() + "-suggestion_popup", {
				showHeader : false,
				placement : sap.m.PlacementType.Bottom,
				contentWidth: "15rem",
				initialFocus : oInput
			}).attachAfterClose(function() {

			});
	this._overwritePopover(this._suggestionPopup, oInput);		
	this._suggestList = new sap.m.List(this.getId() + "-suggestlist", {
		mode : sap.m.ListMode.SingleSelectMaster,

		selectionChange : function(oEvent) {
			var oItem = oEvent.getSource().getSelectedItem();
			that._suggestionPopup.close();
			var strInput = that._addInput.getValue();
			var insertVal = '';
			var desc = oItem.getDescription();
			if (desc.match(/\S+@\S+\.\S+/)) {  // if its an email address, get the first part of it
				insertVal =  "@" + desc.split('@')[0];
			} else {
				insertVal = "@" + desc;
			}
			
			var newVal = that._getNewString(strInput, that._inputDiff, insertVal);
			that._addInput.setValue(newVal);
			that._oldAddInput = newVal;
			that.fireSuggestionItemSelected({
					//selectedItem: new sap.ui.core.Item({"text": oItem.getLabel(), "key": oItem.getValue()})
					selectedItem: oItem
			});
		}
	});	
	this._suggestionPopup.addContent(this._suggestList);	
};

sap.suite.ui.commons.Timeline.prototype._overwritePopover = function (oPopover, oInput) {
		// overwrite the internal properties to not to show the arrow in popover.
		oPopover._marginTop = 0;
		oPopover._marginLeft = 0;
		oPopover._marginRight = 0;
		oPopover._marginBottom = 0;
		oPopover._arrowOffset = 0;
		oPopover._offsets = [ "0 0", "0 0", "0 0", "0 0" ];
		oPopover._myPositions = [ "begin bottom", "begin center", "begin top", "end center" ];
		oPopover._atPositions = [ "begin top", "end center", "begin bottom", "begin center" ];

		oPopover.open = function() {
			this.openBy(oInput, false, true);
		};

		// remove animation from popover
		oPopover.oPopup.setAnimations(function($Ref, iRealDuration, fnOpened) {
			fnOpened();
		}, function($Ref, iRealDuration, fnClosed) {
			fnClosed();
		});
	};

sap.suite.ui.commons.Timeline.prototype._liveChange = function(oEvent) {
// only fire event when change is ^@ or \s@
	var strInput = oEvent.getParameters().value;
	
	if (!this.getShowSuggestion()) {
		this._oldAddInput = strInput; 
		return;
	}
	
	//this._getCursorPosition(strInput, this._oldAddInput);
	var oInput = oEvent.getSource();
	this._inputDiff = this._getDiffWord(strInput, this._oldAddInput);
//	if (this._lastInputOp == "A" || this._lastInputOp == "D") {
		if (this._inputDiff.match(/^@|\s@/g) && this._inputDiff.length > 1) {
			var that = this;
			if (!this._suggestionPopup) {
				this._createSuggestionPopup(oInput);
			}
			this.fireSuggest({
					suggestValue: this._inputDiff
			});

			this._iSuggestDelay = jQuery.sap.delayedCall(300, this, function(){
				this._suggestList.destroyItems();
				var items = this.getSuggestionItems();
				
				for (var i=0; i<items.length; i++) {
					this._suggestList.addItem(new sap.m.StandardListItem({
						icon: items[i].getIcon(),
						title: items[i].getTitle(),
						description: items[i].getDescription()
					}));
				}
	
				
				this._suggestionPopup.openBy(oInput);			
	
			});
		} else if (this._suggestionPopup && this._inputDiff.length == 0) { // adding a space. should close the suggestion
			this._suggestionPopup.close();			
		}

	

	this._oldAddInput = strInput; 
};


sap.suite.ui.commons.Timeline.prototype._getCursorPosition = function(newStr, oldStr) {
	// not really accurate as in "aaaaa" situation. however, it may not matter. 
	// do we need a function to get a real position?

	if (newStr.length > oldStr.length) {
		//add
		this._lastInputOp = "A";
		for (var i=0; i<oldStr.length; i++) {
			if (newStr[i] != oldStr[i]){
				return i + 1;
			}
		}
		return newStr.length;
	} else {
		this._lastInputOp = "D";
		for (var i=0; i<newStr.length;  i++) {
			if (newStr[i] != oldStr[i]){
				return i;  
			}
		}
		return oldStr.length -1;
	}

};

sap.suite.ui.commons.Timeline.prototype._getDiffWord = function(newStr, oldStr) {
// compares the old string and new string, return the new string's diff words. If nstr words 
	var nwords = [];
	var owords = [];
	if (newStr) {
		nwords = newStr.split(" ");
	}
	if (oldStr) {
		owords = oldStr.split(" ");
	}
	if (newStr.length < oldStr.length) {   // this is a delete
		this._lastInputOp = "D";
		for (var i=0; i<nwords.length; i++) {
			if (nwords[i] != owords[i]) {
				if (nwords[i] == owords[i+1]) {
					//deleting one word charactor, shouldn't matter
					return "d";
				}
				else {
					return nwords[i];
				}
			}
		}
		return "d"; // delete the last one character, shouldn't matter
	} else {   // this is add
		this._lastInputOp = "A";
		if (nwords.length > owords.length) {
			return nwords[nwords.length-1];
		}
		for (var i=0; i<owords.length; i++) {
			if (owords[i] != nwords[i]) {  // insert into existing words
				return nwords[i];
			} 
		}
		return " " ; // only space difference...
	}
}; 

sap.suite.ui.commons.Timeline.prototype._getNewString = function (oldStr, diff, insertStr) {
	return oldStr.replace(diff, insertStr);
};

//sap.suite.ui.commons.Timeline.prototype.getScrollDelegate = function() {
//	return this._oScroller;
//};
//
//sap.suite.ui.commons.Timeline.prototype.scrollTo = function(x, y, time) {
//	if (this._oScroller) {
//		if (this.getDomRef()) { // only if rendered
//			this._oScroller.scrollTo(x, y, time);
//		} else {
//			this._oScroller._scrollX = x; // remember for later rendering
//			this._oScroller._scrollY = y;
//		}
//	}
//	return this;
//};

//add post
sap.suite.ui.commons.Timeline.prototype._addPost = function(){
	
	var inputText = this._addInput.getValue();
    this.fireAddPost({
    		value: inputText,
    		mentions: this._mentions
    		});
	
};

sap.suite.ui.commons.Timeline.prototype._openAddDialog = function() {
	if (!this._addDialog) {
		this._createAddDialog();
	}
	this._addInput.setValue('');
	this._oldAddInput = '';
	this._mentions = [];
	//this._addDialog.destroyContent();
	this._addDialog.addContent(this._addInput);
	this._addDialog.openBy(this._addIcon);

};


sap.suite.ui.commons.Timeline.prototype._setFilterInfoText = function(oFilter) {
	var oFilterInfoText = this.resBundle.getText("TIMELINE_FILTER_INFO_BY", [oFilter]);
	this._filterInfoText.setText(oFilterInfoText);
	this._filterInfoText.setTooltip(oFilterInfoText);
	if (oFilter === this.resBundle.getText("TIMELINE_ALL")) {
		this._headerInfoBar.setVisible(false);
	} else {
		this._headerInfoBar.setVisible(true);
	}
	this._filterText = oFilter;
};

sap.suite.ui.commons.Timeline.prototype._setFilterList = function() {
	this._aFilterList = [];
	this._filteredItems = {};
	if (this.getEnableBackendFilter()) {
		var oFilterList = this.getFilterList();
		var oFL = [];
		oFilterList.forEach(function(oItem) {
			oFL.push({
				key : oItem.getKey(),
				text : oItem.getText()
			});
		});
		this._aFilterList = oFL;
		//this._backendFilterDataFetched = true;
	} else {
		var oItems = this.getContent();
		for (var i = 0; i < oItems.length; i++) {
			var key = oItems[i].getFilterValue();
			if (!key) {
				continue;
			}
			if (key in this._filteredItems) {
				this._filteredItems[key].push(oItems[i]);
			} else {
				var alist = [];
				alist.push(oItems[i]);
				this._filteredItems[key] = alist;
				this._aFilterList.push({
				    key : key,
					text : key
				});
			}
		};
	}; // if (this.getEnableBackendFilter()) { //} else {
	// sort the list
  if (!this.getEnableBackendFilter()){
	  this._aFilterList.sort(function(a, b) {
		  return a.text.toLowerCase().localeCompare(b.text.toLowerCase());
	  });
	}
	// put in the all items first
	var emptyKey = "";
	if (this.getEnableAllInFilterItem() && !(this._aFilterList[0] && this._aFilterList[0].key == "")) {  
		this._aFilterList.unshift({
			key  : "",
			text : this.resBundle.getText("TIMELINE_ALL")
		});
	};

	var jsonModel = new sap.ui.model.json.JSONModel({
		items : this._aFilterList
	});
	this._filterList.setModel(jsonModel);

	// set the default selection - All
	if (this._currentFilterKey){
		this.setCurrentFilter(this._currentFilterKey);
	} else if (this.getEnableAllInFilterItem()) {	
	  	this._filterList.setSelectedItem(this._filterList.getItems()[0]);
	}
	
};  //_setFilterList

sap.suite.ui.commons.Timeline.prototype._resetFilter = function() {
//	if (this._aFilterList) {
	if (this._aFilterList.length !== 0 && !this.getEnableBackendFilter()) {	
		// set the default selection - All
		this._filterList.setSelectedItem(this._filterList.getItems()[0]);
		this._headerInfoBar.setVisible(false);

	};
};

sap.suite.ui.commons.Timeline.prototype._openFilterDialog = function() {

//	if (!this._aFilterList || ( this._contentChange && !this.getEnableBackendFilter())) { 	
	this._setFilterList(); //reset filterList always in case of content change....
	if ((this.getEnableBackendFilter() && (this._aFilterList.length === 0)) || ( this._contentChange && !this.getEnableBackendFilter())) {
		//this._setFilterList();
		this._contentChange = false; // reset the flag
	}
	
	this._filterDialog.addContent(this._filterList);
	this._filterDialog.openBy(this._filterIcon);

};

sap.suite.ui.commons.Timeline.prototype._resetDisplayItems = function(filter) {
	this.invalidate();
	var oItems = this.getContent();
	var dItems = [];
	if (filter === this.resBundle.getText("TIMELINE_ALL")) {
		dItems = oItems;
	} else {
		dItems = this._filteredItems[filter];
	}
	this._displayItems = dItems;

};

sap.suite.ui.commons.Timeline.prototype.setEnableSocial = function(flag){
	if (flag) {
		this._headerBar.insertContent(this._addIcon, 0);
	} else {
		this._headerBar.removeContent(this._addIcon);
	}
	
	this.setProperty("enableSocial", flag);
	
};

sap.suite.ui.commons.Timeline.prototype.setData = function(oData) {
	// return if no data is passed
	if (oData == undefined) {
		return;
	}
	var sPath = this._buildPath("/", sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME);
	this._internalModel.setData(oData);
	this.setProperty("data", oData, true);
	this.bindAggregation("content", {
		path : sPath,
		sorter : this._getDefaultSorter('dateTime', this.getSortOldestFirst()),
		factory : jQuery.proxy(this._defaultItemsFactory, this)
	});
	this._displayItems = this.getContent();
	this._finishLoading = true;
	this._contentChange = true;
	this._iItemCount = this.getMaxItemsCount();
	return this;
};

sap.suite.ui.commons.Timeline.prototype._buildPath = function(sPath, sModelName) {
	var sCompletePath = sPath;
	if (sModelName)
		sCompletePath = sModelName + ">" + sPath;
	return sCompletePath;
};

sap.suite.ui.commons.Timeline.prototype._getDefaultSorter = function(property, order) {
	var descending = true;
	if (order) {
		descending = false;
	} else {
		descending = true;
	}
	return new sap.ui.model.Sorter(property, descending, false);
};

sap.suite.ui.commons.Timeline.prototype._defaultItemsFactory = function(sId, oContext) {
	var oOptions = {};
	oOptions.dateTime = oContext.getProperty("dateTime");
	oOptions.icon = oContext.getProperty("icon");
	oOptions.userName = oContext.getProperty("userName");
	oOptions.title = oContext.getProperty("title");
	oOptions.text = oContext.getProperty("text");
	oOptions.filterValue = oContext.getProperty("filterValue");
	var oTimelineItem = new sap.suite.ui.commons.TimelineItem(oOptions);
	if (oContext.getProperty("content")) {
		oTimelineItem.setEmbeddedControl(oContext.getProperty("content"));
	}
	return oTimelineItem;
};

sap.suite.ui.commons.Timeline.prototype.onBeforeRendering = function() {
	//this.$().find("#" + this.getId() + "-scroll").css("height", this._scHeight);
	var oItems = this.getContent();
	if (this._filterChange) {
		oItems = this._displayItems;
	}
	this._filterChange = false; // reset the flag
	this._showMore = false;
	var oBindingInfo = this.getBindingInfo("content");
//	if ((this.getGrowing() && (oBindingInfo) && (oBindingInfo.model !== sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME) && (this.getMaxItemsCount() > this._iItemCount))) {
	if ((this.getGrowing() && (oBindingInfo) && (oBindingInfo.model !== sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME) && (this.getMaxItemsCount() > this._growDisplayCount))) {
		if ((this._filterText === this.resBundle.getText("TIMELINE_ALL")) || (this.getEnableBackendFilter())) {
			this._showMore = true;
		}
	} else if (this.getMaxItemsCount() > 0) {
		this._iItemCount = this.getMaxItemsCount();
	}
	if (this._iItemCount == 0) {
		this._iItemCount = this.getMaxItemsCount();
		this._showMore = false;
	}
	if (this.getForceGrowing()) {  //always show more button when social enable
		this._showMore = true;
	}
	this.setOutput(oItems);
};

sap.suite.ui.commons.Timeline.prototype.setContent = function(oContents) {
	this.removeAllContent();
	for ( var i = 0; i < oContents.length; i++) {
		var oItem = oContents[i];
		if (oItem._isOfTypeTimelineItem && oItem._isOfTypeTimelineItem() == true) {
			if ((oItem.getEmbeddedControl() === null) && (oItem.getText() !== null)) {
				oItem.setEmbeddedControl(new sap.m.Text({
					text : oItem.getText(),
					maxLines : 0
				}));
			}
			sap.suite.ui.commons.Timeline.prototype.addContent.apply(this, [oItem]);
		}
	}
	this._displayItems = this.getContent();
	this._finishLoading = true;
	this._contentChange = true;
	this._resetFilter();
	this._iItemCount = this.getMaxItemsCount();
};

sap.suite.ui.commons.Timeline.prototype.sortBy = function(property, ascending) {
	if (ascending) {
		return function(a, b) {
			if (a.getProperty(property) > b.getProperty(property)) {
				return 1;
			} else if (a.getProperty(property) < b.getProperty(property)) {
				return -1;
			}
			return 0;
		};
	} else {
		return function(a, b) {
			if (a.getProperty(property) < b.getProperty(property)) {
				return 1;
			} else if (a.getProperty(property) > b.getProperty(property)) {
				return -1;
			}
			return 0;
		};
	}
};

sap.suite.ui.commons.Timeline.prototype.onAfterRendering = function() {
	var that = this;
/*	if ((this.sResizeListenerId == null) && (jQuery.device.is.desktop)) {
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performScrollChanges, this));
	}*/
	if (this.getAxisOrientation() === sap.suite.ui.commons.TimelineAxisOrientation.Vertical) {
		this.$().css("height", this._height);
		if (this.getEnableScroll()) { // only set height when we want scrolling
			this.$().find("#" + this.getId() + "-scroll").css("height", this._scHeight);
		}
	} 
	jQuery.sap.delayedCall(150, this, function() {
		that._performUiChanges();
	});
	this._startItemNavigation();
	//scroll event
//	this.$().find("#" + this.getId() + "-content").bind("scroll", jQuery.proxy(this.onScroll, this));
};

/*  in case we want end of scroll event
sap.suite.ui.commons.Timeline.prototype.onScroll = function(oEvent) {
	//alert("scrolling");
	var oDiv = this.$().find("#" + this.getId() + "-content")[0];  //todo no need to search everytime
	if (oDiv.clientHeight + oDiv.scrollTop >= oDiv.scrollHeight) {
//		alert("scroll end");
	}
};
*/

/* Keyboard Handling */
sap.suite.ui.commons.Timeline.prototype._startItemNavigation = function(oEvent) {
	// Collect the dom references of the items
	var oFocusRef = this.getDomRef(),
	aRows = oFocusRef.getElementsByClassName("sapSuiteUiCommonsTimelineItemShell"),
	aDomRefs = [];

	for (var i = 0; i < oFocusRef.childNodes.length; i++) {
	//remove timeline1-filterInfoBar if timeline1-filterInfoBar display on ui
		if (oFocusRef.childNodes[i].id.indexOf("filterInfoBar") < 0) {
					aDomRefs.push(oFocusRef.childNodes[i]);
		}
	}
			
	// initialize the delegate add apply it to the control (only once)
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}

	// After each rendering the delegate needs to be initialized as well.
	this.oItemNavigation.setRootDomRef(aRows);
	this._aRows = aRows; //save item level div
	this._aDomRefs = aDomRefs;
	this._sapTabbable = this.$().find(":sapTabbable");

    this._moreButtonFound = false;
 	this._addButtonFound = false;
 	this._addTarget = null;
 	this._filterTarget = null;
  	this._moreTarget = null;
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id.indexOf("more") >= 0) {
			this._moreButtonFound = true;
			this._moreTarget = this._sapTabbable[i];
		}
		if (this._sapTabbable[i].id.indexOf("add") >= 0) {
			this._addButtonFound = true;
			this._addTarget = this._sapTabbable[i];
		}
		if (this._sapTabbable[i].id.indexOf("filter") >= 0) {
			this._filterTarget = this._sapTabbable[i];
		}
	}		
	// set the array of dom nodes representing the items.
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	// turn off the cycling
	this.oItemNavigation.setCycling(false);
	// set the page size - default with 10 items
	this._pageSize = this.getGrowingThreshold();
	if (this._pageSize == 0) {
		this._pageSize = 10;
	}
//	this._pageSize = 3; 
	this.oItemNavigation.setPageSize(this._pageSize);
};

sap.suite.ui.commons.Timeline.prototype.onsaphome = function(oEvent) {
	jQuery(this._aRows[0]).focus();
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.suite.ui.commons.Timeline.prototype.onsapend = function(oEvent) {
	jQuery(this._aRows[this._aRows.length - 1]).focus();
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.suite.ui.commons.Timeline.prototype.onsappagedown = function(oEvent) {
//page down on item level only	
	var focusInItemLevelFound = false;
	for (var i=0; i < this._aRows.length; i++) {
			if (this._aRows[i].id == oEvent.target.id ) {
				focusInItemLevelFound = true;
				break;
			}
	}
	if (focusInItemLevelFound == false) {
		jQuery(oEvent.target).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
	var nextFocusIndex = i + this._pageSize;
	if (nextFocusIndex >= this._aRows.length) {
		nextFocusIndex = this._aRows.length - 1;
	}
	jQuery(this._aRows[nextFocusIndex]).focus();
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.suite.ui.commons.Timeline.prototype.onsappageup = function(oEvent) {
//page up item level only
	var focusInItemLevelFound = false;
	for (var i = 0; i < this._aRows.length; i++) {
		if (this._aRows[i].id == oEvent.target.id ) {
			focusInItemLevelFound = true;
			break;
		}
	}
	if (focusInItemLevelFound == false) {
		jQuery(oEvent.target).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
	var nextFocusIndex = i - this._pageSize;
	if (nextFocusIndex < 0) {
		nextFocusIndex = 0;
	}
	jQuery(this._aRows[nextFocusIndex]).focus();
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.suite.ui.commons.Timeline.prototype.onsapup = function(oEvent) {
//arrow down only on item level

	var j = 0;
	
	for (var i = 0; i < this._sapTabbable.length; i++) {
			if (this._sapTabbable[i].id == oEvent.target.id ) {
				j = i;
			}
	}	

	for (var i = j-1; i >= 0; i--) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 && this._sapTabbable[i].id != oEvent.target.id && this._shell != this._sapTabbable[i].id  && i < j) {
            this._shell = this._sapTabbable[i].id;
			this._previousTarget = this._sapTabbable[i];
			this._previousShellTarget = this._sapTabbable[i];
			jQuery(this._sapTabbable[i]).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			break;
		}
	}
};

sap.suite.ui.commons.Timeline.prototype.onsapleft = function(oEvent) {
//arrow down only on item level

	var j = 0;
	
	for (var i = 0; i < this._sapTabbable.length; i++) {
			if (this._sapTabbable[i].id == oEvent.target.id ) {
				j = i;
			}
	}	
	for (var i = j-1; i >= 0; i--) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 && this._sapTabbable[i].id != oEvent.target.id && this._shell != this._sapTabbable[i].id  && i < j) {
            this._shell = this._sapTabbable[i].id;
			this._previousTarget = this._sapTabbable[i];
			this._previousShellTarget = this._sapTabbable[i];
			jQuery(this._sapTabbable[i]).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			break;
		}
	}
};

sap.suite.ui.commons.Timeline.prototype.onsapdown = function(oEvent) {
//arrow down only on item level
	
	if (oEvent.target.id.indexOf("shell") < 0) {
		jQuery(this.$().find(oEvent.target)).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
						

	var j = 0;
	
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id == oEvent.target.id ) {
			j = i;
		}
	}	

	for (var i=0; i <this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 && this._sapTabbable[i].id != oEvent.target.id && this._shell != this._sapTabbable[i].id  && i > j) {
        this._shell = this._sapTabbable[i].id;
		this._previousTarget = this._sapTabbable[i];
		this._previousShellTarget = this._sapTabbable[i];
		jQuery(this._sapTabbable[i]).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
		}
	}

};

sap.suite.ui.commons.Timeline.prototype.onsapright = function(oEvent) {
//arrow down only on item level
	
	if (oEvent.target.id.indexOf("shell") < 0) {
		jQuery(this.$().find(oEvent.target)).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}					

	var j = 0;
	
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id == oEvent.target.id ) {
			j = i;
		}
	}	

	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 && this._sapTabbable[i].id != oEvent.target.id && this._shell != this._sapTabbable[i].id  && i > j) {
	        this._shell = this._sapTabbable[i].id;
			this._previousTarget = this._sapTabbable[i];
			this._previousShellTarget = this._sapTabbable[i];
			jQuery(this._sapTabbable[i]).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}
};

sap.suite.ui.commons.Timeline.prototype.onsaptabprevious = function(oEvent) {
	var lastInteractiveElement = null;
	this._tabprevious = true;
	if (oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("more") < 0) {
//	if (oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0) {
		this._previousTabPreviousTarget = oEvent.target;
	}
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}
	this._startItemNavigation(); 
	var $Tabbables = this._sapTabbable;
	if (this._addButtonFound) {
		if (this._addTarget == null) { //without any tab and enter click any item and enter shift+tab 
			for (var i=0; i <this._sapTabbable.length; i++) {
				if (this._sapTabbable[i].id.indexOf("add") >= 0 ) {
					jQuery(this._sapTabbable[i]).focus();
					oEvent.preventDefault();
					oEvent.setMarked();
					return;
				}
			}	
		}
	}
	else {
		if (this._filterTarget == null) { //without any tab and enter click any item and enter shift+tab 
			for (var i=0; i <this._sapTabbable.length; i++) {
				if (this._sapTabbable[i].id.indexOf("filter") >= 0 ) {
					jQuery(this._sapTabbable[i]).focus();
					oEvent.preventDefault();
					oEvent.setMarked();
					return;
				}
			}	
		}
	}
	var prevFocusShellTarget = null;
	if (oEvent.target.id.indexOf("getmore") >= 0) {
		if (this._previousTarget == null) {
			lastInteractiveElement = this._getLastInteractiveElementInItem(this._getFirstShellTarget());
			jQuery(lastInteractiveElement).focus();
		}
		else {
		    var shellTargetFound = false;
		    if (this._previousShellTarget != null) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._previousShellTarget.id ==  this._sapTabbable[i].id) {		
						lastInteractiveElement = this._getLastInteractiveElementInItem(this._sapTabbable[i]);
						this._previousTarget = lastInteractiveElement;
						jQuery(lastInteractiveElement).focus();
						oEvent.preventDefault();
						oEvent.setMarked();		
						shellTargetFound = true;	
						return;
					}
				}		    	
		    }
			//focus on 1st shell if previous shell not found
			var lastInteractiveElement = null;
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						lastInteractiveElement = this._getLastInteractiveElementInItem(this._getFirstShellTarget());
						this._previousTarget = lastInteractiveElement;
						this._previousShellTarget = this._sapTabbable[i];
						jQuery(lastInteractiveElement).focus();
						oEvent.preventDefault();
						oEvent.setMarked();
						return;
					}
				}
			}
		}
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
		
	if (oEvent.target.id.indexOf("shell") >= 0) {
		jQuery(this._filterTarget).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}	
	if (oEvent.target.id.indexOf("filter") >= 0 || oEvent.target.id.indexOf("add") >= 0 ) {
		this._dummy = true; //assume will tab through dummy...
	}
};

sap.suite.ui.commons.Timeline.prototype._getLastInteractiveElementInItem = function(target) {

	if (target == null) {
		return;
	}

	var LastItemInteractiveElement = target;
	
	var j = 0;
	
	//find the item using shell target
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id == target.id ) {
			j = i;
			break;
		}
	}	

	var nextShellTargetFound = false;
	var lastInteractiveElementIndex = 0;
	for (var i = 0; i <this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 && this._sapTabbable[i] != target  && i > j) {
			nextShellTargetFound = true;
			break;
		} else {
			LastItemInteractiveElement = this._sapTabbable[i];
			lastInteractiveElementIndex = i;
		}
	}
	//if only two item and focus on the 2nd item last interactive element and come back from 'more' button then we need to focus on 
	//the interactive element before more button
	if (LastItemInteractiveElement.id.indexOf("more") >= 0 && lastInteractiveElementIndex > 0) {
		LastItemInteractiveElement = this._sapTabbable[lastInteractiveElementIndex - 1];
	}
	
	return LastItemInteractiveElement;

};

sap.suite.ui.commons.Timeline.prototype._getFirstShellTarget = function() {

	var FirstShellTarget = null;

	//find the 1st item using shell target
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (this._sapTabbable[i].id.indexOf("shell") >= 0 ) {
			FirstShellTarget = this._sapTabbable[i];
			break;
		}
	}
	return FirstShellTarget;
};

sap.suite.ui.commons.Timeline.prototype._getItemShellTarget = function(target) {
	var itemsShellTarget = null;
	var contentLength = 0;

	if (target == null) {
		return itemsShellTarget;
	}
	if (target.id.indexOf("shell") >= 0) {
		return target;
	}
	var position = -1;
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (target.id ==  this._sapTabbable[i].id) {
			position = i;
			break;
		}
	}
	if (position >= 0) {
		for (var j = position - 1; j >= 0; j--) {
			if (this._sapTabbable[j].id.indexOf("shell") >= 0) {
				itemsShellTarget = this._sapTabbable[j];
				break;
			}
		}
	}
	return itemsShellTarget;
};

sap.suite.ui.commons.Timeline.prototype.onsaptabnext = function(oEvent) {

	this._tabnext = true;
	this._dummy = false;
	
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}
	this._startItemNavigation();

	var oTargetPosition = -1;
	for (var i = 0; i < this._sapTabbable.length; i++) {
		if (oEvent.target.id ==  this._sapTabbable[i].id) {
			oTargetPosition = i;
			break;
		}
	}
		
	if (oEvent.target.id.indexOf("more") < 0 && oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0) {
		if (oTargetPosition == this._sapTabbable.length - 1) {
			this._setFocusOnMoreOrOutOfFocusArea(oEvent);
		}
		if (oTargetPosition < this._sapTabbable.length - 1 && this._sapTabbable[oTargetPosition + 1].id.indexOf("shell") >= 0) {
			this._setFocusOnMoreOrOutOfFocusArea(oEvent);
		}
	}

	var prevFocusShellTarget = null;
	if (oEvent.target.id.indexOf("filter") >= 0 && this._previousTarget != null && oEvent.target != this._previousTarget) {
		if (this._previousTarget.id.indexOf("shell") >= 0) {
			var shellTargetFound = false;
			for (var i = 0; i < this._sapTabbable.length; i++) {
				if (this._previousTarget.id ==  this._sapTabbable[i].id) {
					jQuery(this._sapTabbable[i]).focus();
					oEvent.preventDefault();
					oEvent.setMarked();
					return;
				}
			}				
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						break;
					}
				}
			}
		} 
		else {
			var shellTargetFound = false;
			if (this._previousShellTarget != null) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._previousShellTarget.id ==  this._sapTabbable[i].id) {
						jQuery(this._sapTabbable[i]).focus();
						oEvent.preventDefault();
						oEvent.setMarked();
						shellTargetFound = true;
						return;
					}
				}				
			}
			//focus on 1st shell if previous shell not found
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						this._previousTarget = this._sapTabbable[i];
						this._previousShellTarget = this._sapTabbable[i];
						break;
					}
				}
			}
		}
		if (prevFocusShellTarget == null) {
			for (var i = 0; i < this._sapTabbable.length; i++) {
				if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
					prevFocusShellTarget = this._sapTabbable[i];
					break;
				}
			}	
		}
		jQuery(prevFocusShellTarget).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;					
	}
		
	if (oEvent.target.id.indexOf("getmore") < 0 && oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0 ) {
		this._previousTarget = oEvent.target;
		this._previousShellTarget = this._getItemShellTarget(oEvent.target);
	}	
	
};

sap.suite.ui.commons.Timeline.prototype._setFocusOnMoreOrOutOfFocusArea = function(oEvent) {
	if (!this._moreButtonFound) {
		jQuery(this._sapTabbable[this._sapTabbable.length - 1]).focus();
		this._dummy = true; //out of focus area flag
		this._previousTarget = oEvent.target;  
		this._previousShellTarget = this._getItemShellTarget(oEvent.target);
		return;
	}
	
	if (this._moreButtonFound) {
		this._previousTarget = oEvent.target;
		this._previousShellTarget = this._getItemShellTarget(oEvent.target);  
		jQuery(this._moreTarget).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
};

sap.suite.ui.commons.Timeline.prototype._switchFocus = function(oEvent) {
	var itemShellTarget = this._getItemShellTarget(oEvent.target);
	var controlShellTarget = this._getItemShellTarget(this._saveTarget);
	//only control and item sit in the same item shell, then can toggle
	if (this._saveTarget != null && oEvent.target != null && itemShellTarget != controlShellTarget) {
	//save control target
		if (oEvent.target.id.indexOf("item") < 0 && oEvent.target.id.indexOf("shell") < 0) {
			this._saveTarget = oEvent.target;
		}
		return;
	}
	//at item level, toggle back to control
	if (oEvent.target.id.indexOf("item") >= 0 && oEvent.target.id.indexOf("shell") >= 0) {
		jQuery(oEvent.target).blur();
		jQuery(this._saveTarget).focus();
	}
	else {
	//at control level, toggle back to item
		if (itemShellTarget != null) {
			this._saveTarget = oEvent.target;
			jQuery(oEvent.target).blur();
			jQuery(itemShellTarget).focus();
		}
	}
};
sap.suite.ui.commons.Timeline.prototype.onkeydown = function(oEvent) {
		// toggle between control and item with F7
	if (oEvent.which == jQuery.sap.KeyCodes.F7 && !oEvent.isMarked()) {
		this._switchFocus(oEvent);
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
};

sap.suite.ui.commons.Timeline.prototype.onsapspace = function(oEvent) {
	// if non 'getmore' button entered, then prevent scrolling when focus
	if (oEvent.target.id.indexOf("getmore") < 0) {
		oEvent.preventDefault();
		oEvent.setMarked();
		this.focus();
	}
};

sap.suite.ui.commons.Timeline.prototype.onfocusin = function(oEvent) {
//tab and then shift+tab back from 'out of focus area'
	if (this._dummy && oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0 && this._previousTarget != null) {
		this._tabprevious = false;
		this._dummy = false;
		if (this._moreButtonFound) {
			jQuery(this._moreTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		//find the previous shell target and then find the last interactive element
		var lastInteractiveElement = this._getLastInteractiveElementInItem(this._previousTarget);
		jQuery(lastInteractiveElement).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}
	//without tab next, click on item, and then shift+tab back from 'out of focus area'
	if (this._dummy && oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("add") < 0 && this._previousTarget == null) {
		this._tabprevious = false;
		this._dummy = false;
		//if focus back and the current position not at more button
		if (this._moreButtonFound && oEvent.target.id.indexOf("more") < 0) {
			jQuery(this._moreTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		if (this._moreButtonFound) { 
			jQuery(this._moreTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		} else if (this._previousTabPreviousTarget != null) {
			jQuery(this._previousTabPreviousTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		} else if (this._addButtonFound) {
			jQuery(this._addTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		} else if (this._filterTarget !== null) {
			jQuery(this._filterTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}
	
	//directly shift+tab from 'out of focus' area
	if (!this._dummy && this._previousTarget == null && !this._moreButtonFound && this._tabnext == false && oEvent.target.id == this._sapTabbable[this._sapTabbable.length - 1].id) {
		this._setFocusOnMoreAddFilterButton(oEvent);
	}
	if (!this._dummy && this._previousTarget == null && this._moreButtonFound && this._tabnext == false && oEvent.target.id == this._sapTabbable[this._sapTabbable.length - 2].id) {
		this._setFocusOnMoreAddFilterButton(oEvent);
	}
};

sap.suite.ui.commons.Timeline.prototype._setFocusOnMoreAddFilterButton = function(oEvent) {
	this._tabprevious = false;
//focus on the 1st item last interactive element 
	var firstShellTarget = this._getFirstShellTarget();
	var lastInteractiveElement = this._getLastInteractiveElementInItem(firstShellTarget);
	this._previousTarget = lastInteractiveElement;
	this._previousShellTarget = firstShellTarget;
	jQuery(lastInteractiveElement).focus();
	oEvent.preventDefault();
	oEvent.setMarked();
};

//Handle F6
sap.suite.ui.commons.Timeline.prototype.onsapskipforward = function(oEvent) {
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}
	this._startItemNavigation(); 

	if (oEvent.target.id.indexOf("shell") >= 0) {
		if (this._moreButtonFound) {
			jQuery(this._moreTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
			jQuery(this._sapTabbable[this._sapTabbable.length - 1]).focus();
			return;			
		
	}

	if (oEvent.target.id.indexOf("shell") < 0 && oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("filter") < 0 && oEvent.target.id.indexOf("more") < 0) {
		var shellTarget = null;
		shellTarget = this._getItemShellTarget(oEvent.target);
		if (this._moreButtonFound) {
			jQuery(this._moreTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		jQuery(this._sapTabbable[this._sapTabbable.length - 1]).focus();
		return;		
	}
		
	if (this._previousTarget == null && oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("filter") < 0) {
		if (this._addButtonFound) {
			jQuery(this._addTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		if (this._filterTarget != null) {
			jQuery(this._filterTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}
	
	if (oEvent.target.id.indexOf("add") >= 0 || oEvent.target.id.indexOf("filter") >= 0) {
		if (this._previousTarget == null) {
			var firstTarget = this._getFirstShellTarget();
			this._previousTarget = firstTarget;
			this._previousShellTarget = firstTarget; 
			jQuery(firstTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}
	
	var prevFocusShellTarget = null;
	if ((oEvent.target.id.indexOf("filter") >= 0 || oEvent.target.id.indexOf("add") >= 0) && this._previousTarget != null && oEvent.target != this._previousTarget) {
		if (this._previousTarget.id.indexOf("shell") >= 0) {
			var shellTargetFound = false;
			for (var i = 0; i < this._sapTabbable.length; i++) {
				if (this._previousTarget.id ==  this._sapTabbable[i].id) {
					jQuery(this._sapTabbable[i]).focus();
					oEvent.preventDefault();
					oEvent.setMarked();
					return;
				}
			}				
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						break;
					}
				}
			}
		} else {
			var shellTargetFound = false;
			if (this._previousShellTarget != null) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._previousShellTarget.id ==  this._sapTabbable[i].id) {
						jQuery(this._sapTabbable[i]).focus();
						oEvent.preventDefault();
						oEvent.setMarked();
						shellTargetFound = true;
						return;
					}
				}				
			}
			//focus on 1st shell if previous shell not found
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						this._previousTarget = this._sapTabbable[i];
						this._previousShellTarget = this._sapTabbable[i];
						break;
					}
				}
			}
		}
		if (prevFocusShellTarget == null) {
			for (var i = 0; i < this._sapTabbable.length; i++) {
				if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
					prevFocusShellTarget = this._sapTabbable[i];
					break;
				}
			}	
		}
		jQuery(prevFocusShellTarget).focus();
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}	
};

//Handle SHIFT+F6
sap.suite.ui.commons.Timeline.prototype.onsapskipback = function(oEvent) {

	this._shiftf6 = true;
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}
	this._startItemNavigation(); 

	if (oEvent.target.id.indexOf("shell") >= 0 && oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("filter") < 0) {
		if (this._addButtonFound) {
			jQuery(this._addTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		if (this._filterTarget != null) {
			jQuery(this._filterTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}

	if (oEvent.target.id.indexOf("shell") < 0 && oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("filter") < 0) {
		if (this._addButtonFound) {
			jQuery(this._addTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
		if (this._filterTarget != null) {
			jQuery(this._filterTarget).focus();
			oEvent.preventDefault();
			oEvent.setMarked();
			return;
		}
	}

	var prevFocusShellTarget = null;
	if (oEvent.target.id.indexOf("add") < 0 && oEvent.target.id.indexOf("filter") < 0) {
		if (this._previousTarget == null) {
			lastInteractiveElement = this._getLastInteractiveElementInItem(this._getFirstShellTarget());
			jQuery(lastInteractiveElement).focus();
		}
		else {
		    var shellTargetFound = false;
			for (var i = 0; i < this._sapTabbable.length; i++) {
				if (this._previousShellTarget.id ==  this._sapTabbable[i].id) {		
					jQuery(this._sapTabbable[i]).focus();
					oEvent.preventDefault();
					oEvent.setMarked();		
					shellTargetFound = true;	
					return;
				}
			}		    	
			//focus on 1st shell if previous shell not found
			var lastInteractiveElement = null;
			if (!shellTargetFound) {
				for (var i = 0; i < this._sapTabbable.length; i++) {
					if (this._sapTabbable[i].id.indexOf("shell") >= 0) {
						prevFocusShellTarget = this._sapTabbable[i];
						jQuery(this._sapTabbable[i]).focus();
						oEvent.preventDefault();
						oEvent.setMarked();
						return;
					}
				}
			}
		}
		oEvent.preventDefault();
		oEvent.setMarked();
		return;	
	}
};

//sap.suite.ui.commons.Timeline.prototype.setAxisOrientation = function(axis) {
//	this.setProperty("axisOrientation", axis, true);
//};

//sap.suite.ui.commons.Timeline.prototype.setAxisOrientation = function(axis) {
//	this.setProperty("axisOrientation", axis, true);
//};

sap.suite.ui.commons.Timeline.prototype._performUiChanges = function() {
	if (this.getAxisOrientation() === sap.suite.ui.commons.TimelineAxisOrientation.Vertical) {
		this._performUiChangesV();
	} else {
		this._performUiChangesH();
	}
};

sap.suite.ui.commons.Timeline.prototype._performUiChangesH = function() {
//	var showIcons = this.getShowIcons();
	var jThis = this.$();
//	var liItems = jThis.find('.sapSuiteUiCommonsTimelineItemBox');
//	var contentMaxHeight = 0;
//	for (var i = 0; i < liItems.length; i++) {
//		var contentHeight = liItems[i].clientHeight;
//		if (contentMaxHeight < contentHeight){
//			contentMaxHeight = contentHeight;
//		}
//	}
//	contentMaxHeight = contentMaxHeight+50 // buffer for icon and bar space.  
	
	// escape dot as special char in the Fiori view IDs.
	var myId = this.getId();
	if (myId.indexOf("\.") != -1) { // there is a dot in the id.
	    myId = myId.replace( /(:|\.|\[|\])/g, "\\$1" ); // escape the ". and :" with "\\."
	}
	
	var _toolbarHeight = jThis.find("#" + myId + "-filterToolBar").outerHeight();
	var _infoBarHeight = jThis.find("#" + myId + "-filterInfoBar").outerHeight();
	
	var contentBox = jThis.find('.sapSuiteUiCommonsTimelineContentsH');
	
	var selfHeight = jThis.height();
	contentBox.css({
		'height' : selfHeight - (_toolbarHeight + _infoBarHeight)
	});
};

sap.suite.ui.commons.Timeline.prototype._performUiChangesV = function() {
	var showIcons = this.getShowIcons();
	var jThis = this.$();
	var liItems = jThis.find('li');
	for (var i = 0; i < liItems.length; i++) {
		var lineInd = i + 1;
		var contentHeight = jThis.find('li:nth-child(' + lineInd + ')').find('.sapSuiteUiCommonsTimelineItemBox').css('height');
		if (contentHeight !== undefined) {
			var liHeight = parseInt(contentHeight.replace("px", "")) + 23;// 10;
			if (i === (liItems.length - 1)) {
				liHeight += 28;// 15;
			}
			// set the item div height
			jThis.find('li:nth-child(' + lineInd + ')').css({
				'height' : liHeight + 'px'
			});

			// set the bar/line height..
			var liBar = jThis.find('li:nth-child(' + lineInd + ')').find('.sapSuiteUiCommonsTimelineItemBar');
			if (!showIcons) {
				liBar.css({
					'height' : (liHeight - 17) + 'px'
				});
				liBar.css({
					'top' : 30 + 'px'
				});
			} else {
				liBar.css({
					'height' : (liHeight - 34) + 'px'
				});
			}
		}
	}

	this._performScrollChanges();

};

sap.suite.ui.commons.Timeline.prototype._performScrollChanges = function() {
	if (this.getAxisOrientation() === sap.suite.ui.commons.TimelineAxisOrientation.Vertical) {
	// fix the height for scrolling.
	var jThis = this.$();
	var _outerHeight = jThis.parent().outerHeight();
	var _innerHeight = jThis.parent().height(); // css height excluding buffer etc.
	// get height of all the members elements other than timeline.
	var _elementsHeight = 0;
	var _elements = jThis.parent().children();
	for (var i = 0; i < _elements.length; i++) {
		var _elem = _elements[i];
		if (_elem.className != "sapSuiteUiCommonsTimeline") {
			_elementsHeight += _elem.clientHeight;
		}
	}

	_outerHeight = _outerHeight - _elementsHeight;
	var _badSize = false;
	if (_innerHeight <= 50 || (_innerHeight - _elementsHeight) <= 50) { // at least 50px
		_badSize = true;
	}
	this._height = _outerHeight - 28;  //todo. when to really calculate?
	jThis.css({
		'height' : this._height
	});
	
	// escape dot as special char in the Fiori view IDs.
	var myId = this.getId();
	if (myId.indexOf("\.") != -1) { // there is a dot in the id.
	    myId = myId.replace( /(:|\.|\[|\])/g, "\\$1" ); // escape the ". and :" with "\\."
	}
	
	var _toolbarHeight = jThis.find("#" + myId + "-filterToolBar").outerHeight() + 28;
	var _infoBarHeight = jThis.find("#" + myId + "-filterInfoBar").outerHeight();
	if (_badSize) {
		if (this.getEnableScroll()) {
			jThis.find("#" + myId + "-scroll").css({
	//		'height' : '25rem'
				'height' : '400px'
			});
		}
		jThis.parent().css({
//		'height' : '25rem'
			'height' : '400px'
		});
		jThis.parent().css({
			'height' : (jThis.parent().outerHeight() + _elementsHeight + _toolbarHeight + _infoBarHeight)
		});
		this._scHeight = 400;
	} else {
		this._scHeight = _outerHeight - (_toolbarHeight + _infoBarHeight);
			if (this.getEnableScroll()) {
			jThis.find("#" + myId + "-scroll").css({
				'height' : this._scHeight
			});
		}
	}
	}
};

sap.suite.ui.commons.Timeline.prototype.setOutput = function(oItems) {
	this._outputItem = [];
	var showIcons = this.getShowIcons();// if no icons property set... set _showIcons prop
	if (oItems.length > 1) {
		oItems.sort(this.sortBy('dateTime', this.getSortOldestFirst()));
	}
	var displayItemCount = oItems.length;
	if (this._showMore && displayItemCount > this._growDisplayCount){
		displayItemCount = this._growDisplayCount; //this._iItemCount;
	}
	/*
	var displayItemCount = this._iItemCount;
	if (oItems.length < this._iItemCount) {
		displayItemCount = oItems.length;
	} else {
		displayItemCount = this._iItemCount;
	}
	*/
	for (var i = 0; i < displayItemCount; i++) {
		var _item = oItems[i];
		var _position;
		if (!showIcons) {
			_item._showIcons = true;
		}
		if (i == (oItems.length - 1)) {
			if (this._showMore) {
				_position = sap.suite.ui.commons.TimelineItemPosition.Middle;
			} else {
				_position = sap.suite.ui.commons.TimelineItemPosition.Bottom;
			}
		} else if (i == 0) {
			_position = sap.suite.ui.commons.TimelineItemPosition.Top;
		} else {
			_position = sap.suite.ui.commons.TimelineItemPosition.Middle;
		}
		_item.setLayout(_position, "Right");
		this._outputItem.push(_item);
	}

};


/* only get called when oData model... */
sap.suite.ui.commons.Timeline.prototype.refreshContent = function(sReason) {
	this._finishLoading = false;
	if (this.getEnableBusyIndicator()) {
		this.setBusy(true);
	}
	var oBindingInfo = this.getBindingInfo("content");
	var oBinding = this.getBinding("content");
	if (this.getGrowing() && (oBindingInfo) && (oBindingInfo.model !== sap.suite.ui.commons.Timeline.INTERNAL_MODEL_NAME) && (oBinding) && (oBinding.getModel())
			&& (oBinding.getModel().getDefaultCountMode() !== sap.ui.model.odata.CountMode.None)) {
		this._growing = true;
		this._iItemCount = this.getGrowingThreshold();
		this._growDisplayCount = this.getGrowingThreshold();
		oBinding.getContexts(0, this._iItemCount);
		oBindingInfo.length = this._iItemCount;
	} else {
		this.updateAggregation("content");
	}
	this._filterText = this.resBundle.getText("TIMELINE_ALL");
};

sap.suite.ui.commons.Timeline.prototype.updateContent = function(sReason) {
	if (this.getEnableBusyIndicator() && this.getBusy()) {
		this.setBusy(false);
	}
	var oBinding = this.getBinding("content");
	if (this._growing) {
		oBinding.getContexts(0, this._iItemCount);
	}
	this.updateAggregation("content");
	this._finishLoading = true;
	this._contentChange = true;
	if (!this.getEnableBackendFilter()) {
	  this._resetFilter();
	}
};



sap.suite.ui.commons.Timeline.prototype.updateFilterList = function() { // July/22/2014
	this.updateAggregation("filterList");
	this._setFilterList();
};

sap.suite.ui.commons.Timeline.prototype.exit = function() {
	if (this._emptyList) {
		this._emptyList.destroy();
		this._emptyList = undefined;
	}
	if (this._filterIcon) {
		this._filterIcon.destroy();
		this._filterIcon = undefined;
	}
	if (this._filterDialog) {
		this._filterDialog.destroy();
		this._filterDialog = undefined;
	}
	if (this._filterList) {
		this._filterList.destroy();
		this._filterList = undefined;
	}
	if (this._headerBar) {
		this._headerBar.destroy();
		this._headerBar = undefined;
	}
	if (this._filterInfoText) {
		this._filterInfoText.destroy();
		this._filterInfoText = undefined;
	}
	if (this._addIcon) {
		this._addIcon.destroy();
		this._addIcon = undefined;
	}
	if (this._addInput) {
		this._addInput.destroy();
		this._addInput = undefined;
	}	
	if (this._addDialog) {
		this._addDialog.destroy();
		this._addDialog = undefined;
	}	
	if (this._headerInfoBar) {
		this._headerInfoBar.destroy();
		this._headerInfoBar = undefined;
	}
	if (this._getMoreButton) {
		this._getMoreButton.destroy();
		this._getMoreButton = undefined;
	}
//	if (this._oScroller) {
//		this._oScroller.destroy();
//		this._oScroller = null;
//	}
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}
	if (this._suggestList) {
		this._suggestList.destroy();
		this._suggestList = undefined;
	}
	if (this._suggestionPopup) {
		this._suggestionPopup.destroy();
		this._suggestionPopup = undefined;
	}
/*	if (jQuery.device.is.desktop && this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	} else {
		sap.ui.Device.orientation.detachHandler(this._performScrollChanges, this);
		sap.ui.Device.resize.detachHandler(this._performScrollChanges, this);
	}*/
};

sap.suite.ui.commons.Timeline.prototype.setNoDataText = function(noDataText) {
	if ((noDataText !== null) && (noDataText !== undefined) && (noDataText !== "")) {
		this.setProperty("noDataText", noDataText, true);
		this._emptyList.setNoDataText(noDataText);
	} else {
		this._emptyList.setNoDataText(this.resBundle.getText('TIMELINE_NO_DATA'));
	}
};

sap.suite.ui.commons.Timeline.prototype.setShowHeaderBar = function(oShowHeaderBar) {
	this.setProperty("showHeaderBar", oShowHeaderBar, true);
	this._headerBar.setVisible(oShowHeaderBar);
};

sap.suite.ui.commons.Timeline.prototype.getMaxItemsCount = function() {
	

	var oBinding = this.getBinding("content");
	var len = this.getContent().length;
	if (oBinding) {  // todo: checking binding info?
		if (len < oBinding.getLength()){ //MaxItemCount might change if user use addContent method directly....
			return oBinding.getLength() || 0;
		}
	}
	return len;
};

sap.suite.ui.commons.Timeline.prototype.setGrowing = function(bGrowing) {
	if (this.getGrowing() != bGrowing) {
		this.setProperty("growing", bGrowing, !bGrowing);
	}
};

sap.suite.ui.commons.Timeline.prototype.setGrowingThreshold = function(growingThreshold) {
	this.setProperty("growingThreshold", growingThreshold, true);
	this._iItemCount = growingThreshold;
	this._growDisplayCount = growingThreshold;
};

sap.suite.ui.commons.Timeline.prototype.getCurrentFilter = function() {
  var selectedItem = this._filterList.getSelectedItem();
  if (selectedItem) {
  	return this._filterList.getSelectedItem().getKey();
	} else {
	  return null;
	}
};

sap.suite.ui.commons.Timeline.prototype.setCurrentFilter = function(selectedItemKey) {
	this._currentFilterKey = selectedItemKey;
	var items = this._filterList.getItems();
	if (this.getEnableBackendFilter() && (items.length === 0)) {
		this._setFilterList();
	} else {
		var selectedItem;
		for (var i = 0; i < items.length; i++) {
			if (selectedItemKey === items[i].getKey()) {
				selectedItem = items[i];
			};
		};
		if (selectedItem) {
			this._filterList.setSelectedItem(selectedItem);
			this._setFilterInfoText(selectedItem.getLabel());
			// this.fireFilterSelectionChange({selectedItem : selectedItem});
		}
		// this._currentFilterKey = selectedItemKey;
	}
};

sap.suite.ui.commons.Timeline.prototype.onclick = function(oEvent) {
	if (jQuery(oEvent.target).parents('.sapSuiteUiCommonsTimelineItemShell').length === 1) {
	  var selectedItemId = jQuery(oEvent.target).parents('.sapSuiteUiCommonsTimelineItem').attr('id');
	  var selectedItem = sap.ui.core.Core().byId(selectedItemId);
		this.fireSelect({selectedItem : selectedItem});
		}
};

}; // end of sap/suite/ui/commons/Timeline.js
